"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nodemailer";
exports.ids = ["vendor-chunks/nodemailer"];
exports.modules = {

/***/ "(rsc)/./node_modules/nodemailer/lib/addressparser/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/addressparser/index.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */ function _handleAddress(tokens) {\n    let token;\n    let isGroup = false;\n    let state = \"text\";\n    let address;\n    let addresses = [];\n    let data = {\n        address: [],\n        comment: [],\n        group: [],\n        text: []\n    };\n    let i;\n    let len;\n    // Filter out <addresses>, (comments) and regular text\n    for(i = 0, len = tokens.length; i < len; i++){\n        token = tokens[i];\n        if (token.type === \"operator\") {\n            switch(token.value){\n                case \"<\":\n                    state = \"address\";\n                    break;\n                case \"(\":\n                    state = \"comment\";\n                    break;\n                case \":\":\n                    state = \"group\";\n                    isGroup = true;\n                    break;\n                default:\n                    state = \"text\";\n            }\n        } else if (token.value) {\n            if (state === \"address\") {\n                // handle use case where unquoted name includes a \"<\"\n                // Apple Mail truncates everything between an unexpected < and an address\n                // and so will we\n                token.value = token.value.replace(/^[^<]*<\\s*/, \"\");\n            }\n            data[state].push(token.value);\n        }\n    }\n    // If there is no text but a comment, replace the two\n    if (!data.text.length && data.comment.length) {\n        data.text = data.comment;\n        data.comment = [];\n    }\n    if (isGroup) {\n        // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n        data.text = data.text.join(\" \");\n        addresses.push({\n            name: data.text || address && address.name,\n            group: data.group.length ? addressparser(data.group.join(\",\")) : []\n        });\n    } else {\n        // If no address was found, try to detect one from regular text\n        if (!data.address.length && data.text.length) {\n            for(i = data.text.length - 1; i >= 0; i--){\n                if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    data.address = data.text.splice(i, 1);\n                    break;\n                }\n            }\n            let _regexHandler = function(address) {\n                if (!data.address.length) {\n                    data.address = [\n                        address.trim()\n                    ];\n                    return \" \";\n                } else {\n                    return address;\n                }\n            };\n            // still no address\n            if (!data.address.length) {\n                for(i = data.text.length - 1; i >= 0; i--){\n                    // fixed the regex to parse email address correctly when email address has more than one @\n                    data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n                    if (data.address.length) {\n                        break;\n                    }\n                }\n            }\n        }\n        // If there's still is no text but a comment exixts, replace the two\n        if (!data.text.length && data.comment.length) {\n            data.text = data.comment;\n            data.comment = [];\n        }\n        // Keep only the first address occurence, push others to regular text\n        if (data.address.length > 1) {\n            data.text = data.text.concat(data.address.splice(1));\n        }\n        // Join values with spaces\n        data.text = data.text.join(\" \");\n        data.address = data.address.join(\" \");\n        if (!data.address && isGroup) {\n            return [];\n        } else {\n            address = {\n                address: data.address || data.text || \"\",\n                name: data.text || data.address || \"\"\n            };\n            if (address.address === address.name) {\n                if ((address.address || \"\").match(/@/)) {\n                    address.name = \"\";\n                } else {\n                    address.address = \"\";\n                }\n            }\n            addresses.push(address);\n        }\n    }\n    return addresses;\n}\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */ class Tokenizer {\n    constructor(str){\n        this.str = (str || \"\").toString();\n        this.operatorCurrent = \"\";\n        this.operatorExpecting = \"\";\n        this.node = null;\n        this.escaped = false;\n        this.list = [];\n        /**\n         * Operator tokens and which tokens are expected to end the sequence\n         */ this.operators = {\n            '\"': '\"',\n            \"(\": \")\",\n            \"<\": \">\",\n            \",\": \"\",\n            \":\": \";\",\n            // Semicolons are not a legal delimiter per the RFC2822 grammar other\n            // than for terminating a group, but they are also not valid for any\n            // other use in this context.  Given that some mail clients have\n            // historically allowed the semicolon as a delimiter equivalent to the\n            // comma in their UI, it makes sense to treat them the same as a comma\n            // when used outside of a group.\n            \";\": \"\"\n        };\n    }\n    /**\n     * Tokenizes the original input string\n     *\n     * @return {Array} An array of operator|text tokens\n     */ tokenize() {\n        let chr, list = [];\n        for(let i = 0, len = this.str.length; i < len; i++){\n            chr = this.str.charAt(i);\n            this.checkChar(chr);\n        }\n        this.list.forEach((node)=>{\n            node.value = (node.value || \"\").toString().trim();\n            if (node.value) {\n                list.push(node);\n            }\n        });\n        return list;\n    }\n    /**\n     * Checks if a character is an operator or text and acts accordingly\n     *\n     * @param {String} chr Character from the address field\n     */ checkChar(chr) {\n        if (this.escaped) {\n        // ignore next condition blocks\n        } else if (chr === this.operatorExpecting) {\n            this.node = {\n                type: \"operator\",\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = \"\";\n            this.escaped = false;\n            return;\n        } else if (!this.operatorExpecting && chr in this.operators) {\n            this.node = {\n                type: \"operator\",\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = this.operators[chr];\n            this.escaped = false;\n            return;\n        } else if ([\n            '\"',\n            \"'\"\n        ].includes(this.operatorExpecting) && chr === \"\\\\\") {\n            this.escaped = true;\n            return;\n        }\n        if (!this.node) {\n            this.node = {\n                type: \"text\",\n                value: \"\"\n            };\n            this.list.push(this.node);\n        }\n        if (chr === \"\\n\") {\n            // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n            // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n            chr = \" \";\n        }\n        if (chr.charCodeAt(0) >= 0x21 || [\n            \" \",\n            \"\t\"\n        ].includes(chr)) {\n            // skip command bytes\n            this.node.value += chr;\n        }\n        this.escaped = false;\n    }\n}\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */ function addressparser(str, options) {\n    options = options || {};\n    let tokenizer = new Tokenizer(str);\n    let tokens = tokenizer.tokenize();\n    let addresses = [];\n    let address = [];\n    let parsedAddresses = [];\n    tokens.forEach((token)=>{\n        if (token.type === \"operator\" && (token.value === \",\" || token.value === \";\")) {\n            if (address.length) {\n                addresses.push(address);\n            }\n            address = [];\n        } else {\n            address.push(token);\n        }\n    });\n    if (address.length) {\n        addresses.push(address);\n    }\n    addresses.forEach((address)=>{\n        address = _handleAddress(address);\n        if (address.length) {\n            parsedAddresses = parsedAddresses.concat(address);\n        }\n    });\n    if (options.flatten) {\n        let addresses = [];\n        let walkAddressList = (list)=>{\n            list.forEach((address)=>{\n                if (address.group) {\n                    return walkAddressList(address.group);\n                } else {\n                    addresses.push(address);\n                }\n            });\n        };\n        walkAddressList(parsedAddresses);\n        return addresses;\n    }\n    return parsedAddresses;\n}\n// expose to the world\nmodule.exports = addressparser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/addressparser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/base64/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/base64/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */ function encode(buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer, \"utf-8\");\n    }\n    return buffer.toString(\"base64\");\n}\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */ function wrap(str, lineLength) {\n    str = (str || \"\").toString();\n    lineLength = lineLength || 76;\n    if (str.length <= lineLength) {\n        return str;\n    }\n    let result = [];\n    let pos = 0;\n    let chunkLength = lineLength * 1024;\n    while(pos < str.length){\n        let wrappedLines = str.substr(pos, chunkLength).replace(new RegExp(\".{\" + lineLength + \"}\", \"g\"), \"$&\\r\\n\").trim();\n        result.push(wrappedLines);\n        pos += chunkLength;\n    }\n    return result.join(\"\\r\\n\").trim();\n}\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */ class Encoder extends Transform {\n    constructor(options){\n        super();\n        // init Transform\n        this.options = options || {};\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n        this._curLine = \"\";\n        this._remainingBytes = false;\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n    _transform(chunk, encoding, done) {\n        if (encoding !== \"buffer\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n        this.inputBytes += chunk.length;\n        if (this._remainingBytes && this._remainingBytes.length) {\n            chunk = Buffer.concat([\n                this._remainingBytes,\n                chunk\n            ], this._remainingBytes.length + chunk.length);\n            this._remainingBytes = false;\n        }\n        if (chunk.length % 3) {\n            this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);\n            chunk = chunk.slice(0, chunk.length - chunk.length % 3);\n        } else {\n            this._remainingBytes = false;\n        }\n        let b64 = this._curLine + encode(chunk);\n        if (this.options.lineLength) {\n            b64 = wrap(b64, this.options.lineLength);\n            // remove last line as it is still most probably incomplete\n            let lastLF = b64.lastIndexOf(\"\\n\");\n            if (lastLF < 0) {\n                this._curLine = b64;\n                b64 = \"\";\n            } else if (lastLF === b64.length - 1) {\n                this._curLine = \"\";\n            } else {\n                this._curLine = b64.substr(lastLF + 1);\n                b64 = b64.substr(0, lastLF + 1);\n            }\n        }\n        if (b64) {\n            this.outputBytes += b64.length;\n            this.push(Buffer.from(b64, \"ascii\"));\n        }\n        setImmediate(done);\n    }\n    _flush(done) {\n        if (this._remainingBytes && this._remainingBytes.length) {\n            this._curLine += encode(this._remainingBytes);\n        }\n        if (this._curLine) {\n            this._curLine = wrap(this._curLine, this.options.lineLength);\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, \"ascii\");\n            this._curLine = \"\";\n        }\n        done();\n    }\n}\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/base64/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/index.js":
/*!***************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\nconst MessageParser = __webpack_require__(/*! ./message-parser */ \"(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js\");\nconst RelaxedBody = __webpack_require__(/*! ./relaxed-body */ \"(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js\");\nconst sign = __webpack_require__(/*! ./sign */ \"(rsc)/./node_modules/nodemailer/lib/dkim/sign.js\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst DKIM_ALGO = \"sha256\";\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/ class DKIMSigner {\n    constructor(options, keys, input, output){\n        this.options = options || {};\n        this.keys = keys;\n        this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n        this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n        this.cacheDir = this.options.cacheDir || false;\n        this.chunks = [];\n        this.chunklen = 0;\n        this.readPos = 0;\n        this.cachePath = this.cacheDir ? path.join(this.cacheDir, \"message.\" + Date.now() + \"-\" + crypto.randomBytes(14).toString(\"hex\")) : false;\n        this.cache = false;\n        this.headers = false;\n        this.bodyHash = false;\n        this.parser = false;\n        this.relaxedBody = false;\n        this.input = input;\n        this.output = output;\n        this.output.usingCache = false;\n        this.hasErrored = false;\n        this.input.on(\"error\", (err)=>{\n            this.hasErrored = true;\n            this.cleanup();\n            output.emit(\"error\", err);\n        });\n    }\n    cleanup() {\n        if (!this.cache || !this.cachePath) {\n            return;\n        }\n        fs.unlink(this.cachePath, ()=>false);\n    }\n    createReadCache() {\n        // pipe remainings to cache file\n        this.cache = fs.createReadStream(this.cachePath);\n        this.cache.once(\"error\", (err)=>{\n            this.cleanup();\n            this.output.emit(\"error\", err);\n        });\n        this.cache.once(\"close\", ()=>{\n            this.cleanup();\n        });\n        this.cache.pipe(this.output);\n    }\n    sendNextChunk() {\n        if (this.hasErrored) {\n            return;\n        }\n        if (this.readPos >= this.chunks.length) {\n            if (!this.cache) {\n                return this.output.end();\n            }\n            return this.createReadCache();\n        }\n        let chunk = this.chunks[this.readPos++];\n        if (this.output.write(chunk) === false) {\n            return this.output.once(\"drain\", ()=>{\n                this.sendNextChunk();\n            });\n        }\n        setImmediate(()=>this.sendNextChunk());\n    }\n    sendSignedOutput() {\n        let keyPos = 0;\n        let signNextKey = ()=>{\n            if (keyPos >= this.keys.length) {\n                this.output.write(this.parser.rawHeaders);\n                return setImmediate(()=>this.sendNextChunk());\n            }\n            let key = this.keys[keyPos++];\n            let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n                domainName: key.domainName,\n                keySelector: key.keySelector,\n                privateKey: key.privateKey,\n                headerFieldNames: this.options.headerFieldNames,\n                skipFields: this.options.skipFields\n            });\n            if (dkimField) {\n                this.output.write(Buffer.from(dkimField + \"\\r\\n\"));\n            }\n            return setImmediate(signNextKey);\n        };\n        if (this.bodyHash && this.headers) {\n            return signNextKey();\n        }\n        this.output.write(this.parser.rawHeaders);\n        this.sendNextChunk();\n    }\n    createWriteCache() {\n        this.output.usingCache = true;\n        // pipe remainings to cache file\n        this.cache = fs.createWriteStream(this.cachePath);\n        this.cache.once(\"error\", (err)=>{\n            this.cleanup();\n            // drain input\n            this.relaxedBody.unpipe(this.cache);\n            this.relaxedBody.on(\"readable\", ()=>{\n                while(this.relaxedBody.read() !== null){\n                // do nothing\n                }\n            });\n            this.hasErrored = true;\n            // emit error\n            this.output.emit(\"error\", err);\n        });\n        this.cache.once(\"close\", ()=>{\n            this.sendSignedOutput();\n        });\n        this.relaxedBody.removeAllListeners(\"readable\");\n        this.relaxedBody.pipe(this.cache);\n    }\n    signStream() {\n        this.parser = new MessageParser();\n        this.relaxedBody = new RelaxedBody({\n            hashAlgo: this.hashAlgo\n        });\n        this.parser.on(\"headers\", (value)=>{\n            this.headers = value;\n        });\n        this.relaxedBody.on(\"hash\", (value)=>{\n            this.bodyHash = value;\n        });\n        this.relaxedBody.on(\"readable\", ()=>{\n            let chunk;\n            if (this.cache) {\n                return;\n            }\n            while((chunk = this.relaxedBody.read()) !== null){\n                this.chunks.push(chunk);\n                this.chunklen += chunk.length;\n                if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n                    return this.createWriteCache();\n                }\n            }\n        });\n        this.relaxedBody.on(\"end\", ()=>{\n            if (this.cache) {\n                return;\n            }\n            this.sendSignedOutput();\n        });\n        this.parser.pipe(this.relaxedBody);\n        setImmediate(()=>this.input.pipe(this.parser));\n    }\n}\nclass DKIM {\n    constructor(options){\n        this.options = options || {};\n        this.keys = [].concat(this.options.keys || {\n            domainName: options.domainName,\n            keySelector: options.keySelector,\n            privateKey: options.privateKey\n        });\n    }\n    sign(input, extraOptions) {\n        let output = new PassThrough();\n        let inputStream = input;\n        let writeValue = false;\n        if (Buffer.isBuffer(input)) {\n            writeValue = input;\n            inputStream = new PassThrough();\n        } else if (typeof input === \"string\") {\n            writeValue = Buffer.from(input);\n            inputStream = new PassThrough();\n        }\n        let options = this.options;\n        if (extraOptions && Object.keys(extraOptions).length) {\n            options = {};\n            Object.keys(this.options || {}).forEach((key)=>{\n                options[key] = this.options[key];\n            });\n            Object.keys(extraOptions || {}).forEach((key)=>{\n                if (!(key in options)) {\n                    options[key] = extraOptions[key];\n                }\n            });\n        }\n        let signer = new DKIMSigner(options, this.keys, inputStream, output);\n        setImmediate(()=>{\n            signer.signStream();\n            if (writeValue) {\n                setImmediate(()=>{\n                    inputStream.end(writeValue);\n                });\n            }\n        });\n        return output;\n    }\n}\nmodule.exports = DKIM;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvZGtpbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVM7QUFDVCx5RkFBeUY7QUFFekYsTUFBTUEsZ0JBQWdCQyxtQkFBT0EsQ0FBQztBQUM5QixNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUM1QixNQUFNRSxPQUFPRixtQkFBT0EsQ0FBQztBQUNyQixNQUFNRyxjQUFjSCx5REFBNkI7QUFDakQsTUFBTUksS0FBS0osbUJBQU9BLENBQUM7QUFDbkIsTUFBTUssT0FBT0wsbUJBQU9BLENBQUM7QUFDckIsTUFBTU0sU0FBU04sbUJBQU9BLENBQUM7QUFFdkIsTUFBTU8sWUFBWTtBQUNsQixNQUFNQyxtQkFBbUIsTUFBTSxNQUFNLDJDQUEyQztBQUVoRjs7Ozs7Ozs7Ozs7OztBQWFBLEdBRUEsTUFBTUM7SUFDRkMsWUFBWUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxDQUFFO1FBQ3RDLElBQUksQ0FBQ0gsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFDM0IsSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBRVosSUFBSSxDQUFDRyxhQUFhLEdBQUdDLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNJLGFBQWEsS0FBS1A7UUFDM0QsSUFBSSxDQUFDUyxRQUFRLEdBQUcsSUFBSSxDQUFDTixPQUFPLENBQUNNLFFBQVEsSUFBSVY7UUFFekMsSUFBSSxDQUFDVyxRQUFRLEdBQUcsSUFBSSxDQUFDUCxPQUFPLENBQUNPLFFBQVEsSUFBSTtRQUV6QyxJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO1FBQ2hCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFDSixRQUFRLEdBQUdiLEtBQUtrQixJQUFJLENBQUMsSUFBSSxDQUFDTCxRQUFRLEVBQUUsYUFBYU0sS0FBS0MsR0FBRyxLQUFLLE1BQU1uQixPQUFPb0IsV0FBVyxDQUFDLElBQUlDLFFBQVEsQ0FBQyxVQUFVO1FBQ3BJLElBQUksQ0FBQ0MsS0FBSyxHQUFHO1FBRWIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLFFBQVEsR0FBRztRQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBRztRQUNkLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBRW5CLElBQUksQ0FBQ25CLEtBQUssR0FBR0E7UUFDYixJQUFJLENBQUNDLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNBLE1BQU0sQ0FBQ21CLFVBQVUsR0FBRztRQUV6QixJQUFJLENBQUNDLFVBQVUsR0FBRztRQUVsQixJQUFJLENBQUNyQixLQUFLLENBQUNzQixFQUFFLENBQUMsU0FBU0MsQ0FBQUE7WUFDbkIsSUFBSSxDQUFDRixVQUFVLEdBQUc7WUFDbEIsSUFBSSxDQUFDRyxPQUFPO1lBQ1p2QixPQUFPd0IsSUFBSSxDQUFDLFNBQVNGO1FBQ3pCO0lBQ0o7SUFFQUMsVUFBVTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUNULEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQ04sU0FBUyxFQUFFO1lBQ2hDO1FBQ0o7UUFDQWxCLEdBQUdtQyxNQUFNLENBQUMsSUFBSSxDQUFDakIsU0FBUyxFQUFFLElBQU07SUFDcEM7SUFFQWtCLGtCQUFrQjtRQUNkLGdDQUFnQztRQUNoQyxJQUFJLENBQUNaLEtBQUssR0FBR3hCLEdBQUdxQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUNuQixTQUFTO1FBQy9DLElBQUksQ0FBQ00sS0FBSyxDQUFDYyxJQUFJLENBQUMsU0FBU04sQ0FBQUE7WUFDckIsSUFBSSxDQUFDQyxPQUFPO1lBQ1osSUFBSSxDQUFDdkIsTUFBTSxDQUFDd0IsSUFBSSxDQUFDLFNBQVNGO1FBQzlCO1FBQ0EsSUFBSSxDQUFDUixLQUFLLENBQUNjLElBQUksQ0FBQyxTQUFTO1lBQ3JCLElBQUksQ0FBQ0wsT0FBTztRQUNoQjtRQUNBLElBQUksQ0FBQ1QsS0FBSyxDQUFDZSxJQUFJLENBQUMsSUFBSSxDQUFDN0IsTUFBTTtJQUMvQjtJQUVBOEIsZ0JBQWdCO1FBQ1osSUFBSSxJQUFJLENBQUNWLFVBQVUsRUFBRTtZQUNqQjtRQUNKO1FBRUEsSUFBSSxJQUFJLENBQUNiLE9BQU8sSUFBSSxJQUFJLENBQUNGLE1BQU0sQ0FBQzBCLE1BQU0sRUFBRTtZQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDakIsS0FBSyxFQUFFO2dCQUNiLE9BQU8sSUFBSSxDQUFDZCxNQUFNLENBQUNnQyxHQUFHO1lBQzFCO1lBQ0EsT0FBTyxJQUFJLENBQUNOLGVBQWU7UUFDL0I7UUFDQSxJQUFJTyxRQUFRLElBQUksQ0FBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUNFLE9BQU8sR0FBRztRQUN2QyxJQUFJLElBQUksQ0FBQ1AsTUFBTSxDQUFDa0MsS0FBSyxDQUFDRCxXQUFXLE9BQU87WUFDcEMsT0FBTyxJQUFJLENBQUNqQyxNQUFNLENBQUM0QixJQUFJLENBQUMsU0FBUztnQkFDN0IsSUFBSSxDQUFDRSxhQUFhO1lBQ3RCO1FBQ0o7UUFDQUssYUFBYSxJQUFNLElBQUksQ0FBQ0wsYUFBYTtJQUN6QztJQUVBTSxtQkFBbUI7UUFDZixJQUFJQyxTQUFTO1FBQ2IsSUFBSUMsY0FBYztZQUNkLElBQUlELFVBQVUsSUFBSSxDQUFDdkMsSUFBSSxDQUFDaUMsTUFBTSxFQUFFO2dCQUM1QixJQUFJLENBQUMvQixNQUFNLENBQUNrQyxLQUFLLENBQUMsSUFBSSxDQUFDakIsTUFBTSxDQUFDc0IsVUFBVTtnQkFDeEMsT0FBT0osYUFBYSxJQUFNLElBQUksQ0FBQ0wsYUFBYTtZQUNoRDtZQUNBLElBQUlVLE1BQU0sSUFBSSxDQUFDMUMsSUFBSSxDQUFDdUMsU0FBUztZQUM3QixJQUFJSSxZQUFZckQsS0FBSyxJQUFJLENBQUMyQixPQUFPLEVBQUUsSUFBSSxDQUFDWixRQUFRLEVBQUUsSUFBSSxDQUFDYSxRQUFRLEVBQUU7Z0JBQzdEMEIsWUFBWUYsSUFBSUUsVUFBVTtnQkFDMUJDLGFBQWFILElBQUlHLFdBQVc7Z0JBQzVCQyxZQUFZSixJQUFJSSxVQUFVO2dCQUMxQkMsa0JBQWtCLElBQUksQ0FBQ2hELE9BQU8sQ0FBQ2dELGdCQUFnQjtnQkFDL0NDLFlBQVksSUFBSSxDQUFDakQsT0FBTyxDQUFDaUQsVUFBVTtZQUN2QztZQUNBLElBQUlMLFdBQVc7Z0JBQ1gsSUFBSSxDQUFDekMsTUFBTSxDQUFDa0MsS0FBSyxDQUFDYSxPQUFPQyxJQUFJLENBQUNQLFlBQVk7WUFDOUM7WUFDQSxPQUFPTixhQUFhRztRQUN4QjtRQUVBLElBQUksSUFBSSxDQUFDdEIsUUFBUSxJQUFJLElBQUksQ0FBQ0QsT0FBTyxFQUFFO1lBQy9CLE9BQU91QjtRQUNYO1FBRUEsSUFBSSxDQUFDdEMsTUFBTSxDQUFDa0MsS0FBSyxDQUFDLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ3NCLFVBQVU7UUFDeEMsSUFBSSxDQUFDVCxhQUFhO0lBQ3RCO0lBRUFtQixtQkFBbUI7UUFDZixJQUFJLENBQUNqRCxNQUFNLENBQUNtQixVQUFVLEdBQUc7UUFDekIsZ0NBQWdDO1FBQ2hDLElBQUksQ0FBQ0wsS0FBSyxHQUFHeEIsR0FBRzRELGlCQUFpQixDQUFDLElBQUksQ0FBQzFDLFNBQVM7UUFDaEQsSUFBSSxDQUFDTSxLQUFLLENBQUNjLElBQUksQ0FBQyxTQUFTTixDQUFBQTtZQUNyQixJQUFJLENBQUNDLE9BQU87WUFDWixjQUFjO1lBQ2QsSUFBSSxDQUFDTCxXQUFXLENBQUNpQyxNQUFNLENBQUMsSUFBSSxDQUFDckMsS0FBSztZQUNsQyxJQUFJLENBQUNJLFdBQVcsQ0FBQ0csRUFBRSxDQUFDLFlBQVk7Z0JBQzVCLE1BQU8sSUFBSSxDQUFDSCxXQUFXLENBQUNrQyxJQUFJLE9BQU8sS0FBTTtnQkFDckMsYUFBYTtnQkFDakI7WUFDSjtZQUNBLElBQUksQ0FBQ2hDLFVBQVUsR0FBRztZQUNsQixhQUFhO1lBQ2IsSUFBSSxDQUFDcEIsTUFBTSxDQUFDd0IsSUFBSSxDQUFDLFNBQVNGO1FBQzlCO1FBQ0EsSUFBSSxDQUFDUixLQUFLLENBQUNjLElBQUksQ0FBQyxTQUFTO1lBQ3JCLElBQUksQ0FBQ1EsZ0JBQWdCO1FBQ3pCO1FBQ0EsSUFBSSxDQUFDbEIsV0FBVyxDQUFDbUMsa0JBQWtCLENBQUM7UUFDcEMsSUFBSSxDQUFDbkMsV0FBVyxDQUFDVyxJQUFJLENBQUMsSUFBSSxDQUFDZixLQUFLO0lBQ3BDO0lBRUF3QyxhQUFhO1FBQ1QsSUFBSSxDQUFDckMsTUFBTSxHQUFHLElBQUloQztRQUNsQixJQUFJLENBQUNpQyxXQUFXLEdBQUcsSUFBSS9CLFlBQVk7WUFDL0JnQixVQUFVLElBQUksQ0FBQ0EsUUFBUTtRQUMzQjtRQUVBLElBQUksQ0FBQ2MsTUFBTSxDQUFDSSxFQUFFLENBQUMsV0FBV2tDLENBQUFBO1lBQ3RCLElBQUksQ0FBQ3hDLE9BQU8sR0FBR3dDO1FBQ25CO1FBRUEsSUFBSSxDQUFDckMsV0FBVyxDQUFDRyxFQUFFLENBQUMsUUFBUWtDLENBQUFBO1lBQ3hCLElBQUksQ0FBQ3ZDLFFBQVEsR0FBR3VDO1FBQ3BCO1FBRUEsSUFBSSxDQUFDckMsV0FBVyxDQUFDRyxFQUFFLENBQUMsWUFBWTtZQUM1QixJQUFJWTtZQUNKLElBQUksSUFBSSxDQUFDbkIsS0FBSyxFQUFFO2dCQUNaO1lBQ0o7WUFDQSxNQUFPLENBQUNtQixRQUFRLElBQUksQ0FBQ2YsV0FBVyxDQUFDa0MsSUFBSSxFQUFDLE1BQU8sS0FBTTtnQkFDL0MsSUFBSSxDQUFDL0MsTUFBTSxDQUFDbUQsSUFBSSxDQUFDdkI7Z0JBQ2pCLElBQUksQ0FBQzNCLFFBQVEsSUFBSTJCLE1BQU1GLE1BQU07Z0JBQzdCLElBQUksSUFBSSxDQUFDekIsUUFBUSxJQUFJLElBQUksQ0FBQ0wsYUFBYSxJQUFJLElBQUksQ0FBQ08sU0FBUyxFQUFFO29CQUN2RCxPQUFPLElBQUksQ0FBQ3lDLGdCQUFnQjtnQkFDaEM7WUFDSjtRQUNKO1FBRUEsSUFBSSxDQUFDL0IsV0FBVyxDQUFDRyxFQUFFLENBQUMsT0FBTztZQUN2QixJQUFJLElBQUksQ0FBQ1AsS0FBSyxFQUFFO2dCQUNaO1lBQ0o7WUFDQSxJQUFJLENBQUNzQixnQkFBZ0I7UUFDekI7UUFFQSxJQUFJLENBQUNuQixNQUFNLENBQUNZLElBQUksQ0FBQyxJQUFJLENBQUNYLFdBQVc7UUFDakNpQixhQUFhLElBQU0sSUFBSSxDQUFDcEMsS0FBSyxDQUFDOEIsSUFBSSxDQUFDLElBQUksQ0FBQ1osTUFBTTtJQUNsRDtBQUNKO0FBRUEsTUFBTXdDO0lBQ0Y3RCxZQUFZQyxPQUFPLENBQUU7UUFDakIsSUFBSSxDQUFDQSxPQUFPLEdBQUdBLFdBQVcsQ0FBQztRQUMzQixJQUFJLENBQUNDLElBQUksR0FBRyxFQUFFLENBQUM0RCxNQUFNLENBQ2pCLElBQUksQ0FBQzdELE9BQU8sQ0FBQ0MsSUFBSSxJQUFJO1lBQ2pCNEMsWUFBWTdDLFFBQVE2QyxVQUFVO1lBQzlCQyxhQUFhOUMsUUFBUThDLFdBQVc7WUFDaENDLFlBQVkvQyxRQUFRK0MsVUFBVTtRQUNsQztJQUVSO0lBRUF4RCxLQUFLVyxLQUFLLEVBQUU0RCxZQUFZLEVBQUU7UUFDdEIsSUFBSTNELFNBQVMsSUFBSVg7UUFDakIsSUFBSXVFLGNBQWM3RDtRQUNsQixJQUFJOEQsYUFBYTtRQUVqQixJQUFJZCxPQUFPZSxRQUFRLENBQUMvRCxRQUFRO1lBQ3hCOEQsYUFBYTlEO1lBQ2I2RCxjQUFjLElBQUl2RTtRQUN0QixPQUFPLElBQUksT0FBT1UsVUFBVSxVQUFVO1lBQ2xDOEQsYUFBYWQsT0FBT0MsSUFBSSxDQUFDakQ7WUFDekI2RCxjQUFjLElBQUl2RTtRQUN0QjtRQUVBLElBQUlRLFVBQVUsSUFBSSxDQUFDQSxPQUFPO1FBQzFCLElBQUk4RCxnQkFBZ0JJLE9BQU9qRSxJQUFJLENBQUM2RCxjQUFjNUIsTUFBTSxFQUFFO1lBQ2xEbEMsVUFBVSxDQUFDO1lBQ1hrRSxPQUFPakUsSUFBSSxDQUFDLElBQUksQ0FBQ0QsT0FBTyxJQUFJLENBQUMsR0FBR21FLE9BQU8sQ0FBQ3hCLENBQUFBO2dCQUNwQzNDLE9BQU8sQ0FBQzJDLElBQUksR0FBRyxJQUFJLENBQUMzQyxPQUFPLENBQUMyQyxJQUFJO1lBQ3BDO1lBQ0F1QixPQUFPakUsSUFBSSxDQUFDNkQsZ0JBQWdCLENBQUMsR0FBR0ssT0FBTyxDQUFDeEIsQ0FBQUE7Z0JBQ3BDLElBQUksQ0FBRUEsQ0FBQUEsT0FBTzNDLE9BQU0sR0FBSTtvQkFDbkJBLE9BQU8sQ0FBQzJDLElBQUksR0FBR21CLFlBQVksQ0FBQ25CLElBQUk7Z0JBQ3BDO1lBQ0o7UUFDSjtRQUVBLElBQUl5QixTQUFTLElBQUl0RSxXQUFXRSxTQUFTLElBQUksQ0FBQ0MsSUFBSSxFQUFFOEQsYUFBYTVEO1FBQzdEbUMsYUFBYTtZQUNUOEIsT0FBT1gsVUFBVTtZQUNqQixJQUFJTyxZQUFZO2dCQUNaMUIsYUFBYTtvQkFDVHlCLFlBQVk1QixHQUFHLENBQUM2QjtnQkFDcEI7WUFDSjtRQUNKO1FBRUEsT0FBTzdEO0lBQ1g7QUFDSjtBQUVBa0UsT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub2RlbWFpbGVyL2xpYi9ka2ltL2luZGV4LmpzP2E0MzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBGSVhNRTpcbi8vIHJlcGxhY2UgdGhpcyBUcmFuc2Zvcm0gbWVzcyB3aXRoIGEgbWV0aG9kIHRoYXQgcGlwZXMgaW5wdXQgYXJndW1lbnQgdG8gb3V0cHV0IGFyZ3VtZW50XG5cbmNvbnN0IE1lc3NhZ2VQYXJzZXIgPSByZXF1aXJlKCcuL21lc3NhZ2UtcGFyc2VyJyk7XG5jb25zdCBSZWxheGVkQm9keSA9IHJlcXVpcmUoJy4vcmVsYXhlZC1ib2R5Jyk7XG5jb25zdCBzaWduID0gcmVxdWlyZSgnLi9zaWduJyk7XG5jb25zdCBQYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3N0cmVhbScpLlBhc3NUaHJvdWdoO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG5jb25zdCBES0lNX0FMR08gPSAnc2hhMjU2JztcbmNvbnN0IE1BWF9NRVNTQUdFX1NJWkUgPSAxMjggKiAxMDI0OyAvLyBidWZmZXIgbWVzc2FnZXMgbGFyZ2VyIHRoYW4gdGhpcyB0byBkaXNrXG5cbi8qXG4vLyBVc2FnZTpcblxubGV0IGRraW0gPSBuZXcgREtJTSh7XG4gICAgZG9tYWluTmFtZTogJ2V4YW1wbGUuY29tJyxcbiAgICBrZXlTZWxlY3RvcjogJ2tleS1zZWxlY3RvcicsXG4gICAgcHJpdmF0ZUtleSxcbiAgICBjYWNoZURpcjogJy90bXAnXG59KTtcbmRraW0uc2lnbihpbnB1dCkucGlwZShwcm9jZXNzLnN0ZG91dCk7XG5cbi8vIFdoZXJlIGlucHV0U3RyZWFtIGlzIGEgcmZjODIyIG1lc3NhZ2UgKGVpdGhlciBhIHN0cmVhbSwgc3RyaW5nIG9yIEJ1ZmZlcilcbi8vIGFuZCBvdXRwdXRTdHJlYW0gaXMgYSBES0lNIHNpZ25lZCByZmM4MjIgbWVzc2FnZVxuKi9cblxuY2xhc3MgREtJTVNpZ25lciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywga2V5cywgaW5wdXQsIG91dHB1dCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLmtleXMgPSBrZXlzO1xuXG4gICAgICAgIHRoaXMuY2FjaGVUcmVzaG9sZCA9IE51bWJlcih0aGlzLm9wdGlvbnMuY2FjaGVUcmVzaG9sZCkgfHwgTUFYX01FU1NBR0VfU0laRTtcbiAgICAgICAgdGhpcy5oYXNoQWxnbyA9IHRoaXMub3B0aW9ucy5oYXNoQWxnbyB8fCBES0lNX0FMR087XG5cbiAgICAgICAgdGhpcy5jYWNoZURpciA9IHRoaXMub3B0aW9ucy5jYWNoZURpciB8fCBmYWxzZTtcblxuICAgICAgICB0aGlzLmNodW5rcyA9IFtdO1xuICAgICAgICB0aGlzLmNodW5rbGVuID0gMDtcbiAgICAgICAgdGhpcy5yZWFkUG9zID0gMDtcbiAgICAgICAgdGhpcy5jYWNoZVBhdGggPSB0aGlzLmNhY2hlRGlyID8gcGF0aC5qb2luKHRoaXMuY2FjaGVEaXIsICdtZXNzYWdlLicgKyBEYXRlLm5vdygpICsgJy0nICsgY3J5cHRvLnJhbmRvbUJ5dGVzKDE0KS50b1N0cmluZygnaGV4JykpIDogZmFsc2U7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmhlYWRlcnMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5ib2R5SGFzaCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBhcnNlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlbGF4ZWRCb2R5ID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgICAgICB0aGlzLm91dHB1dCA9IG91dHB1dDtcbiAgICAgICAgdGhpcy5vdXRwdXQudXNpbmdDYWNoZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuaGFzRXJyb3JlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuaW5wdXQub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFzRXJyb3JlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgICAgIG91dHB1dC5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsZWFudXAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jYWNoZSB8fCAhdGhpcy5jYWNoZVBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmcy51bmxpbmsodGhpcy5jYWNoZVBhdGgsICgpID0+IGZhbHNlKTtcbiAgICB9XG5cbiAgICBjcmVhdGVSZWFkQ2FjaGUoKSB7XG4gICAgICAgIC8vIHBpcGUgcmVtYWluaW5ncyB0byBjYWNoZSBmaWxlXG4gICAgICAgIHRoaXMuY2FjaGUgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKHRoaXMuY2FjaGVQYXRoKTtcbiAgICAgICAgdGhpcy5jYWNoZS5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0LmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2FjaGUub25jZSgnY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2FjaGUucGlwZSh0aGlzLm91dHB1dCk7XG4gICAgfVxuXG4gICAgc2VuZE5leHRDaHVuaygpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzRXJyb3JlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucmVhZFBvcyA+PSB0aGlzLmNodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jYWNoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm91dHB1dC5lbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlYWRDYWNoZSgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjaHVuayA9IHRoaXMuY2h1bmtzW3RoaXMucmVhZFBvcysrXTtcbiAgICAgICAgaWYgKHRoaXMub3V0cHV0LndyaXRlKGNodW5rKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm91dHB1dC5vbmNlKCdkcmFpbicsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmROZXh0Q2h1bmsoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB0aGlzLnNlbmROZXh0Q2h1bmsoKSk7XG4gICAgfVxuXG4gICAgc2VuZFNpZ25lZE91dHB1dCgpIHtcbiAgICAgICAgbGV0IGtleVBvcyA9IDA7XG4gICAgICAgIGxldCBzaWduTmV4dEtleSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChrZXlQb3MgPj0gdGhpcy5rZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0LndyaXRlKHRoaXMucGFyc2VyLnJhd0hlYWRlcnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRJbW1lZGlhdGUoKCkgPT4gdGhpcy5zZW5kTmV4dENodW5rKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGtleSA9IHRoaXMua2V5c1trZXlQb3MrK107XG4gICAgICAgICAgICBsZXQgZGtpbUZpZWxkID0gc2lnbih0aGlzLmhlYWRlcnMsIHRoaXMuaGFzaEFsZ28sIHRoaXMuYm9keUhhc2gsIHtcbiAgICAgICAgICAgICAgICBkb21haW5OYW1lOiBrZXkuZG9tYWluTmFtZSxcbiAgICAgICAgICAgICAgICBrZXlTZWxlY3Rvcjoga2V5LmtleVNlbGVjdG9yLFxuICAgICAgICAgICAgICAgIHByaXZhdGVLZXk6IGtleS5wcml2YXRlS2V5LFxuICAgICAgICAgICAgICAgIGhlYWRlckZpZWxkTmFtZXM6IHRoaXMub3B0aW9ucy5oZWFkZXJGaWVsZE5hbWVzLFxuICAgICAgICAgICAgICAgIHNraXBGaWVsZHM6IHRoaXMub3B0aW9ucy5za2lwRmllbGRzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChka2ltRmllbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm91dHB1dC53cml0ZShCdWZmZXIuZnJvbShka2ltRmllbGQgKyAnXFxyXFxuJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldEltbWVkaWF0ZShzaWduTmV4dEtleSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuYm9keUhhc2ggJiYgdGhpcy5oZWFkZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gc2lnbk5leHRLZXkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3V0cHV0LndyaXRlKHRoaXMucGFyc2VyLnJhd0hlYWRlcnMpO1xuICAgICAgICB0aGlzLnNlbmROZXh0Q2h1bmsoKTtcbiAgICB9XG5cbiAgICBjcmVhdGVXcml0ZUNhY2hlKCkge1xuICAgICAgICB0aGlzLm91dHB1dC51c2luZ0NhY2hlID0gdHJ1ZTtcbiAgICAgICAgLy8gcGlwZSByZW1haW5pbmdzIHRvIGNhY2hlIGZpbGVcbiAgICAgICAgdGhpcy5jYWNoZSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKHRoaXMuY2FjaGVQYXRoKTtcbiAgICAgICAgdGhpcy5jYWNoZS5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgICAgIC8vIGRyYWluIGlucHV0XG4gICAgICAgICAgICB0aGlzLnJlbGF4ZWRCb2R5LnVucGlwZSh0aGlzLmNhY2hlKTtcbiAgICAgICAgICAgIHRoaXMucmVsYXhlZEJvZHkub24oJ3JlYWRhYmxlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLnJlbGF4ZWRCb2R5LnJlYWQoKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmhhc0Vycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgLy8gZW1pdCBlcnJvclxuICAgICAgICAgICAgdGhpcy5vdXRwdXQuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYWNoZS5vbmNlKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VuZFNpZ25lZE91dHB1dCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZWxheGVkQm9keS5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlYWRhYmxlJyk7XG4gICAgICAgIHRoaXMucmVsYXhlZEJvZHkucGlwZSh0aGlzLmNhY2hlKTtcbiAgICB9XG5cbiAgICBzaWduU3RyZWFtKCkge1xuICAgICAgICB0aGlzLnBhcnNlciA9IG5ldyBNZXNzYWdlUGFyc2VyKCk7XG4gICAgICAgIHRoaXMucmVsYXhlZEJvZHkgPSBuZXcgUmVsYXhlZEJvZHkoe1xuICAgICAgICAgICAgaGFzaEFsZ286IHRoaXMuaGFzaEFsZ29cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5wYXJzZXIub24oJ2hlYWRlcnMnLCB2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcnMgPSB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5yZWxheGVkQm9keS5vbignaGFzaCcsIHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMuYm9keUhhc2ggPSB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5yZWxheGVkQm9keS5vbigncmVhZGFibGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgY2h1bms7XG4gICAgICAgICAgICBpZiAodGhpcy5jYWNoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICgoY2h1bmsgPSB0aGlzLnJlbGF4ZWRCb2R5LnJlYWQoKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNodW5rbGVuICs9IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaHVua2xlbiA+PSB0aGlzLmNhY2hlVHJlc2hvbGQgJiYgdGhpcy5jYWNoZVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlV3JpdGVDYWNoZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5yZWxheGVkQm9keS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNlbmRTaWduZWRPdXRwdXQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5wYXJzZXIucGlwZSh0aGlzLnJlbGF4ZWRCb2R5KTtcbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHRoaXMuaW5wdXQucGlwZSh0aGlzLnBhcnNlcikpO1xuICAgIH1cbn1cblxuY2xhc3MgREtJTSB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLmtleXMgPSBbXS5jb25jYXQoXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMua2V5cyB8fCB7XG4gICAgICAgICAgICAgICAgZG9tYWluTmFtZTogb3B0aW9ucy5kb21haW5OYW1lLFxuICAgICAgICAgICAgICAgIGtleVNlbGVjdG9yOiBvcHRpb25zLmtleVNlbGVjdG9yLFxuICAgICAgICAgICAgICAgIHByaXZhdGVLZXk6IG9wdGlvbnMucHJpdmF0ZUtleVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHNpZ24oaW5wdXQsIGV4dHJhT3B0aW9ucykge1xuICAgICAgICBsZXQgb3V0cHV0ID0gbmV3IFBhc3NUaHJvdWdoKCk7XG4gICAgICAgIGxldCBpbnB1dFN0cmVhbSA9IGlucHV0O1xuICAgICAgICBsZXQgd3JpdGVWYWx1ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICB3cml0ZVZhbHVlID0gaW5wdXQ7XG4gICAgICAgICAgICBpbnB1dFN0cmVhbSA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHdyaXRlVmFsdWUgPSBCdWZmZXIuZnJvbShpbnB1dCk7XG4gICAgICAgICAgICBpbnB1dFN0cmVhbSA9IG5ldyBQYXNzVGhyb3VnaCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChleHRyYU9wdGlvbnMgJiYgT2JqZWN0LmtleXMoZXh0cmFPcHRpb25zKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucyB8fCB7fSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IHRoaXMub3B0aW9uc1trZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhleHRyYU9wdGlvbnMgfHwge30pLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gb3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gZXh0cmFPcHRpb25zW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2lnbmVyID0gbmV3IERLSU1TaWduZXIob3B0aW9ucywgdGhpcy5rZXlzLCBpbnB1dFN0cmVhbSwgb3V0cHV0KTtcbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgIHNpZ25lci5zaWduU3RyZWFtKCk7XG4gICAgICAgICAgICBpZiAod3JpdGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0U3RyZWFtLmVuZCh3cml0ZVZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gREtJTTtcbiJdLCJuYW1lcyI6WyJNZXNzYWdlUGFyc2VyIiwicmVxdWlyZSIsIlJlbGF4ZWRCb2R5Iiwic2lnbiIsIlBhc3NUaHJvdWdoIiwiZnMiLCJwYXRoIiwiY3J5cHRvIiwiREtJTV9BTEdPIiwiTUFYX01FU1NBR0VfU0laRSIsIkRLSU1TaWduZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJrZXlzIiwiaW5wdXQiLCJvdXRwdXQiLCJjYWNoZVRyZXNob2xkIiwiTnVtYmVyIiwiaGFzaEFsZ28iLCJjYWNoZURpciIsImNodW5rcyIsImNodW5rbGVuIiwicmVhZFBvcyIsImNhY2hlUGF0aCIsImpvaW4iLCJEYXRlIiwibm93IiwicmFuZG9tQnl0ZXMiLCJ0b1N0cmluZyIsImNhY2hlIiwiaGVhZGVycyIsImJvZHlIYXNoIiwicGFyc2VyIiwicmVsYXhlZEJvZHkiLCJ1c2luZ0NhY2hlIiwiaGFzRXJyb3JlZCIsIm9uIiwiZXJyIiwiY2xlYW51cCIsImVtaXQiLCJ1bmxpbmsiLCJjcmVhdGVSZWFkQ2FjaGUiLCJjcmVhdGVSZWFkU3RyZWFtIiwib25jZSIsInBpcGUiLCJzZW5kTmV4dENodW5rIiwibGVuZ3RoIiwiZW5kIiwiY2h1bmsiLCJ3cml0ZSIsInNldEltbWVkaWF0ZSIsInNlbmRTaWduZWRPdXRwdXQiLCJrZXlQb3MiLCJzaWduTmV4dEtleSIsInJhd0hlYWRlcnMiLCJrZXkiLCJka2ltRmllbGQiLCJkb21haW5OYW1lIiwia2V5U2VsZWN0b3IiLCJwcml2YXRlS2V5IiwiaGVhZGVyRmllbGROYW1lcyIsInNraXBGaWVsZHMiLCJCdWZmZXIiLCJmcm9tIiwiY3JlYXRlV3JpdGVDYWNoZSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwidW5waXBlIiwicmVhZCIsInJlbW92ZUFsbExpc3RlbmVycyIsInNpZ25TdHJlYW0iLCJ2YWx1ZSIsInB1c2giLCJES0lNIiwiY29uY2F0IiwiZXh0cmFPcHRpb25zIiwiaW5wdXRTdHJlYW0iLCJ3cml0ZVZhbHVlIiwiaXNCdWZmZXIiLCJPYmplY3QiLCJmb3JFYWNoIiwic2lnbmVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/message-parser.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n/**\n * MessageParser instance is a transform stream that separates message headers\n * from the rest of the body. Headers are emitted with the 'headers' event. Message\n * body is passed on as the resulting stream.\n */ class MessageParser extends Transform {\n    constructor(options){\n        super(options);\n        this.lastBytes = Buffer.alloc(4);\n        this.headersParsed = false;\n        this.headerBytes = 0;\n        this.headerChunks = [];\n        this.rawHeaders = false;\n        this.bodySize = 0;\n    }\n    /**\n     * Keeps count of the last 4 bytes in order to detect line breaks on chunk boundaries\n     *\n     * @param {Buffer} data Next data chunk from the stream\n     */ updateLastBytes(data) {\n        let lblen = this.lastBytes.length;\n        let nblen = Math.min(data.length, lblen);\n        // shift existing bytes\n        for(let i = 0, len = lblen - nblen; i < len; i++){\n            this.lastBytes[i] = this.lastBytes[i + nblen];\n        }\n        // add new bytes\n        for(let i = 1; i <= nblen; i++){\n            this.lastBytes[lblen - i] = data[data.length - i];\n        }\n    }\n    /**\n     * Finds and removes message headers from the remaining body. We want to keep\n     * headers separated until final delivery to be able to modify these\n     *\n     * @param {Buffer} data Next chunk of data\n     * @return {Boolean} Returns true if headers are already found or false otherwise\n     */ checkHeaders(data) {\n        if (this.headersParsed) {\n            return true;\n        }\n        let lblen = this.lastBytes.length;\n        let headerPos = 0;\n        this.curLinePos = 0;\n        for(let i = 0, len = this.lastBytes.length + data.length; i < len; i++){\n            let chr;\n            if (i < lblen) {\n                chr = this.lastBytes[i];\n            } else {\n                chr = data[i - lblen];\n            }\n            if (chr === 0x0a && i) {\n                let pr1 = i - 1 < lblen ? this.lastBytes[i - 1] : data[i - 1 - lblen];\n                let pr2 = i > 1 ? i - 2 < lblen ? this.lastBytes[i - 2] : data[i - 2 - lblen] : false;\n                if (pr1 === 0x0a) {\n                    this.headersParsed = true;\n                    headerPos = i - lblen + 1;\n                    this.headerBytes += headerPos;\n                    break;\n                } else if (pr1 === 0x0d && pr2 === 0x0a) {\n                    this.headersParsed = true;\n                    headerPos = i - lblen + 1;\n                    this.headerBytes += headerPos;\n                    break;\n                }\n            }\n        }\n        if (this.headersParsed) {\n            this.headerChunks.push(data.slice(0, headerPos));\n            this.rawHeaders = Buffer.concat(this.headerChunks, this.headerBytes);\n            this.headerChunks = null;\n            this.emit(\"headers\", this.parseHeaders());\n            if (data.length - 1 > headerPos) {\n                let chunk = data.slice(headerPos);\n                this.bodySize += chunk.length;\n                // this would be the first chunk of data sent downstream\n                setImmediate(()=>this.push(chunk));\n            }\n            return false;\n        } else {\n            this.headerBytes += data.length;\n            this.headerChunks.push(data);\n        }\n        // store last 4 bytes to catch header break\n        this.updateLastBytes(data);\n        return false;\n    }\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n        if (typeof chunk === \"string\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        let headersFound;\n        try {\n            headersFound = this.checkHeaders(chunk);\n        } catch (E) {\n            return callback(E);\n        }\n        if (headersFound) {\n            this.bodySize += chunk.length;\n            this.push(chunk);\n        }\n        setImmediate(callback);\n    }\n    _flush(callback) {\n        if (this.headerChunks) {\n            let chunk = Buffer.concat(this.headerChunks, this.headerBytes);\n            this.bodySize += chunk.length;\n            this.push(chunk);\n            this.headerChunks = null;\n        }\n        callback();\n    }\n    parseHeaders() {\n        let lines = (this.rawHeaders || \"\").toString().split(/\\r?\\n/);\n        for(let i = lines.length - 1; i > 0; i--){\n            if (/^\\s/.test(lines[i])) {\n                lines[i - 1] += \"\\n\" + lines[i];\n                lines.splice(i, 1);\n            }\n        }\n        return lines.filter((line)=>line.trim()).map((line)=>({\n                key: line.substr(0, line.indexOf(\":\")).trim().toLowerCase(),\n                line\n            }));\n    }\n}\nmodule.exports = MessageParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js":
/*!**********************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/relaxed-body.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// streams through a message body and calculates relaxed body hash\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nclass RelaxedBody extends Transform {\n    constructor(options){\n        super();\n        options = options || {};\n        this.chunkBuffer = [];\n        this.chunkBufferLen = 0;\n        this.bodyHash = crypto.createHash(options.hashAlgo || \"sha1\");\n        this.remainder = \"\";\n        this.byteLength = 0;\n        this.debug = options.debug;\n        this._debugBody = options.debug ? [] : false;\n    }\n    updateHash(chunk) {\n        let bodyStr;\n        // find next remainder\n        let nextRemainder = \"\";\n        // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n        // If we get another chunk that does not match this description then we can restore the previously processed data\n        let state = \"file\";\n        for(let i = chunk.length - 1; i >= 0; i--){\n            let c = chunk[i];\n            if (state === \"file\" && (c === 0x0a || c === 0x0d)) {\n            // do nothing, found \\n or \\r at the end of chunk, stil end of file\n            } else if (state === \"file\" && (c === 0x09 || c === 0x20)) {\n                // switch to line ending mode, this is the last non-empty line\n                state = \"line\";\n            } else if (state === \"line\" && (c === 0x09 || c === 0x20)) {\n            // do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n            } else if (state === \"file\" || state === \"line\") {\n                // non line/file ending character found, switch to body mode\n                state = \"body\";\n                if (i === chunk.length - 1) {\n                    break;\n                }\n            }\n            if (i === 0) {\n                // reached to the beginning of the chunk, check if it is still about the ending\n                // and if the remainder also matches\n                if (state === \"file\" && (!this.remainder || /[\\r\\n]$/.test(this.remainder)) || state === \"line\" && (!this.remainder || /[ \\t]$/.test(this.remainder))) {\n                    // keep everything\n                    this.remainder += chunk.toString(\"binary\");\n                    return;\n                } else if (state === \"line\" || state === \"file\") {\n                    // process existing remainder as normal line but store the current chunk\n                    nextRemainder = chunk.toString(\"binary\");\n                    chunk = false;\n                    break;\n                }\n            }\n            if (state !== \"body\") {\n                continue;\n            }\n            // reached first non ending byte\n            nextRemainder = chunk.slice(i + 1).toString(\"binary\");\n            chunk = chunk.slice(0, i + 1);\n            break;\n        }\n        let needsFixing = !!this.remainder;\n        if (chunk && !needsFixing) {\n            // check if we even need to change anything\n            for(let i = 0, len = chunk.length; i < len; i++){\n                if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {\n                    // missing \\r before \\n\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {\n                    // trailing WSP found\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {\n                    // multiple spaces found, needs to be replaced with just one\n                    needsFixing = true;\n                    break;\n                } else if (chunk[i] === 0x09) {\n                    // TAB found, needs to be replaced with a space\n                    needsFixing = true;\n                    break;\n                }\n            }\n        }\n        if (needsFixing) {\n            bodyStr = this.remainder + (chunk ? chunk.toString(\"binary\") : \"\");\n            this.remainder = nextRemainder;\n            bodyStr = bodyStr.replace(/\\r?\\n/g, \"\\n\") // use js line endings\n            .replace(/[ \\t]*$/gm, \"\") // remove line endings, rtrim\n            .replace(/[ \\t]+/gm, \" \") // single spaces\n            .replace(/\\n/g, \"\\r\\n\"); // restore rfc822 line endings\n            chunk = Buffer.from(bodyStr, \"binary\");\n        } else if (nextRemainder) {\n            this.remainder = nextRemainder;\n        }\n        if (this.debug) {\n            this._debugBody.push(chunk);\n        }\n        this.bodyHash.update(chunk);\n    }\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n        if (typeof chunk === \"string\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        this.updateHash(chunk);\n        this.byteLength += chunk.length;\n        this.push(chunk);\n        callback();\n    }\n    _flush(callback) {\n        // generate final hash and emit it\n        if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n            // add terminating line end\n            this.bodyHash.update(Buffer.from(\"\\r\\n\"));\n        }\n        if (!this.byteLength) {\n            // emit empty line buffer to keep the stream flowing\n            this.push(Buffer.from(\"\\r\\n\"));\n        // this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n        this.emit(\"hash\", this.bodyHash.digest(\"base64\"), this.debug ? Buffer.concat(this._debugBody) : false);\n        callback();\n    }\n}\nmodule.exports = RelaxedBody;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/sign.js":
/*!**************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/sign.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst punycode = __webpack_require__(/*! punycode */ \"punycode\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Returns DKIM signature header line\n *\n * @param {Object} headers Parsed headers object from MessageParser\n * @param {String} bodyHash Base64 encoded hash of the message\n * @param {Object} options DKIM options\n * @param {String} options.domainName Domain name to be signed for\n * @param {String} options.keySelector DKIM key selector to use\n * @param {String} options.privateKey DKIM private key to use\n * @return {String} Complete header line\n */ module.exports = (headers, hashAlgo, bodyHash, options)=>{\n    options = options || {};\n    // all listed fields from RFC4871 #5.5\n    let defaultFieldNames = \"From:Sender:Reply-To:Subject:Date:Message-ID:To:\" + \"Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:\" + \"Content-Description:Resent-Date:Resent-From:Resent-Sender:\" + \"Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:\" + \"List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:\" + \"List-Owner:List-Archive\";\n    let fieldNames = options.headerFieldNames || defaultFieldNames;\n    let canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);\n    let dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);\n    let signer, signature;\n    canonicalizedHeaderData.headers += \"dkim-signature:\" + relaxedHeaderLine(dkimHeader);\n    signer = crypto.createSign((\"rsa-\" + hashAlgo).toUpperCase());\n    signer.update(canonicalizedHeaderData.headers);\n    try {\n        signature = signer.sign(options.privateKey, \"base64\");\n    } catch (E) {\n        return false;\n    }\n    return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\\r?\\n|\\r))/g, \"$&\\r\\n \").trim();\n};\nmodule.exports.relaxedHeaders = relaxedHeaders;\nfunction generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {\n    let dkim = [\n        \"v=1\",\n        \"a=rsa-\" + hashAlgo,\n        \"c=relaxed/relaxed\",\n        \"d=\" + punycode.toASCII(domainName),\n        \"q=dns/txt\",\n        \"s=\" + keySelector,\n        \"bh=\" + bodyHash,\n        \"h=\" + fieldNames\n    ].join(\"; \");\n    return mimeFuncs.foldLines(\"DKIM-Signature: \" + dkim, 76) + \";\\r\\n b=\";\n}\nfunction relaxedHeaders(headers, fieldNames, skipFields) {\n    let includedFields = new Set();\n    let skip = new Set();\n    let headerFields = new Map();\n    (skipFields || \"\").toLowerCase().split(\":\").forEach((field)=>{\n        skip.add(field.trim());\n    });\n    (fieldNames || \"\").toLowerCase().split(\":\").filter((field)=>!skip.has(field.trim())).forEach((field)=>{\n        includedFields.add(field.trim());\n    });\n    for(let i = headers.length - 1; i >= 0; i--){\n        let line = headers[i];\n        // only include the first value from bottom to top\n        if (includedFields.has(line.key) && !headerFields.has(line.key)) {\n            headerFields.set(line.key, relaxedHeaderLine(line.line));\n        }\n    }\n    let headersList = [];\n    let fields = [];\n    includedFields.forEach((field)=>{\n        if (headerFields.has(field)) {\n            fields.push(field);\n            headersList.push(field + \":\" + headerFields.get(field));\n        }\n    });\n    return {\n        headers: headersList.join(\"\\r\\n\") + \"\\r\\n\",\n        fieldNames: fields.join(\":\")\n    };\n}\nfunction relaxedHeaderLine(line) {\n    return line.substr(line.indexOf(\":\") + 1).replace(/\\r?\\n/g, \"\").replace(/\\s+/g, \" \").trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js":
/*!******************************************************!*\
  !*** ./node_modules/nodemailer/lib/fetch/cookies.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// module to handle cookies\nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst SESSION_TIMEOUT = 1800; // 30 min\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */ class Cookies {\n    constructor(options){\n        this.options = options || {};\n        this.cookies = [];\n    }\n    /**\n     * Stores a cookie string to the cookie storage\n     *\n     * @param {String} cookieStr Value from the 'Set-Cookie:' header\n     * @param {String} url Current URL\n     */ set(cookieStr, url) {\n        let urlparts = urllib.parse(url || \"\");\n        let cookie = this.parse(cookieStr);\n        let domain;\n        if (cookie.domain) {\n            domain = cookie.domain.replace(/^\\./, \"\");\n            // do not allow cross origin cookies\n            if (// can't be valid if the requested domain is shorter than current hostname\n            urlparts.hostname.length < domain.length || // prefix domains with dot to be sure that partial matches are not used\n            (\".\" + urlparts.hostname).substr(-domain.length + 1) !== \".\" + domain) {\n                cookie.domain = urlparts.hostname;\n            }\n        } else {\n            cookie.domain = urlparts.hostname;\n        }\n        if (!cookie.path) {\n            cookie.path = this.getPath(urlparts.pathname);\n        }\n        // if no expire date, then use sessionTimeout value\n        if (!cookie.expires) {\n            cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n        }\n        return this.add(cookie);\n    }\n    /**\n     * Returns cookie string for the 'Cookie:' header.\n     *\n     * @param {String} url URL to check for\n     * @returns {String} Cookie header or empty string if no matches were found\n     */ get(url) {\n        return this.list(url).map((cookie)=>cookie.name + \"=\" + cookie.value).join(\"; \");\n    }\n    /**\n     * Lists all valied cookie objects for the specified URL\n     *\n     * @param {String} url URL to check for\n     * @returns {Array} An array of cookie objects\n     */ list(url) {\n        let result = [];\n        let i;\n        let cookie;\n        for(i = this.cookies.length - 1; i >= 0; i--){\n            cookie = this.cookies[i];\n            if (this.isExpired(cookie)) {\n                this.cookies.splice(i, i);\n                continue;\n            }\n            if (this.match(cookie, url)) {\n                result.unshift(cookie);\n            }\n        }\n        return result;\n    }\n    /**\n     * Parses cookie string from the 'Set-Cookie:' header\n     *\n     * @param {String} cookieStr String from the 'Set-Cookie:' header\n     * @returns {Object} Cookie object\n     */ parse(cookieStr) {\n        let cookie = {};\n        (cookieStr || \"\").toString().split(\";\").forEach((cookiePart)=>{\n            let valueParts = cookiePart.split(\"=\");\n            let key = valueParts.shift().trim().toLowerCase();\n            let value = valueParts.join(\"=\").trim();\n            let domain;\n            if (!key) {\n                // skip empty parts\n                return;\n            }\n            switch(key){\n                case \"expires\":\n                    value = new Date(value);\n                    // ignore date if can not parse it\n                    if (value.toString() !== \"Invalid Date\") {\n                        cookie.expires = value;\n                    }\n                    break;\n                case \"path\":\n                    cookie.path = value;\n                    break;\n                case \"domain\":\n                    domain = value.toLowerCase();\n                    if (domain.length && domain.charAt(0) !== \".\") {\n                        domain = \".\" + domain; // ensure preceeding dot for user set domains\n                    }\n                    cookie.domain = domain;\n                    break;\n                case \"max-age\":\n                    cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n                    break;\n                case \"secure\":\n                    cookie.secure = true;\n                    break;\n                case \"httponly\":\n                    cookie.httponly = true;\n                    break;\n                default:\n                    if (!cookie.name) {\n                        cookie.name = key;\n                        cookie.value = value;\n                    }\n            }\n        });\n        return cookie;\n    }\n    /**\n     * Checks if a cookie object is valid for a specified URL\n     *\n     * @param {Object} cookie Cookie object\n     * @param {String} url URL to check for\n     * @returns {Boolean} true if cookie is valid for specifiec URL\n     */ match(cookie, url) {\n        let urlparts = urllib.parse(url || \"\");\n        // check if hostname matches\n        // .foo.com also matches subdomains, foo.com does not\n        if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== \".\" || (\".\" + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {\n            return false;\n        }\n        // check if path matches\n        let path = this.getPath(urlparts.pathname);\n        if (path.substr(0, cookie.path.length) !== cookie.path) {\n            return false;\n        }\n        // check secure argument\n        if (cookie.secure && urlparts.protocol !== \"https:\") {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Adds (or updates/removes if needed) a cookie object to the cookie storage\n     *\n     * @param {Object} cookie Cookie value to be stored\n     */ add(cookie) {\n        let i;\n        let len;\n        // nothing to do here\n        if (!cookie || !cookie.name) {\n            return false;\n        }\n        // overwrite if has same params\n        for(i = 0, len = this.cookies.length; i < len; i++){\n            if (this.compare(this.cookies[i], cookie)) {\n                // check if the cookie needs to be removed instead\n                if (this.isExpired(cookie)) {\n                    this.cookies.splice(i, 1); // remove expired/unset cookie\n                    return false;\n                }\n                this.cookies[i] = cookie;\n                return true;\n            }\n        }\n        // add as new if not already expired\n        if (!this.isExpired(cookie)) {\n            this.cookies.push(cookie);\n        }\n        return true;\n    }\n    /**\n     * Checks if two cookie objects are the same\n     *\n     * @param {Object} a Cookie to check against\n     * @param {Object} b Cookie to check against\n     * @returns {Boolean} True, if the cookies are the same\n     */ compare(a, b) {\n        return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n    }\n    /**\n     * Checks if a cookie is expired\n     *\n     * @param {Object} cookie Cookie object to check against\n     * @returns {Boolean} True, if the cookie is expired\n     */ isExpired(cookie) {\n        return cookie.expires && cookie.expires < new Date() || !cookie.value;\n    }\n    /**\n     * Returns normalized cookie path for an URL path argument\n     *\n     * @param {String} pathname\n     * @returns {String} Normalized path\n     */ getPath(pathname) {\n        let path = (pathname || \"/\").split(\"/\");\n        path.pop(); // remove filename part\n        path = path.join(\"/\").trim();\n        // ensure path prefix /\n        if (path.charAt(0) !== \"/\") {\n            path = \"/\" + path;\n        }\n        // ensure path suffix /\n        if (path.substr(-1) !== \"/\") {\n            path += \"/\";\n        }\n        return path;\n    }\n}\nmodule.exports = Cookies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/fetch/index.js":
/*!****************************************************!*\
  !*** ./node_modules/nodemailer/lib/fetch/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst Cookies = __webpack_require__(/*! ./cookies */ \"(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst MAX_REDIRECTS = 5;\nmodule.exports = function(url, options) {\n    return nmfetch(url, options);\n};\nmodule.exports.Cookies = Cookies;\nfunction nmfetch(url, options) {\n    options = options || {};\n    options.fetchRes = options.fetchRes || new PassThrough();\n    options.cookies = options.cookies || new Cookies();\n    options.redirects = options.redirects || 0;\n    options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;\n    if (options.cookie) {\n        [].concat(options.cookie || []).forEach((cookie)=>{\n            options.cookies.set(cookie, url);\n        });\n        options.cookie = false;\n    }\n    let fetchRes = options.fetchRes;\n    let parsed = urllib.parse(url);\n    let method = (options.method || \"\").toString().trim().toUpperCase() || \"GET\";\n    let finished = false;\n    let cookies;\n    let body;\n    let handler = parsed.protocol === \"https:\" ? https : http;\n    let headers = {\n        \"accept-encoding\": \"gzip,deflate\",\n        \"user-agent\": \"nodemailer/\" + packageData.version\n    };\n    Object.keys(options.headers || {}).forEach((key)=>{\n        headers[key.toLowerCase().trim()] = options.headers[key];\n    });\n    if (options.userAgent) {\n        headers[\"user-agent\"] = options.userAgent;\n    }\n    if (parsed.auth) {\n        headers.Authorization = \"Basic \" + Buffer.from(parsed.auth).toString(\"base64\");\n    }\n    if (cookies = options.cookies.get(url)) {\n        headers.cookie = cookies;\n    }\n    if (options.body) {\n        if (options.contentType !== false) {\n            headers[\"Content-Type\"] = options.contentType || \"application/x-www-form-urlencoded\";\n        }\n        if (typeof options.body.pipe === \"function\") {\n            // it's a stream\n            headers[\"Transfer-Encoding\"] = \"chunked\";\n            body = options.body;\n            body.on(\"error\", (err)=>{\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n            });\n        } else {\n            if (options.body instanceof Buffer) {\n                body = options.body;\n            } else if (typeof options.body === \"object\") {\n                try {\n                    // encodeURIComponent can fail on invalid input (partial emoji etc.)\n                    body = Buffer.from(Object.keys(options.body).map((key)=>{\n                        let value = options.body[key].toString().trim();\n                        return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n                    }).join(\"&\"));\n                } catch (E) {\n                    if (finished) {\n                        return;\n                    }\n                    finished = true;\n                    E.type = \"FETCH\";\n                    E.sourceUrl = url;\n                    fetchRes.emit(\"error\", E);\n                    return;\n                }\n            } else {\n                body = Buffer.from(options.body.toString().trim());\n            }\n            headers[\"Content-Type\"] = options.contentType || \"application/x-www-form-urlencoded\";\n            headers[\"Content-Length\"] = body.length;\n        }\n        // if method is not provided, use POST instead of GET\n        method = (options.method || \"\").toString().trim().toUpperCase() || \"POST\";\n    }\n    let req;\n    let reqOptions = {\n        method,\n        host: parsed.hostname,\n        path: parsed.path,\n        port: parsed.port ? parsed.port : parsed.protocol === \"https:\" ? 443 : 80,\n        headers,\n        rejectUnauthorized: false,\n        agent: false\n    };\n    if (options.tls) {\n        Object.keys(options.tls).forEach((key)=>{\n            reqOptions[key] = options.tls[key];\n        });\n    }\n    if (parsed.protocol === \"https:\" && parsed.hostname && parsed.hostname !== reqOptions.host && !net.isIP(parsed.hostname) && !reqOptions.servername) {\n        reqOptions.servername = parsed.hostname;\n    }\n    try {\n        req = handler.request(reqOptions);\n    } catch (E) {\n        finished = true;\n        setImmediate(()=>{\n            E.type = \"FETCH\";\n            E.sourceUrl = url;\n            fetchRes.emit(\"error\", E);\n        });\n        return fetchRes;\n    }\n    if (options.timeout) {\n        req.setTimeout(options.timeout, ()=>{\n            if (finished) {\n                return;\n            }\n            finished = true;\n            req.abort();\n            let err = new Error(\"Request Timeout\");\n            err.type = \"FETCH\";\n            err.sourceUrl = url;\n            fetchRes.emit(\"error\", err);\n        });\n    }\n    req.on(\"error\", (err)=>{\n        if (finished) {\n            return;\n        }\n        finished = true;\n        err.type = \"FETCH\";\n        err.sourceUrl = url;\n        fetchRes.emit(\"error\", err);\n    });\n    req.on(\"response\", (res)=>{\n        let inflate;\n        if (finished) {\n            return;\n        }\n        switch(res.headers[\"content-encoding\"]){\n            case \"gzip\":\n            case \"deflate\":\n                inflate = zlib.createUnzip();\n                break;\n        }\n        if (res.headers[\"set-cookie\"]) {\n            [].concat(res.headers[\"set-cookie\"] || []).forEach((cookie)=>{\n                options.cookies.set(cookie, url);\n            });\n        }\n        if ([\n            301,\n            302,\n            303,\n            307,\n            308\n        ].includes(res.statusCode) && res.headers.location) {\n            // redirect\n            options.redirects++;\n            if (options.redirects > options.maxRedirects) {\n                finished = true;\n                let err = new Error(\"Maximum redirect count exceeded\");\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n                req.abort();\n                return;\n            }\n            // redirect does not include POST body\n            options.method = \"GET\";\n            options.body = false;\n            return nmfetch(urllib.resolve(url, res.headers.location), options);\n        }\n        fetchRes.statusCode = res.statusCode;\n        fetchRes.headers = res.headers;\n        if (res.statusCode >= 300 && !options.allowErrorResponse) {\n            finished = true;\n            let err = new Error(\"Invalid status code \" + res.statusCode);\n            err.type = \"FETCH\";\n            err.sourceUrl = url;\n            fetchRes.emit(\"error\", err);\n            req.abort();\n            return;\n        }\n        res.on(\"error\", (err)=>{\n            if (finished) {\n                return;\n            }\n            finished = true;\n            err.type = \"FETCH\";\n            err.sourceUrl = url;\n            fetchRes.emit(\"error\", err);\n            req.abort();\n        });\n        if (inflate) {\n            res.pipe(inflate).pipe(fetchRes);\n            inflate.on(\"error\", (err)=>{\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n                req.abort();\n            });\n        } else {\n            res.pipe(fetchRes);\n        }\n    });\n    setImmediate(()=>{\n        if (body) {\n            try {\n                if (typeof body.pipe === \"function\") {\n                    return body.pipe(req);\n                } else {\n                    req.write(body);\n                }\n            } catch (err) {\n                finished = true;\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n                return;\n            }\n        }\n        req.end();\n    });\n    return fetchRes;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvZmV0Y2gvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNyQixNQUFNQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUN0QixNQUFNRSxTQUFTRixtQkFBT0EsQ0FBQztBQUN2QixNQUFNRyxPQUFPSCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNSSxjQUFjSix5REFBNkI7QUFDakQsTUFBTUssVUFBVUwsbUJBQU9BLENBQUM7QUFDeEIsTUFBTU0sY0FBY04sbUJBQU9BLENBQUM7QUFDNUIsTUFBTU8sTUFBTVAsbUJBQU9BLENBQUM7QUFFcEIsTUFBTVEsZ0JBQWdCO0FBRXRCQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsR0FBRyxFQUFFQyxPQUFPO0lBQ25DLE9BQU9DLFFBQVFGLEtBQUtDO0FBQ3hCO0FBRUFILHNCQUFzQixHQUFHSjtBQUV6QixTQUFTUSxRQUFRRixHQUFHLEVBQUVDLE9BQU87SUFDekJBLFVBQVVBLFdBQVcsQ0FBQztJQUV0QkEsUUFBUUUsUUFBUSxHQUFHRixRQUFRRSxRQUFRLElBQUksSUFBSVY7SUFDM0NRLFFBQVFHLE9BQU8sR0FBR0gsUUFBUUcsT0FBTyxJQUFJLElBQUlWO0lBQ3pDTyxRQUFRSSxTQUFTLEdBQUdKLFFBQVFJLFNBQVMsSUFBSTtJQUN6Q0osUUFBUUssWUFBWSxHQUFHQyxNQUFNTixRQUFRSyxZQUFZLElBQUlULGdCQUFnQkksUUFBUUssWUFBWTtJQUV6RixJQUFJTCxRQUFRTyxNQUFNLEVBQUU7UUFDaEIsRUFBRSxDQUFDQyxNQUFNLENBQUNSLFFBQVFPLE1BQU0sSUFBSSxFQUFFLEVBQUVFLE9BQU8sQ0FBQ0YsQ0FBQUE7WUFDcENQLFFBQVFHLE9BQU8sQ0FBQ08sR0FBRyxDQUFDSCxRQUFRUjtRQUNoQztRQUNBQyxRQUFRTyxNQUFNLEdBQUc7SUFDckI7SUFFQSxJQUFJTCxXQUFXRixRQUFRRSxRQUFRO0lBQy9C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QUFTcUMsSUFBSSxDQUFDLFNBQVNIO2dCQUN2QlUsSUFBSWUsS0FBSztZQUNiO1FBQ0osT0FBTztZQUNIRSxJQUFJN0IsSUFBSSxDQUFDaEM7UUFDYjtJQUNKO0lBRUF3RCxhQUFhO1FBQ1QsSUFBSXhDLE1BQU07WUFDTixJQUFJO2dCQUNBLElBQUksT0FBT0EsS0FBS2dCLElBQUksS0FBSyxZQUFZO29CQUNqQyxPQUFPaEIsS0FBS2dCLElBQUksQ0FBQ1k7Z0JBQ3JCLE9BQU87b0JBQ0hBLElBQUl5QixLQUFLLENBQUNyRDtnQkFDZDtZQUNKLEVBQUUsT0FBT2tCLEtBQUs7Z0JBQ1ZuQixXQUFXO2dCQUNYbUIsSUFBSUMsSUFBSSxHQUFHO2dCQUNYRCxJQUFJRSxTQUFTLEdBQUd2QztnQkFDaEJHLFNBQVNxQyxJQUFJLENBQUMsU0FBU0g7Z0JBQ3ZCO1lBQ0o7UUFDSjtRQUNBVSxJQUFJMEIsR0FBRztJQUNYO0lBRUEsT0FBT3RFO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvZmV0Y2gvaW5kZXguanM/MTQ3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCB1cmxsaWIgPSByZXF1aXJlKCd1cmwnKTtcbmNvbnN0IHpsaWIgPSByZXF1aXJlKCd6bGliJyk7XG5jb25zdCBQYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3N0cmVhbScpLlBhc3NUaHJvdWdoO1xuY29uc3QgQ29va2llcyA9IHJlcXVpcmUoJy4vY29va2llcycpO1xuY29uc3QgcGFja2FnZURhdGEgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcbmNvbnN0IG5ldCA9IHJlcXVpcmUoJ25ldCcpO1xuXG5jb25zdCBNQVhfUkVESVJFQ1RTID0gNTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5tZmV0Y2godXJsLCBvcHRpb25zKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLkNvb2tpZXMgPSBDb29raWVzO1xuXG5mdW5jdGlvbiBubWZldGNoKHVybCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgb3B0aW9ucy5mZXRjaFJlcyA9IG9wdGlvbnMuZmV0Y2hSZXMgfHwgbmV3IFBhc3NUaHJvdWdoKCk7XG4gICAgb3B0aW9ucy5jb29raWVzID0gb3B0aW9ucy5jb29raWVzIHx8IG5ldyBDb29raWVzKCk7XG4gICAgb3B0aW9ucy5yZWRpcmVjdHMgPSBvcHRpb25zLnJlZGlyZWN0cyB8fCAwO1xuICAgIG9wdGlvbnMubWF4UmVkaXJlY3RzID0gaXNOYU4ob3B0aW9ucy5tYXhSZWRpcmVjdHMpID8gTUFYX1JFRElSRUNUUyA6IG9wdGlvbnMubWF4UmVkaXJlY3RzO1xuXG4gICAgaWYgKG9wdGlvbnMuY29va2llKSB7XG4gICAgICAgIFtdLmNvbmNhdChvcHRpb25zLmNvb2tpZSB8fCBbXSkuZm9yRWFjaChjb29raWUgPT4ge1xuICAgICAgICAgICAgb3B0aW9ucy5jb29raWVzLnNldChjb29raWUsIHVybCk7XG4gICAgICAgIH0pO1xuICAgICAgICBvcHRpb25zLmNvb2tpZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGxldCBmZXRjaFJlcyA9IG9wdGlvbnMuZmV0Y2hSZXM7XG4gICAgbGV0IHBhcnNlZCA9IHVybGxpYi5wYXJzZSh1cmwpO1xuICAgIGxldCBtZXRob2QgPSAob3B0aW9ucy5tZXRob2QgfHwgJycpLnRvU3RyaW5nKCkudHJpbSgpLnRvVXBwZXJDYXNlKCkgfHwgJ0dFVCc7XG4gICAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gICAgbGV0IGNvb2tpZXM7XG4gICAgbGV0IGJvZHk7XG5cbiAgICBsZXQgaGFuZGxlciA9IHBhcnNlZC5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyBodHRwcyA6IGh0dHA7XG5cbiAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgJ2FjY2VwdC1lbmNvZGluZyc6ICdnemlwLGRlZmxhdGUnLFxuICAgICAgICAndXNlci1hZ2VudCc6ICdub2RlbWFpbGVyLycgKyBwYWNrYWdlRGF0YS52ZXJzaW9uXG4gICAgfTtcblxuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMuaGVhZGVycyB8fCB7fSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBoZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpLnRyaW0oKV0gPSBvcHRpb25zLmhlYWRlcnNba2V5XTtcbiAgICB9KTtcblxuICAgIGlmIChvcHRpb25zLnVzZXJBZ2VudCkge1xuICAgICAgICBoZWFkZXJzWyd1c2VyLWFnZW50J10gPSBvcHRpb25zLnVzZXJBZ2VudDtcbiAgICB9XG5cbiAgICBpZiAocGFyc2VkLmF1dGgpIHtcbiAgICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBCdWZmZXIuZnJvbShwYXJzZWQuYXV0aCkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIH1cblxuICAgIGlmICgoY29va2llcyA9IG9wdGlvbnMuY29va2llcy5nZXQodXJsKSkpIHtcbiAgICAgICAgaGVhZGVycy5jb29raWUgPSBjb29raWVzO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmJvZHkpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY29udGVudFR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IG9wdGlvbnMuY29udGVudFR5cGUgfHwgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYm9keS5waXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBpdCdzIGEgc3RyZWFtXG4gICAgICAgICAgICBoZWFkZXJzWydUcmFuc2Zlci1FbmNvZGluZyddID0gJ2NodW5rZWQnO1xuICAgICAgICAgICAgYm9keSA9IG9wdGlvbnMuYm9keTtcbiAgICAgICAgICAgIGJvZHkub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZXJyLnR5cGUgPSAnRkVUQ0gnO1xuICAgICAgICAgICAgICAgIGVyci5zb3VyY2VVcmwgPSB1cmw7XG4gICAgICAgICAgICAgICAgZmV0Y2hSZXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ib2R5IGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgYm9keSA9IG9wdGlvbnMuYm9keTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuYm9keSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQgY2FuIGZhaWwgb24gaW52YWxpZCBpbnB1dCAocGFydGlhbCBlbW9qaSBldGMuKVxuICAgICAgICAgICAgICAgICAgICBib2R5ID0gQnVmZmVyLmZyb20oXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zLmJvZHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBvcHRpb25zLmJvZHlba2V5XS50b1N0cmluZygpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcmJylcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChFKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgRS50eXBlID0gJ0ZFVENIJztcbiAgICAgICAgICAgICAgICAgICAgRS5zb3VyY2VVcmwgPSB1cmw7XG4gICAgICAgICAgICAgICAgICAgIGZldGNoUmVzLmVtaXQoJ2Vycm9yJywgRSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBCdWZmZXIuZnJvbShvcHRpb25zLmJvZHkudG9TdHJpbmcoKS50cmltKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IG9wdGlvbnMuY29udGVudFR5cGUgfHwgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG4gICAgICAgICAgICBoZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gYm9keS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgbWV0aG9kIGlzIG5vdCBwcm92aWRlZCwgdXNlIFBPU1QgaW5zdGVhZCBvZiBHRVRcbiAgICAgICAgbWV0aG9kID0gKG9wdGlvbnMubWV0aG9kIHx8ICcnKS50b1N0cmluZygpLnRyaW0oKS50b1VwcGVyQ2FzZSgpIHx8ICdQT1NUJztcbiAgICB9XG5cbiAgICBsZXQgcmVxO1xuICAgIGxldCByZXFPcHRpb25zID0ge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhvc3Q6IHBhcnNlZC5ob3N0bmFtZSxcbiAgICAgICAgcGF0aDogcGFyc2VkLnBhdGgsXG4gICAgICAgIHBvcnQ6IHBhcnNlZC5wb3J0ID8gcGFyc2VkLnBvcnQgOiBwYXJzZWQucHJvdG9jb2wgPT09ICdodHRwczonID8gNDQzIDogODAsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UsXG4gICAgICAgIGFnZW50OiBmYWxzZVxuICAgIH07XG5cbiAgICBpZiAob3B0aW9ucy50bHMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMob3B0aW9ucy50bHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIHJlcU9wdGlvbnNba2V5XSA9IG9wdGlvbnMudGxzW2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwYXJzZWQucHJvdG9jb2wgPT09ICdodHRwczonICYmIHBhcnNlZC5ob3N0bmFtZSAmJiBwYXJzZWQuaG9zdG5hbWUgIT09IHJlcU9wdGlvbnMuaG9zdCAmJiAhbmV0LmlzSVAocGFyc2VkLmhvc3RuYW1lKSAmJiAhcmVxT3B0aW9ucy5zZXJ2ZXJuYW1lKSB7XG4gICAgICAgIHJlcU9wdGlvbnMuc2VydmVybmFtZSA9IHBhcnNlZC5ob3N0bmFtZTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICByZXEgPSBoYW5kbGVyLnJlcXVlc3QocmVxT3B0aW9ucyk7XG4gICAgfSBjYXRjaCAoRSkge1xuICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgICBFLnR5cGUgPSAnRkVUQ0gnO1xuICAgICAgICAgICAgRS5zb3VyY2VVcmwgPSB1cmw7XG4gICAgICAgICAgICBmZXRjaFJlcy5lbWl0KCdlcnJvcicsIEUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZldGNoUmVzO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnRpbWVvdXQpIHtcbiAgICAgICAgcmVxLnNldFRpbWVvdXQob3B0aW9ucy50aW1lb3V0LCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgICAgIGxldCBlcnIgPSBuZXcgRXJyb3IoJ1JlcXVlc3QgVGltZW91dCcpO1xuICAgICAgICAgICAgZXJyLnR5cGUgPSAnRkVUQ0gnO1xuICAgICAgICAgICAgZXJyLnNvdXJjZVVybCA9IHVybDtcbiAgICAgICAgICAgIGZldGNoUmVzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVxLm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgZXJyLnR5cGUgPSAnRkVUQ0gnO1xuICAgICAgICBlcnIuc291cmNlVXJsID0gdXJsO1xuICAgICAgICBmZXRjaFJlcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfSk7XG5cbiAgICByZXEub24oJ3Jlc3BvbnNlJywgcmVzID0+IHtcbiAgICAgICAgbGV0IGluZmxhdGU7XG5cbiAgICAgICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHJlcy5oZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ10pIHtcbiAgICAgICAgICAgIGNhc2UgJ2d6aXAnOlxuICAgICAgICAgICAgY2FzZSAnZGVmbGF0ZSc6XG4gICAgICAgICAgICAgICAgaW5mbGF0ZSA9IHpsaWIuY3JlYXRlVW56aXAoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXMuaGVhZGVyc1snc2V0LWNvb2tpZSddKSB7XG4gICAgICAgICAgICBbXS5jb25jYXQocmVzLmhlYWRlcnNbJ3NldC1jb29raWUnXSB8fCBbXSkuZm9yRWFjaChjb29raWUgPT4ge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuY29va2llcy5zZXQoY29va2llLCB1cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XS5pbmNsdWRlcyhyZXMuc3RhdHVzQ29kZSkgJiYgcmVzLmhlYWRlcnMubG9jYXRpb24pIHtcbiAgICAgICAgICAgIC8vIHJlZGlyZWN0XG4gICAgICAgICAgICBvcHRpb25zLnJlZGlyZWN0cysrO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVkaXJlY3RzID4gb3B0aW9ucy5tYXhSZWRpcmVjdHMpIHtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgbGV0IGVyciA9IG5ldyBFcnJvcignTWF4aW11bSByZWRpcmVjdCBjb3VudCBleGNlZWRlZCcpO1xuICAgICAgICAgICAgICAgIGVyci50eXBlID0gJ0ZFVENIJztcbiAgICAgICAgICAgICAgICBlcnIuc291cmNlVXJsID0gdXJsO1xuICAgICAgICAgICAgICAgIGZldGNoUmVzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZWRpcmVjdCBkb2VzIG5vdCBpbmNsdWRlIFBPU1QgYm9keVxuICAgICAgICAgICAgb3B0aW9ucy5tZXRob2QgPSAnR0VUJztcbiAgICAgICAgICAgIG9wdGlvbnMuYm9keSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIG5tZmV0Y2godXJsbGliLnJlc29sdmUodXJsLCByZXMuaGVhZGVycy5sb2NhdGlvbiksIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZmV0Y2hSZXMuc3RhdHVzQ29kZSA9IHJlcy5zdGF0dXNDb2RlO1xuICAgICAgICBmZXRjaFJlcy5oZWFkZXJzID0gcmVzLmhlYWRlcnM7XG5cbiAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlID49IDMwMCAmJiAhb3B0aW9ucy5hbGxvd0Vycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBlcnIgPSBuZXcgRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUgJyArIHJlcy5zdGF0dXNDb2RlKTtcbiAgICAgICAgICAgIGVyci50eXBlID0gJ0ZFVENIJztcbiAgICAgICAgICAgIGVyci5zb3VyY2VVcmwgPSB1cmw7XG4gICAgICAgICAgICBmZXRjaFJlcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgICAgICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyLnR5cGUgPSAnRkVUQ0gnO1xuICAgICAgICAgICAgZXJyLnNvdXJjZVVybCA9IHVybDtcbiAgICAgICAgICAgIGZldGNoUmVzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgIHJlcS5hYm9ydCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaW5mbGF0ZSkge1xuICAgICAgICAgICAgcmVzLnBpcGUoaW5mbGF0ZSkucGlwZShmZXRjaFJlcyk7XG4gICAgICAgICAgICBpbmZsYXRlLm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVyci50eXBlID0gJ0ZFVENIJztcbiAgICAgICAgICAgICAgICBlcnIuc291cmNlVXJsID0gdXJsO1xuICAgICAgICAgICAgICAgIGZldGNoUmVzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzLnBpcGUoZmV0Y2hSZXMpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBzZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICBpZiAoYm9keSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJvZHkucGlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm9keS5waXBlKHJlcSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxLndyaXRlKGJvZHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlcnIudHlwZSA9ICdGRVRDSCc7XG4gICAgICAgICAgICAgICAgZXJyLnNvdXJjZVVybCA9IHVybDtcbiAgICAgICAgICAgICAgICBmZXRjaFJlcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlcS5lbmQoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBmZXRjaFJlcztcbn1cbiJdLCJuYW1lcyI6WyJodHRwIiwicmVxdWlyZSIsImh0dHBzIiwidXJsbGliIiwiemxpYiIsIlBhc3NUaHJvdWdoIiwiQ29va2llcyIsInBhY2thZ2VEYXRhIiwibmV0IiwiTUFYX1JFRElSRUNUUyIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1cmwiLCJvcHRpb25zIiwibm1mZXRjaCIsImZldGNoUmVzIiwiY29va2llcyIsInJlZGlyZWN0cyIsIm1heFJlZGlyZWN0cyIsImlzTmFOIiwiY29va2llIiwiY29uY2F0IiwiZm9yRWFjaCIsInNldCIsInBhcnNlZCIsInBhcnNlIiwibWV0aG9kIiwidG9TdHJpbmciLCJ0cmltIiwidG9VcHBlckNhc2UiLCJmaW5pc2hlZCIsImJvZHkiLCJoYW5kbGVyIiwicHJvdG9jb2wiLCJoZWFkZXJzIiwidmVyc2lvbiIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInVzZXJBZ2VudCIsImF1dGgiLCJBdXRob3JpemF0aW9uIiwiQnVmZmVyIiwiZnJvbSIsImdldCIsImNvbnRlbnRUeXBlIiwicGlwZSIsIm9uIiwiZXJyIiwidHlwZSIsInNvdXJjZVVybCIsImVtaXQiLCJtYXAiLCJ2YWx1ZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImpvaW4iLCJFIiwibGVuZ3RoIiwicmVxIiwicmVxT3B0aW9ucyIsImhvc3QiLCJob3N0bmFtZSIsInBhdGgiLCJwb3J0IiwicmVqZWN0VW5hdXRob3JpemVkIiwiYWdlbnQiLCJ0bHMiLCJpc0lQIiwic2VydmVybmFtZSIsInJlcXVlc3QiLCJzZXRJbW1lZGlhdGUiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImFib3J0IiwiRXJyb3IiLCJyZXMiLCJpbmZsYXRlIiwiY3JlYXRlVW56aXAiLCJpbmNsdWRlcyIsInN0YXR1c0NvZGUiLCJsb2NhdGlvbiIsInJlc29sdmUiLCJhbGxvd0Vycm9yUmVzcG9uc2UiLCJ3cml0ZSIsImVuZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/fetch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/json-transport/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/json-transport/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */ class JSONTransport {\n    constructor(options){\n        options = options || {};\n        this.options = options || {};\n        this.name = \"JSONTransport\";\n        this.version = packageData.version;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"json-transport\"\n        });\n    }\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId\n        }, \"Composing JSON structure of %s to <%s>\", messageId, recipients.join(\", \"));\n        setImmediate(()=>{\n            mail.normalize((err, data)=>{\n                if (err) {\n                    this.logger.error({\n                        err,\n                        tnx: \"send\",\n                        messageId\n                    }, \"Failed building JSON structure for %s. %s\", messageId, err.message);\n                    return done(err);\n                }\n                delete data.envelope;\n                delete data.normalizedHeaders;\n                return done(null, {\n                    envelope,\n                    messageId,\n                    message: this.options.skipEncoding ? data : JSON.stringify(data)\n                });\n            });\n        });\n    }\n}\nmodule.exports = JSONTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvanNvbi10cmFuc3BvcnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUM1QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUV2Qjs7Ozs7Q0FLQyxHQUNELE1BQU1FO0lBQ0ZDLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQkEsVUFBVUEsV0FBVyxDQUFDO1FBRXRCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFFM0IsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE9BQU8sR0FBR1AsWUFBWU8sT0FBTztRQUVsQyxJQUFJLENBQUNDLE1BQU0sR0FBR04sT0FBT08sU0FBUyxDQUFDLElBQUksQ0FBQ0osT0FBTyxFQUFFO1lBQ3pDSyxXQUFXLElBQUksQ0FBQ0wsT0FBTyxDQUFDSyxTQUFTLElBQUk7UUFDekM7SUFDSjtJQUVBOzs7OztLQUtDLEdBQ0RDLEtBQUtDLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ2IsNkNBQTZDO1FBQzdDRCxLQUFLRSxPQUFPLENBQUNDLE9BQU8sR0FBRztRQUV2QixJQUFJQyxXQUFXSixLQUFLSyxJQUFJLENBQUNELFFBQVEsSUFBSUosS0FBS0UsT0FBTyxDQUFDSSxXQUFXO1FBQzdELElBQUlDLFlBQVlQLEtBQUtFLE9BQU8sQ0FBQ0ssU0FBUztRQUV0QyxJQUFJQyxhQUFhLEVBQUUsQ0FBQ0MsTUFBTSxDQUFDTCxTQUFTTSxFQUFFLElBQUksRUFBRTtRQUM1QyxJQUFJRixXQUFXRyxNQUFNLEdBQUcsR0FBRztZQUN2QkgsV0FBV0ksSUFBSSxDQUFDLFlBQVlKLFdBQVdLLE1BQU0sQ0FBQyxHQUFHRixNQUFNLEdBQUc7UUFDOUQ7UUFDQSxJQUFJLENBQUNmLE1BQU0sQ0FBQ2tCLElBQUksQ0FDWjtZQUNJQyxLQUFLO1lBQ0xSO1FBQ0osR0FDQSwwQ0FDQUEsV0FDQUMsV0FBV1EsSUFBSSxDQUFDO1FBR3BCQyxhQUFhO1lBQ1RqQixLQUFLa0IsU0FBUyxDQUFDLENBQUNDLEtBQUtkO2dCQUNqQixJQUFJYyxLQUFLO29CQUNMLElBQUksQ0FBQ3ZCLE1BQU0sQ0FBQ3dCLEtBQUssQ0FDYjt3QkFDSUQ7d0JBQ0FKLEtBQUs7d0JBQ0xSO29CQUNKLEdBQ0EsNkNBQ0FBLFdBQ0FZLElBQUlqQixPQUFPO29CQUVmLE9BQU9ELEtBQUtrQjtnQkFDaEI7Z0JBRUEsT0FBT2QsS0FBS0QsUUFBUTtnQkFDcEIsT0FBT0MsS0FBS2dCLGlCQUFpQjtnQkFFN0IsT0FBT3BCLEtBQUssTUFBTTtvQkFDZEc7b0JBQ0FHO29CQUNBTCxTQUFTLElBQUksQ0FBQ1QsT0FBTyxDQUFDNkIsWUFBWSxHQUFHakIsT0FBT2tCLEtBQUtDLFNBQVMsQ0FBQ25CO2dCQUMvRDtZQUNKO1FBQ0o7SUFDSjtBQUNKO0FBRUFvQixPQUFPQyxPQUFPLEdBQUduQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub2RlbWFpbGVyL2xpYi9qc29uLXRyYW5zcG9ydC9pbmRleC5qcz82YzUwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFja2FnZURhdGEgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcbmNvbnN0IHNoYXJlZCA9IHJlcXVpcmUoJy4uL3NoYXJlZCcpO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIFRyYW5zcG9ydCBvYmplY3QgdG8gZ2VuZXJhdGUgSlNPTiBvdXRwdXRcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25hbCBjb25maWcgcGFyYW1ldGVyXG4gKi9cbmNsYXNzIEpTT05UcmFuc3BvcnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnSlNPTlRyYW5zcG9ydCc7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHBhY2thZ2VEYXRhLnZlcnNpb247XG5cbiAgICAgICAgdGhpcy5sb2dnZXIgPSBzaGFyZWQuZ2V0TG9nZ2VyKHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLm9wdGlvbnMuY29tcG9uZW50IHx8ICdqc29uLXRyYW5zcG9ydCdcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogPHA+Q29tcGlsZXMgYSBtYWlsY29tcG9zZXIgbWVzc2FnZSBhbmQgZm9yd2FyZHMgaXQgdG8gaGFuZGxlciB0aGF0IHNlbmRzIGl0LjwvcD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbWFpbE1lc3NhZ2UgTWFpbENvbXBvc2VyIG9iamVjdFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRvIHJ1biB3aGVuIHRoZSBzZW5kaW5nIGlzIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIHNlbmQobWFpbCwgZG9uZSkge1xuICAgICAgICAvLyBTZW5kbWFpbCBzdHJpcHMgdGhpcyBoZWFkZXIgbGluZSBieSBpdHNlbGZcbiAgICAgICAgbWFpbC5tZXNzYWdlLmtlZXBCY2MgPSB0cnVlO1xuXG4gICAgICAgIGxldCBlbnZlbG9wZSA9IG1haWwuZGF0YS5lbnZlbG9wZSB8fCBtYWlsLm1lc3NhZ2UuZ2V0RW52ZWxvcGUoKTtcbiAgICAgICAgbGV0IG1lc3NhZ2VJZCA9IG1haWwubWVzc2FnZS5tZXNzYWdlSWQoKTtcblxuICAgICAgICBsZXQgcmVjaXBpZW50cyA9IFtdLmNvbmNhdChlbnZlbG9wZS50byB8fCBbXSk7XG4gICAgICAgIGlmIChyZWNpcGllbnRzLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICAgIHJlY2lwaWVudHMucHVzaCgnLi4uYW5kICcgKyByZWNpcGllbnRzLnNwbGljZSgyKS5sZW5ndGggKyAnIG1vcmUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRueDogJ3NlbmQnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VJZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdDb21wb3NpbmcgSlNPTiBzdHJ1Y3R1cmUgb2YgJXMgdG8gPCVzPicsXG4gICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICByZWNpcGllbnRzLmpvaW4oJywgJylcbiAgICAgICAgKTtcblxuICAgICAgICBzZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICAgICAgbWFpbC5ub3JtYWxpemUoKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRueDogJ3NlbmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdGYWlsZWQgYnVpbGRpbmcgSlNPTiBzdHJ1Y3R1cmUgZm9yICVzLiAlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLmVudmVsb3BlO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLm5vcm1hbGl6ZWRIZWFkZXJzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUobnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBlbnZlbG9wZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm9wdGlvbnMuc2tpcEVuY29kaW5nID8gZGF0YSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT05UcmFuc3BvcnQ7XG4iXSwibmFtZXMiOlsicGFja2FnZURhdGEiLCJyZXF1aXJlIiwic2hhcmVkIiwiSlNPTlRyYW5zcG9ydCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm5hbWUiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiY29tcG9uZW50Iiwic2VuZCIsIm1haWwiLCJkb25lIiwibWVzc2FnZSIsImtlZXBCY2MiLCJlbnZlbG9wZSIsImRhdGEiLCJnZXRFbnZlbG9wZSIsIm1lc3NhZ2VJZCIsInJlY2lwaWVudHMiLCJjb25jYXQiLCJ0byIsImxlbmd0aCIsInB1c2giLCJzcGxpY2UiLCJpbmZvIiwidG54Iiwiam9pbiIsInNldEltbWVkaWF0ZSIsIm5vcm1hbGl6ZSIsImVyciIsImVycm9yIiwibm9ybWFsaXplZEhlYWRlcnMiLCJza2lwRW5jb2RpbmciLCJKU09OIiwic3RyaW5naWZ5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/json-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mail-composer/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-undefined: 0 */ \nconst MimeNode = __webpack_require__(/*! ../mime-node */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */ class MailComposer {\n    constructor(mail){\n        this.mail = mail || {};\n        this.message = false;\n    }\n    /**\n     * Builds MimeNode instance\n     */ compile() {\n        this._alternatives = this.getAlternatives();\n        this._htmlNode = this._alternatives.filter((alternative)=>/^text\\/html\\b/i.test(alternative.contentType)).pop();\n        this._attachments = this.getAttachments(!!this._htmlNode);\n        this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n        this._useAlternative = this._alternatives.length > 1;\n        this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1;\n        // Compose MIME tree\n        if (this.mail.raw) {\n            this.message = new MimeNode(\"message/rfc822\", {\n                newline: this.mail.newline\n            }).setRaw(this.mail.raw);\n        } else if (this._useMixed) {\n            this.message = this._createMixed();\n        } else if (this._useAlternative) {\n            this.message = this._createAlternative();\n        } else if (this._useRelated) {\n            this.message = this._createRelated();\n        } else {\n            this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {\n                contentType: \"text/plain\",\n                content: \"\"\n            });\n        }\n        // Add custom headers\n        if (this.mail.headers) {\n            this.message.addHeader(this.mail.headers);\n        }\n        // Add headers to the root node, always overrides custom headers\n        [\n            \"from\",\n            \"sender\",\n            \"to\",\n            \"cc\",\n            \"bcc\",\n            \"reply-to\",\n            \"in-reply-to\",\n            \"references\",\n            \"subject\",\n            \"message-id\",\n            \"date\"\n        ].forEach((header)=>{\n            let key = header.replace(/-(\\w)/g, (o, c)=>c.toUpperCase());\n            if (this.mail[key]) {\n                this.message.setHeader(header, this.mail[key]);\n            }\n        });\n        // Sets custom envelope\n        if (this.mail.envelope) {\n            this.message.setEnvelope(this.mail.envelope);\n        }\n        // ensure Message-Id value\n        this.message.messageId();\n        return this.message;\n    }\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */ getAttachments(findRelated) {\n        let icalEvent, eventObject;\n        let attachments = [].concat(this.mail.attachments || []).map((attachment, i)=>{\n            let data;\n            let isMessageNode = /^message\\//i.test(attachment.contentType);\n            if (/^data:/i.test(attachment.path || attachment.href)) {\n                attachment = this._processDataUrl(attachment);\n            }\n            let contentType = attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || \"bin\");\n            let isImage = /^image\\//i.test(contentType);\n            let contentDisposition = attachment.contentDisposition || (isMessageNode || isImage && attachment.cid ? \"inline\" : \"attachment\");\n            data = {\n                contentType,\n                contentDisposition,\n                contentTransferEncoding: \"contentTransferEncoding\" in attachment ? attachment.contentTransferEncoding : \"base64\"\n            };\n            if (attachment.filename) {\n                data.filename = attachment.filename;\n            } else if (!isMessageNode && attachment.filename !== false) {\n                data.filename = (attachment.path || attachment.href || \"\").split(\"/\").pop().split(\"?\").shift() || \"attachment-\" + (i + 1);\n                if (data.filename.indexOf(\".\") < 0) {\n                    data.filename += \".\" + mimeFuncs.detectExtension(data.contentType);\n                }\n            }\n            if (/^https?:\\/\\//i.test(attachment.path)) {\n                attachment.href = attachment.path;\n                attachment.path = undefined;\n            }\n            if (attachment.cid) {\n                data.cid = attachment.cid;\n            }\n            if (attachment.raw) {\n                data.raw = attachment.raw;\n            } else if (attachment.path) {\n                data.content = {\n                    path: attachment.path\n                };\n            } else if (attachment.href) {\n                data.content = {\n                    href: attachment.href,\n                    httpHeaders: attachment.httpHeaders\n                };\n            } else {\n                data.content = attachment.content || \"\";\n            }\n            if (attachment.encoding) {\n                data.encoding = attachment.encoding;\n            }\n            if (attachment.headers) {\n                data.headers = attachment.headers;\n            }\n            return data;\n        });\n        if (this.mail.icalEvent) {\n            if (typeof this.mail.icalEvent === \"object\" && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n            eventObject = {};\n            Object.keys(icalEvent).forEach((key)=>{\n                eventObject[key] = icalEvent[key];\n            });\n            eventObject.contentType = \"application/ics\";\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n            eventObject.filename = eventObject.filename || \"invite.ics\";\n            eventObject.headers[\"Content-Disposition\"] = \"attachment\";\n            eventObject.headers[\"Content-Transfer-Encoding\"] = \"base64\";\n        }\n        if (!findRelated) {\n            return {\n                attached: attachments.concat(eventObject || []),\n                related: []\n            };\n        } else {\n            return {\n                attached: attachments.filter((attachment)=>!attachment.cid).concat(eventObject || []),\n                related: attachments.filter((attachment)=>!!attachment.cid)\n            };\n        }\n    }\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */ getAlternatives() {\n        let alternatives = [], text, html, watchHtml, amp, icalEvent, eventObject;\n        if (this.mail.text) {\n            if (typeof this.mail.text === \"object\" && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n                text = this.mail.text;\n            } else {\n                text = {\n                    content: this.mail.text\n                };\n            }\n            text.contentType = \"text/plain; charset=utf-8\";\n        }\n        if (this.mail.watchHtml) {\n            if (typeof this.mail.watchHtml === \"object\" && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {\n                watchHtml = this.mail.watchHtml;\n            } else {\n                watchHtml = {\n                    content: this.mail.watchHtml\n                };\n            }\n            watchHtml.contentType = \"text/watch-html; charset=utf-8\";\n        }\n        if (this.mail.amp) {\n            if (typeof this.mail.amp === \"object\" && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n                amp = this.mail.amp;\n            } else {\n                amp = {\n                    content: this.mail.amp\n                };\n            }\n            amp.contentType = \"text/x-amp-html; charset=utf-8\";\n        }\n        // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n        if (this.mail.icalEvent) {\n            if (typeof this.mail.icalEvent === \"object\" && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n            eventObject = {};\n            Object.keys(icalEvent).forEach((key)=>{\n                eventObject[key] = icalEvent[key];\n            });\n            if (eventObject.content && typeof eventObject.content === \"object\") {\n                // we are going to have the same attachment twice, so mark this to be\n                // resolved just once\n                eventObject.content._resolve = true;\n            }\n            eventObject.filename = false;\n            eventObject.contentType = \"text/calendar; charset=utf-8; method=\" + (eventObject.method || \"PUBLISH\").toString().trim().toUpperCase();\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n        }\n        if (this.mail.html) {\n            if (typeof this.mail.html === \"object\" && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n                html = this.mail.html;\n            } else {\n                html = {\n                    content: this.mail.html\n                };\n            }\n            html.contentType = \"text/html; charset=utf-8\";\n        }\n        [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach((alternative)=>{\n            let data;\n            if (/^data:/i.test(alternative.path || alternative.href)) {\n                alternative = this._processDataUrl(alternative);\n            }\n            data = {\n                contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || \"txt\"),\n                contentTransferEncoding: alternative.contentTransferEncoding\n            };\n            if (alternative.filename) {\n                data.filename = alternative.filename;\n            }\n            if (/^https?:\\/\\//i.test(alternative.path)) {\n                alternative.href = alternative.path;\n                alternative.path = undefined;\n            }\n            if (alternative.raw) {\n                data.raw = alternative.raw;\n            } else if (alternative.path) {\n                data.content = {\n                    path: alternative.path\n                };\n            } else if (alternative.href) {\n                data.content = {\n                    href: alternative.href\n                };\n            } else {\n                data.content = alternative.content || \"\";\n            }\n            if (alternative.encoding) {\n                data.encoding = alternative.encoding;\n            }\n            if (alternative.headers) {\n                data.headers = alternative.headers;\n            }\n            alternatives.push(data);\n        });\n        return alternatives;\n    }\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */ _createMixed(parentNode) {\n        let node;\n        if (!parentNode) {\n            node = new MimeNode(\"multipart/mixed\", {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(\"multipart/mixed\", {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        if (this._useAlternative) {\n            this._createAlternative(node);\n        } else if (this._useRelated) {\n            this._createRelated(node);\n        }\n        [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach((element)=>{\n            // if the element is a html node from related subpart then ignore it\n            if (!this._useRelated || element !== this._htmlNode) {\n                this._createContentNode(node, element);\n            }\n        });\n        return node;\n    }\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */ _createAlternative(parentNode) {\n        let node;\n        if (!parentNode) {\n            node = new MimeNode(\"multipart/alternative\", {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(\"multipart/alternative\", {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        this._alternatives.forEach((alternative)=>{\n            if (this._useRelated && this._htmlNode === alternative) {\n                this._createRelated(node);\n            } else {\n                this._createContentNode(node, alternative);\n            }\n        });\n        return node;\n    }\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */ _createRelated(parentNode) {\n        let node;\n        if (!parentNode) {\n            node = new MimeNode('multipart/related; type=\"text/html\"', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        this._createContentNode(node, this._htmlNode);\n        this._attachments.related.forEach((alternative)=>this._createContentNode(node, alternative));\n        return node;\n    }\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */ _createContentNode(parentNode, element) {\n        element = element || {};\n        element.content = element.content || \"\";\n        let node;\n        let encoding = (element.encoding || \"utf8\").toString().toLowerCase().replace(/[-_\\s]/g, \"\");\n        if (!parentNode) {\n            node = new MimeNode(element.contentType, {\n                filename: element.filename,\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(element.contentType, {\n                filename: element.filename,\n                textEncoding: this.mail.textEncoding,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        // add custom headers\n        if (element.headers) {\n            node.addHeader(element.headers);\n        }\n        if (element.cid) {\n            node.setHeader(\"Content-Id\", \"<\" + element.cid.replace(/[<>]/g, \"\") + \">\");\n        }\n        if (element.contentTransferEncoding) {\n            node.setHeader(\"Content-Transfer-Encoding\", element.contentTransferEncoding);\n        } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n            node.setHeader(\"Content-Transfer-Encoding\", this.mail.encoding);\n        }\n        if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n            node.setHeader(\"Content-Disposition\", element.contentDisposition || (element.cid && /^image\\//i.test(element.contentType) ? \"inline\" : \"attachment\"));\n        }\n        if (typeof element.content === \"string\" && ![\n            \"utf8\",\n            \"usascii\",\n            \"ascii\"\n        ].includes(encoding)) {\n            element.content = Buffer.from(element.content, encoding);\n        }\n        // prefer pregenerated raw content\n        if (element.raw) {\n            node.setRaw(element.raw);\n        } else {\n            node.setContent(element.content);\n        }\n        return node;\n    }\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */ _processDataUrl(element) {\n        let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n        if (!parts) {\n            return element;\n        }\n        element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], \"base64\") : Buffer.from(decodeURIComponent(parts[2]));\n        if (\"path\" in element) {\n            element.path = false;\n        }\n        if (\"href\" in element) {\n            element.href = false;\n        }\n        parts[1].split(\";\").forEach((item)=>{\n            if (/^\\w+\\/[^/]+$/i.test(item)) {\n                element.contentType = element.contentType || item.toLowerCase();\n            }\n        });\n        return element;\n    }\n}\nmodule.exports = MailComposer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWFpbC1jb21wb3Nlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSwwQkFBMEIsR0FFMUI7QUFFQSxNQUFNQSxXQUFXQyxtQkFBT0EsQ0FBQztBQUN6QixNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUUxQjs7Ozs7Q0FLQyxHQUNELE1BQU1FO0lBQ0ZDLFlBQVlDLElBQUksQ0FBRTtRQUNkLElBQUksQ0FBQ0EsSUFBSSxHQUFHQSxRQUFRLENBQUM7UUFDckIsSUFBSSxDQUFDQyxPQUFPLEdBQUc7SUFDbkI7SUFFQTs7S0FFQyxHQUNEQyxVQUFVO1FBQ04sSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSSxDQUFDQyxlQUFlO1FBQ3pDLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUksQ0FBQ0YsYUFBYSxDQUFDRyxNQUFNLENBQUNDLENBQUFBLGNBQWUsaUJBQWlCQyxJQUFJLENBQUNELFlBQVlFLFdBQVcsR0FBR0MsR0FBRztRQUM3RyxJQUFJLENBQUNDLFlBQVksR0FBRyxJQUFJLENBQUNDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDUCxTQUFTO1FBRXhELElBQUksQ0FBQ1EsV0FBVyxHQUFHLENBQUMsQ0FBRSxLQUFJLENBQUNSLFNBQVMsSUFBSSxJQUFJLENBQUNNLFlBQVksQ0FBQ0csT0FBTyxDQUFDQyxNQUFNO1FBQ3hFLElBQUksQ0FBQ0MsZUFBZSxHQUFHLElBQUksQ0FBQ2IsYUFBYSxDQUFDWSxNQUFNLEdBQUc7UUFDbkQsSUFBSSxDQUFDRSxTQUFTLEdBQUcsSUFBSSxDQUFDTixZQUFZLENBQUNPLFFBQVEsQ0FBQ0gsTUFBTSxHQUFHLEtBQU0sSUFBSSxDQUFDWixhQUFhLENBQUNZLE1BQU0sSUFBSSxJQUFJLENBQUNKLFlBQVksQ0FBQ08sUUFBUSxDQUFDSCxNQUFNLEtBQUs7UUFFOUgsb0JBQW9CO1FBQ3BCLElBQUksSUFBSSxDQUFDZixJQUFJLENBQUNtQixHQUFHLEVBQUU7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QUFJb0MsUUFBUW5DLElBQUksRUFBRTBDLEtBQUssQ0FBQztRQUNqRCxJQUFJLENBQUNELE9BQU87WUFDUixPQUFPTjtRQUNYO1FBRUFBLFFBQVEzRCxPQUFPLEdBQUcsYUFBYXBCLElBQUksQ0FBQ3FGLEtBQUssQ0FBQyxFQUFFLElBQUlILE9BQU9DLElBQUksQ0FBQ0UsS0FBSyxDQUFDLEVBQUUsRUFBRSxZQUFZSCxPQUFPQyxJQUFJLENBQUNJLG1CQUFtQkYsS0FBSyxDQUFDLEVBQUU7UUFFekgsSUFBSSxVQUFVTixTQUFTO1lBQ25CQSxRQUFRcEMsSUFBSSxHQUFHO1FBQ25CO1FBRUEsSUFBSSxVQUFVb0MsU0FBUztZQUNuQkEsUUFBUW5DLElBQUksR0FBRztRQUNuQjtRQUVBeUMsS0FBSyxDQUFDLEVBQUUsQ0FBQ2pDLEtBQUssQ0FBQyxLQUFLN0IsT0FBTyxDQUFDaUUsQ0FBQUE7WUFDeEIsSUFBSSxnQkFBZ0J4RixJQUFJLENBQUN3RixPQUFPO2dCQUM1QlQsUUFBUTlFLFdBQVcsR0FBRzhFLFFBQVE5RSxXQUFXLElBQUl1RixLQUFLUixXQUFXO1lBQ2pFO1FBQ0o7UUFFQSxPQUFPRDtJQUNYO0FBQ0o7QUFFQVUsT0FBT0MsT0FBTyxHQUFHcEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWFpbC1jb21wb3Nlci9pbmRleC5qcz8zMDU4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludCBuby11bmRlZmluZWQ6IDAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBNaW1lTm9kZSA9IHJlcXVpcmUoJy4uL21pbWUtbm9kZScpO1xuY29uc3QgbWltZUZ1bmNzID0gcmVxdWlyZSgnLi4vbWltZS1mdW5jcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIG9iamVjdCBmb3IgY29tcG9zaW5nIGEgTWltZU5vZGUgaW5zdGFuY2Ugb3V0IGZyb20gdGhlIG1haWwgb3B0aW9uc1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IG1haWwgTWFpbCBvcHRpb25zXG4gKi9cbmNsYXNzIE1haWxDb21wb3NlciB7XG4gICAgY29uc3RydWN0b3IobWFpbCkge1xuICAgICAgICB0aGlzLm1haWwgPSBtYWlsIHx8IHt9O1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZHMgTWltZU5vZGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBjb21waWxlKCkge1xuICAgICAgICB0aGlzLl9hbHRlcm5hdGl2ZXMgPSB0aGlzLmdldEFsdGVybmF0aXZlcygpO1xuICAgICAgICB0aGlzLl9odG1sTm9kZSA9IHRoaXMuX2FsdGVybmF0aXZlcy5maWx0ZXIoYWx0ZXJuYXRpdmUgPT4gL150ZXh0XFwvaHRtbFxcYi9pLnRlc3QoYWx0ZXJuYXRpdmUuY29udGVudFR5cGUpKS5wb3AoKTtcbiAgICAgICAgdGhpcy5fYXR0YWNobWVudHMgPSB0aGlzLmdldEF0dGFjaG1lbnRzKCEhdGhpcy5faHRtbE5vZGUpO1xuXG4gICAgICAgIHRoaXMuX3VzZVJlbGF0ZWQgPSAhISh0aGlzLl9odG1sTm9kZSAmJiB0aGlzLl9hdHRhY2htZW50cy5yZWxhdGVkLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuX3VzZUFsdGVybmF0aXZlID0gdGhpcy5fYWx0ZXJuYXRpdmVzLmxlbmd0aCA+IDE7XG4gICAgICAgIHRoaXMuX3VzZU1peGVkID0gdGhpcy5fYXR0YWNobWVudHMuYXR0YWNoZWQubGVuZ3RoID4gMSB8fCAodGhpcy5fYWx0ZXJuYXRpdmVzLmxlbmd0aCAmJiB0aGlzLl9hdHRhY2htZW50cy5hdHRhY2hlZC5sZW5ndGggPT09IDEpO1xuXG4gICAgICAgIC8vIENvbXBvc2UgTUlNRSB0cmVlXG4gICAgICAgIGlmICh0aGlzLm1haWwucmF3KSB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBuZXcgTWltZU5vZGUoJ21lc3NhZ2UvcmZjODIyJywgeyBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZSB9KS5zZXRSYXcodGhpcy5tYWlsLnJhdyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdXNlTWl4ZWQpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuX2NyZWF0ZU1peGVkKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdXNlQWx0ZXJuYXRpdmUpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuX2NyZWF0ZUFsdGVybmF0aXZlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdXNlUmVsYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5fY3JlYXRlUmVsYXRlZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gdGhpcy5fY3JlYXRlQ29udGVudE5vZGUoXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgW11cbiAgICAgICAgICAgICAgICAgICAgLmNvbmNhdCh0aGlzLl9hbHRlcm5hdGl2ZXMgfHwgW10pXG4gICAgICAgICAgICAgICAgICAgIC5jb25jYXQodGhpcy5fYXR0YWNobWVudHMuYXR0YWNoZWQgfHwgW10pXG4gICAgICAgICAgICAgICAgICAgIC5zaGlmdCgpIHx8IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICd0ZXh0L3BsYWluJyxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJydcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGN1c3RvbSBoZWFkZXJzXG4gICAgICAgIGlmICh0aGlzLm1haWwuaGVhZGVycykge1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlLmFkZEhlYWRlcih0aGlzLm1haWwuaGVhZGVycyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcm9vdCBub2RlLCBhbHdheXMgb3ZlcnJpZGVzIGN1c3RvbSBoZWFkZXJzXG4gICAgICAgIFsnZnJvbScsICdzZW5kZXInLCAndG8nLCAnY2MnLCAnYmNjJywgJ3JlcGx5LXRvJywgJ2luLXJlcGx5LXRvJywgJ3JlZmVyZW5jZXMnLCAnc3ViamVjdCcsICdtZXNzYWdlLWlkJywgJ2RhdGUnXS5mb3JFYWNoKGhlYWRlciA9PiB7XG4gICAgICAgICAgICBsZXQga2V5ID0gaGVhZGVyLnJlcGxhY2UoLy0oXFx3KS9nLCAobywgYykgPT4gYy50b1VwcGVyQ2FzZSgpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1haWxba2V5XSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS5zZXRIZWFkZXIoaGVhZGVyLCB0aGlzLm1haWxba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNldHMgY3VzdG9tIGVudmVsb3BlXG4gICAgICAgIGlmICh0aGlzLm1haWwuZW52ZWxvcGUpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZS5zZXRFbnZlbG9wZSh0aGlzLm1haWwuZW52ZWxvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5zdXJlIE1lc3NhZ2UtSWQgdmFsdWVcbiAgICAgICAgdGhpcy5tZXNzYWdlLm1lc3NhZ2VJZCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdCBhbGwgYXR0YWNobWVudHMuIFJlc3VsdGluZyBhdHRhY2htZW50IG9iamVjdHMgY2FuIGJlIHVzZWQgYXMgaW5wdXQgZm9yIE1pbWVOb2RlIG5vZGVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpbmRSZWxhdGVkIElmIHRydWUgc2VwYXJhdGUgcmVsYXRlZCBhdHRhY2htZW50cyBmcm9tIGF0dGFjaGVkIG9uZXNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3Qgb2YgYXJyYXlzIChgcmVsYXRlZGAgYW5kIGBhdHRhY2hlZGApXG4gICAgICovXG4gICAgZ2V0QXR0YWNobWVudHMoZmluZFJlbGF0ZWQpIHtcbiAgICAgICAgbGV0IGljYWxFdmVudCwgZXZlbnRPYmplY3Q7XG4gICAgICAgIGxldCBhdHRhY2htZW50cyA9IFtdLmNvbmNhdCh0aGlzLm1haWwuYXR0YWNobWVudHMgfHwgW10pLm1hcCgoYXR0YWNobWVudCwgaSkgPT4ge1xuICAgICAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgICAgICBsZXQgaXNNZXNzYWdlTm9kZSA9IC9ebWVzc2FnZVxcLy9pLnRlc3QoYXR0YWNobWVudC5jb250ZW50VHlwZSk7XG5cbiAgICAgICAgICAgIGlmICgvXmRhdGE6L2kudGVzdChhdHRhY2htZW50LnBhdGggfHwgYXR0YWNobWVudC5ocmVmKSkge1xuICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQgPSB0aGlzLl9wcm9jZXNzRGF0YVVybChhdHRhY2htZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGNvbnRlbnRUeXBlID0gYXR0YWNobWVudC5jb250ZW50VHlwZSB8fCBtaW1lRnVuY3MuZGV0ZWN0TWltZVR5cGUoYXR0YWNobWVudC5maWxlbmFtZSB8fCBhdHRhY2htZW50LnBhdGggfHwgYXR0YWNobWVudC5ocmVmIHx8ICdiaW4nKTtcbiAgICAgICAgICAgIGxldCBpc0ltYWdlID0gL15pbWFnZVxcLy9pLnRlc3QoY29udGVudFR5cGUpO1xuICAgICAgICAgICAgbGV0IGNvbnRlbnREaXNwb3NpdGlvbiA9IGF0dGFjaG1lbnQuY29udGVudERpc3Bvc2l0aW9uIHx8IChpc01lc3NhZ2VOb2RlIHx8IChpc0ltYWdlICYmIGF0dGFjaG1lbnQuY2lkKSA/ICdpbmxpbmUnIDogJ2F0dGFjaG1lbnQnKTtcblxuICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgY29udGVudFRyYW5zZmVyRW5jb2Rpbmc6ICdjb250ZW50VHJhbnNmZXJFbmNvZGluZycgaW4gYXR0YWNobWVudCA/IGF0dGFjaG1lbnQuY29udGVudFRyYW5zZmVyRW5jb2RpbmcgOiAnYmFzZTY0J1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKGF0dGFjaG1lbnQuZmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmZpbGVuYW1lID0gYXR0YWNobWVudC5maWxlbmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzTWVzc2FnZU5vZGUgJiYgYXR0YWNobWVudC5maWxlbmFtZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmZpbGVuYW1lID0gKGF0dGFjaG1lbnQucGF0aCB8fCBhdHRhY2htZW50LmhyZWYgfHwgJycpLnNwbGl0KCcvJykucG9wKCkuc3BsaXQoJz8nKS5zaGlmdCgpIHx8ICdhdHRhY2htZW50LScgKyAoaSArIDEpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLmZpbGVuYW1lLmluZGV4T2YoJy4nKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5maWxlbmFtZSArPSAnLicgKyBtaW1lRnVuY3MuZGV0ZWN0RXh0ZW5zaW9uKGRhdGEuY29udGVudFR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKC9eaHR0cHM/OlxcL1xcLy9pLnRlc3QoYXR0YWNobWVudC5wYXRoKSkge1xuICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQuaHJlZiA9IGF0dGFjaG1lbnQucGF0aDtcbiAgICAgICAgICAgICAgICBhdHRhY2htZW50LnBhdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhdHRhY2htZW50LmNpZCkge1xuICAgICAgICAgICAgICAgIGRhdGEuY2lkID0gYXR0YWNobWVudC5jaWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhdHRhY2htZW50LnJhdykge1xuICAgICAgICAgICAgICAgIGRhdGEucmF3ID0gYXR0YWNobWVudC5yYXc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGF0dGFjaG1lbnQucGF0aCkge1xuICAgICAgICAgICAgICAgIGRhdGEuY29udGVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogYXR0YWNobWVudC5wYXRoXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0YWNobWVudC5ocmVmKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5jb250ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICBocmVmOiBhdHRhY2htZW50LmhyZWYsXG4gICAgICAgICAgICAgICAgICAgIGh0dHBIZWFkZXJzOiBhdHRhY2htZW50Lmh0dHBIZWFkZXJzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YS5jb250ZW50ID0gYXR0YWNobWVudC5jb250ZW50IHx8ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXR0YWNobWVudC5lbmNvZGluZykge1xuICAgICAgICAgICAgICAgIGRhdGEuZW5jb2RpbmcgPSBhdHRhY2htZW50LmVuY29kaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXR0YWNobWVudC5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5oZWFkZXJzID0gYXR0YWNobWVudC5oZWFkZXJzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMubWFpbC5pY2FsRXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5tYWlsLmljYWxFdmVudCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5tYWlsLmljYWxFdmVudC5jb250ZW50IHx8IHRoaXMubWFpbC5pY2FsRXZlbnQucGF0aCB8fCB0aGlzLm1haWwuaWNhbEV2ZW50LmhyZWYgfHwgdGhpcy5tYWlsLmljYWxFdmVudC5yYXcpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpY2FsRXZlbnQgPSB0aGlzLm1haWwuaWNhbEV2ZW50O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpY2FsRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMubWFpbC5pY2FsRXZlbnRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBldmVudE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoaWNhbEV2ZW50KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnRPYmplY3Rba2V5XSA9IGljYWxFdmVudFtrZXldO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGV2ZW50T2JqZWN0LmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL2ljcyc7XG4gICAgICAgICAgICBpZiAoIWV2ZW50T2JqZWN0LmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBldmVudE9iamVjdC5oZWFkZXJzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudE9iamVjdC5maWxlbmFtZSA9IGV2ZW50T2JqZWN0LmZpbGVuYW1lIHx8ICdpbnZpdGUuaWNzJztcbiAgICAgICAgICAgIGV2ZW50T2JqZWN0LmhlYWRlcnNbJ0NvbnRlbnQtRGlzcG9zaXRpb24nXSA9ICdhdHRhY2htZW50JztcbiAgICAgICAgICAgIGV2ZW50T2JqZWN0LmhlYWRlcnNbJ0NvbnRlbnQtVHJhbnNmZXItRW5jb2RpbmcnXSA9ICdiYXNlNjQnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmaW5kUmVsYXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhdHRhY2hlZDogYXR0YWNobWVudHMuY29uY2F0KGV2ZW50T2JqZWN0IHx8IFtdKSxcbiAgICAgICAgICAgICAgICByZWxhdGVkOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXR0YWNoZWQ6IGF0dGFjaG1lbnRzLmZpbHRlcihhdHRhY2htZW50ID0+ICFhdHRhY2htZW50LmNpZCkuY29uY2F0KGV2ZW50T2JqZWN0IHx8IFtdKSxcbiAgICAgICAgICAgICAgICByZWxhdGVkOiBhdHRhY2htZW50cy5maWx0ZXIoYXR0YWNobWVudCA9PiAhIWF0dGFjaG1lbnQuY2lkKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpc3QgYWx0ZXJuYXRpdmVzLiBSZXN1bHRpbmcgb2JqZWN0cyBjYW4gYmUgdXNlZCBhcyBpbnB1dCBmb3IgTWltZU5vZGUgbm9kZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gQW4gYXJyYXkgb2YgYWx0ZXJuYXRpdmUgZWxlbWVudHMuIEluY2x1ZGVzIHRoZSBgdGV4dGAgYW5kIGBodG1sYCB2YWx1ZXMgYXMgd2VsbFxuICAgICAqL1xuICAgIGdldEFsdGVybmF0aXZlcygpIHtcbiAgICAgICAgbGV0IGFsdGVybmF0aXZlcyA9IFtdLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIGh0bWwsXG4gICAgICAgICAgICB3YXRjaEh0bWwsXG4gICAgICAgICAgICBhbXAsXG4gICAgICAgICAgICBpY2FsRXZlbnQsXG4gICAgICAgICAgICBldmVudE9iamVjdDtcblxuICAgICAgICBpZiAodGhpcy5tYWlsLnRleHQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5tYWlsLnRleHQgPT09ICdvYmplY3QnICYmICh0aGlzLm1haWwudGV4dC5jb250ZW50IHx8IHRoaXMubWFpbC50ZXh0LnBhdGggfHwgdGhpcy5tYWlsLnRleHQuaHJlZiB8fCB0aGlzLm1haWwudGV4dC5yYXcpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMubWFpbC50ZXh0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0ge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLm1haWwudGV4dFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0LmNvbnRlbnRUeXBlID0gJ3RleHQvcGxhaW47IGNoYXJzZXQ9dXRmLTgnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWFpbC53YXRjaEh0bWwpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5tYWlsLndhdGNoSHRtbCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5tYWlsLndhdGNoSHRtbC5jb250ZW50IHx8IHRoaXMubWFpbC53YXRjaEh0bWwucGF0aCB8fCB0aGlzLm1haWwud2F0Y2hIdG1sLmhyZWYgfHwgdGhpcy5tYWlsLndhdGNoSHRtbC5yYXcpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB3YXRjaEh0bWwgPSB0aGlzLm1haWwud2F0Y2hIdG1sO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3YXRjaEh0bWwgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMubWFpbC53YXRjaEh0bWxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2F0Y2hIdG1sLmNvbnRlbnRUeXBlID0gJ3RleHQvd2F0Y2gtaHRtbDsgY2hhcnNldD11dGYtOCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5tYWlsLmFtcCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1haWwuYW1wID09PSAnb2JqZWN0JyAmJiAodGhpcy5tYWlsLmFtcC5jb250ZW50IHx8IHRoaXMubWFpbC5hbXAucGF0aCB8fCB0aGlzLm1haWwuYW1wLmhyZWYgfHwgdGhpcy5tYWlsLmFtcC5yYXcpKSB7XG4gICAgICAgICAgICAgICAgYW1wID0gdGhpcy5tYWlsLmFtcDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW1wID0ge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB0aGlzLm1haWwuYW1wXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFtcC5jb250ZW50VHlwZSA9ICd0ZXh0L3gtYW1wLWh0bWw7IGNoYXJzZXQ9dXRmLTgnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTkIhIHdoZW4gaW5jbHVkaW5nIGF0dGFjaG1lbnRzIHdpdGggYSBjYWxlbmRhciBhbHRlcm5hdGl2ZSB5b3UgbWlnaHQgZW5kIHVwIGluIGEgYmxhbmsgc2NyZWVuIG9uIHNvbWUgY2xpZW50c1xuICAgICAgICBpZiAodGhpcy5tYWlsLmljYWxFdmVudCkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLm1haWwuaWNhbEV2ZW50ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgICAgICh0aGlzLm1haWwuaWNhbEV2ZW50LmNvbnRlbnQgfHwgdGhpcy5tYWlsLmljYWxFdmVudC5wYXRoIHx8IHRoaXMubWFpbC5pY2FsRXZlbnQuaHJlZiB8fCB0aGlzLm1haWwuaWNhbEV2ZW50LnJhdylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGljYWxFdmVudCA9IHRoaXMubWFpbC5pY2FsRXZlbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGljYWxFdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogdGhpcy5tYWlsLmljYWxFdmVudFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50T2JqZWN0ID0ge307XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhpY2FsRXZlbnQpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBldmVudE9iamVjdFtrZXldID0gaWNhbEV2ZW50W2tleV07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGV2ZW50T2JqZWN0LmNvbnRlbnQgJiYgdHlwZW9mIGV2ZW50T2JqZWN0LmNvbnRlbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgYXJlIGdvaW5nIHRvIGhhdmUgdGhlIHNhbWUgYXR0YWNobWVudCB0d2ljZSwgc28gbWFyayB0aGlzIHRvIGJlXG4gICAgICAgICAgICAgICAgLy8gcmVzb2x2ZWQganVzdCBvbmNlXG4gICAgICAgICAgICAgICAgZXZlbnRPYmplY3QuY29udGVudC5fcmVzb2x2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50T2JqZWN0LmZpbGVuYW1lID0gZmFsc2U7XG4gICAgICAgICAgICBldmVudE9iamVjdC5jb250ZW50VHlwZSA9ICd0ZXh0L2NhbGVuZGFyOyBjaGFyc2V0PXV0Zi04OyBtZXRob2Q9JyArIChldmVudE9iamVjdC5tZXRob2QgfHwgJ1BVQkxJU0gnKS50b1N0cmluZygpLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKCFldmVudE9iamVjdC5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRPYmplY3QuaGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubWFpbC5odG1sKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMubWFpbC5odG1sID09PSAnb2JqZWN0JyAmJiAodGhpcy5tYWlsLmh0bWwuY29udGVudCB8fCB0aGlzLm1haWwuaHRtbC5wYXRoIHx8IHRoaXMubWFpbC5odG1sLmhyZWYgfHwgdGhpcy5tYWlsLmh0bWwucmF3KSkge1xuICAgICAgICAgICAgICAgIGh0bWwgPSB0aGlzLm1haWwuaHRtbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaHRtbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogdGhpcy5tYWlsLmh0bWxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbC5jb250ZW50VHlwZSA9ICd0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgnO1xuICAgICAgICB9XG5cbiAgICAgICAgW11cbiAgICAgICAgICAgIC5jb25jYXQodGV4dCB8fCBbXSlcbiAgICAgICAgICAgIC5jb25jYXQod2F0Y2hIdG1sIHx8IFtdKVxuICAgICAgICAgICAgLmNvbmNhdChhbXAgfHwgW10pXG4gICAgICAgICAgICAuY29uY2F0KGh0bWwgfHwgW10pXG4gICAgICAgICAgICAuY29uY2F0KGV2ZW50T2JqZWN0IHx8IFtdKVxuICAgICAgICAgICAgLmNvbmNhdCh0aGlzLm1haWwuYWx0ZXJuYXRpdmVzIHx8IFtdKVxuICAgICAgICAgICAgLmZvckVhY2goYWx0ZXJuYXRpdmUgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhO1xuXG4gICAgICAgICAgICAgICAgaWYgKC9eZGF0YTovaS50ZXN0KGFsdGVybmF0aXZlLnBhdGggfHwgYWx0ZXJuYXRpdmUuaHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRpdmUgPSB0aGlzLl9wcm9jZXNzRGF0YVVybChhbHRlcm5hdGl2ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IGFsdGVybmF0aXZlLmNvbnRlbnRUeXBlIHx8IG1pbWVGdW5jcy5kZXRlY3RNaW1lVHlwZShhbHRlcm5hdGl2ZS5maWxlbmFtZSB8fCBhbHRlcm5hdGl2ZS5wYXRoIHx8IGFsdGVybmF0aXZlLmhyZWYgfHwgJ3R4dCcpLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHJhbnNmZXJFbmNvZGluZzogYWx0ZXJuYXRpdmUuY29udGVudFRyYW5zZmVyRW5jb2RpbmdcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0aXZlLmZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZmlsZW5hbWUgPSBhbHRlcm5hdGl2ZS5maWxlbmFtZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoL15odHRwcz86XFwvXFwvL2kudGVzdChhbHRlcm5hdGl2ZS5wYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZS5ocmVmID0gYWx0ZXJuYXRpdmUucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRpdmUucGF0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYWx0ZXJuYXRpdmUucmF3KSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucmF3ID0gYWx0ZXJuYXRpdmUucmF3O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWx0ZXJuYXRpdmUucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbnRlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBhbHRlcm5hdGl2ZS5wYXRoXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbHRlcm5hdGl2ZS5ocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IGFsdGVybmF0aXZlLmhyZWZcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmNvbnRlbnQgPSBhbHRlcm5hdGl2ZS5jb250ZW50IHx8ICcnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhbHRlcm5hdGl2ZS5lbmNvZGluZykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmVuY29kaW5nID0gYWx0ZXJuYXRpdmUuZW5jb2Rpbmc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGFsdGVybmF0aXZlLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5oZWFkZXJzID0gYWx0ZXJuYXRpdmUuaGVhZGVycztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhbHRlcm5hdGl2ZXMucHVzaChkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhbHRlcm5hdGl2ZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIG11bHRpcGFydC9taXhlZCBub2RlLiBJdCBzaG91bGQgYWx3YXlzIGNvbnRhaW4gZGlmZmVyZW50IHR5cGUgb2YgZWxlbWVudHMgb24gdGhlIHNhbWUgbGV2ZWxcbiAgICAgKiBlZy4gdGV4dCArIGF0dGFjaG1lbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyZW50Tm9kZSBQYXJlbnQgZm9yIHRoaXMgbm90ZS4gSWYgaXQgZG9lcyBub3QgZXhpc3QsIGEgcm9vdCBub2RlIGlzIGNyZWF0ZWRcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBNaW1lTm9kZSBub2RlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBfY3JlYXRlTWl4ZWQocGFyZW50Tm9kZSkge1xuICAgICAgICBsZXQgbm9kZTtcblxuICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUgPSBuZXcgTWltZU5vZGUoJ211bHRpcGFydC9taXhlZCcsIHtcbiAgICAgICAgICAgICAgICBiYXNlQm91bmRhcnk6IHRoaXMubWFpbC5iYXNlQm91bmRhcnksXG4gICAgICAgICAgICAgICAgdGV4dEVuY29kaW5nOiB0aGlzLm1haWwudGV4dEVuY29kaW5nLFxuICAgICAgICAgICAgICAgIGJvdW5kYXJ5UHJlZml4OiB0aGlzLm1haWwuYm91bmRhcnlQcmVmaXgsXG4gICAgICAgICAgICAgICAgZGlzYWJsZVVybEFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVVcmxBY2Nlc3MsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUZpbGVBY2Nlc3M6IHRoaXMubWFpbC5kaXNhYmxlRmlsZUFjY2VzcyxcbiAgICAgICAgICAgICAgICBub3JtYWxpemVIZWFkZXJLZXk6IHRoaXMubWFpbC5ub3JtYWxpemVIZWFkZXJLZXksXG4gICAgICAgICAgICAgICAgbmV3bGluZTogdGhpcy5tYWlsLm5ld2xpbmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZSA9IHBhcmVudE5vZGUuY3JlYXRlQ2hpbGQoJ211bHRpcGFydC9taXhlZCcsIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlVXJsQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZVVybEFjY2VzcyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRmlsZUFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVGaWxlQWNjZXNzLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUhlYWRlcktleTogdGhpcy5tYWlsLm5vcm1hbGl6ZUhlYWRlcktleSxcbiAgICAgICAgICAgICAgICBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fdXNlQWx0ZXJuYXRpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUFsdGVybmF0aXZlKG5vZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3VzZVJlbGF0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVJlbGF0ZWQobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBbXVxuICAgICAgICAgICAgLmNvbmNhdCgoIXRoaXMuX3VzZUFsdGVybmF0aXZlICYmIHRoaXMuX2FsdGVybmF0aXZlcykgfHwgW10pXG4gICAgICAgICAgICAuY29uY2F0KHRoaXMuX2F0dGFjaG1lbnRzLmF0dGFjaGVkIHx8IFtdKVxuICAgICAgICAgICAgLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgaXMgYSBodG1sIG5vZGUgZnJvbSByZWxhdGVkIHN1YnBhcnQgdGhlbiBpZ25vcmUgaXRcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3VzZVJlbGF0ZWQgfHwgZWxlbWVudCAhPT0gdGhpcy5faHRtbE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQ29udGVudE5vZGUobm9kZSwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGRzIG11bHRpcGFydC9hbHRlcm5hdGl2ZSBub2RlLiBJdCBzaG91bGQgYWx3YXlzIGNvbnRhaW4gc2FtZSB0eXBlIG9mIGVsZW1lbnRzIG9uIHRoZSBzYW1lIGxldmVsXG4gICAgICogZWcuIHRleHQgKyBodG1sIHZpZXcgb2YgdGhlIHNhbWUgZGF0YVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmVudE5vZGUgUGFyZW50IGZvciB0aGlzIG5vdGUuIElmIGl0IGRvZXMgbm90IGV4aXN0LCBhIHJvb3Qgbm9kZSBpcyBjcmVhdGVkXG4gICAgICogQHJldHVybnMge09iamVjdH0gTWltZU5vZGUgbm9kZSBlbGVtZW50XG4gICAgICovXG4gICAgX2NyZWF0ZUFsdGVybmF0aXZlKHBhcmVudE5vZGUpIHtcbiAgICAgICAgbGV0IG5vZGU7XG5cbiAgICAgICAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBub2RlID0gbmV3IE1pbWVOb2RlKCdtdWx0aXBhcnQvYWx0ZXJuYXRpdmUnLCB7XG4gICAgICAgICAgICAgICAgYmFzZUJvdW5kYXJ5OiB0aGlzLm1haWwuYmFzZUJvdW5kYXJ5LFxuICAgICAgICAgICAgICAgIHRleHRFbmNvZGluZzogdGhpcy5tYWlsLnRleHRFbmNvZGluZyxcbiAgICAgICAgICAgICAgICBib3VuZGFyeVByZWZpeDogdGhpcy5tYWlsLmJvdW5kYXJ5UHJlZml4LFxuICAgICAgICAgICAgICAgIGRpc2FibGVVcmxBY2Nlc3M6IHRoaXMubWFpbC5kaXNhYmxlVXJsQWNjZXNzLFxuICAgICAgICAgICAgICAgIGRpc2FibGVGaWxlQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZUZpbGVBY2Nlc3MsXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplSGVhZGVyS2V5OiB0aGlzLm1haWwubm9ybWFsaXplSGVhZGVyS2V5LFxuICAgICAgICAgICAgICAgIG5ld2xpbmU6IHRoaXMubWFpbC5uZXdsaW5lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUgPSBwYXJlbnROb2RlLmNyZWF0ZUNoaWxkKCdtdWx0aXBhcnQvYWx0ZXJuYXRpdmUnLCB7XG4gICAgICAgICAgICAgICAgZGlzYWJsZVVybEFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVVcmxBY2Nlc3MsXG4gICAgICAgICAgICAgICAgZGlzYWJsZUZpbGVBY2Nlc3M6IHRoaXMubWFpbC5kaXNhYmxlRmlsZUFjY2VzcyxcbiAgICAgICAgICAgICAgICBub3JtYWxpemVIZWFkZXJLZXk6IHRoaXMubWFpbC5ub3JtYWxpemVIZWFkZXJLZXksXG4gICAgICAgICAgICAgICAgbmV3bGluZTogdGhpcy5tYWlsLm5ld2xpbmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYWx0ZXJuYXRpdmVzLmZvckVhY2goYWx0ZXJuYXRpdmUgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3VzZVJlbGF0ZWQgJiYgdGhpcy5faHRtbE5vZGUgPT09IGFsdGVybmF0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlUmVsYXRlZChub2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQ29udGVudE5vZGUobm9kZSwgYWx0ZXJuYXRpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZHMgbXVsdGlwYXJ0L3JlbGF0ZWQgbm9kZS4gSXQgc2hvdWxkIGFsd2F5cyBjb250YWluIGh0bWwgbm9kZSB3aXRoIHJlbGF0ZWQgYXR0YWNobWVudHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJlbnROb2RlIFBhcmVudCBmb3IgdGhpcyBub3RlLiBJZiBpdCBkb2VzIG5vdCBleGlzdCwgYSByb290IG5vZGUgaXMgY3JlYXRlZFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IE1pbWVOb2RlIG5vZGUgZWxlbWVudFxuICAgICAqL1xuICAgIF9jcmVhdGVSZWxhdGVkKHBhcmVudE5vZGUpIHtcbiAgICAgICAgbGV0IG5vZGU7XG5cbiAgICAgICAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBub2RlID0gbmV3IE1pbWVOb2RlKCdtdWx0aXBhcnQvcmVsYXRlZDsgdHlwZT1cInRleHQvaHRtbFwiJywge1xuICAgICAgICAgICAgICAgIGJhc2VCb3VuZGFyeTogdGhpcy5tYWlsLmJhc2VCb3VuZGFyeSxcbiAgICAgICAgICAgICAgICB0ZXh0RW5jb2Rpbmc6IHRoaXMubWFpbC50ZXh0RW5jb2RpbmcsXG4gICAgICAgICAgICAgICAgYm91bmRhcnlQcmVmaXg6IHRoaXMubWFpbC5ib3VuZGFyeVByZWZpeCxcbiAgICAgICAgICAgICAgICBkaXNhYmxlVXJsQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZVVybEFjY2VzcyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRmlsZUFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVGaWxlQWNjZXNzLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUhlYWRlcktleTogdGhpcy5tYWlsLm5vcm1hbGl6ZUhlYWRlcktleSxcbiAgICAgICAgICAgICAgICBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gcGFyZW50Tm9kZS5jcmVhdGVDaGlsZCgnbXVsdGlwYXJ0L3JlbGF0ZWQ7IHR5cGU9XCJ0ZXh0L2h0bWxcIicsIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlVXJsQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZVVybEFjY2VzcyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRmlsZUFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVGaWxlQWNjZXNzLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUhlYWRlcktleTogdGhpcy5tYWlsLm5vcm1hbGl6ZUhlYWRlcktleSxcbiAgICAgICAgICAgICAgICBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jcmVhdGVDb250ZW50Tm9kZShub2RlLCB0aGlzLl9odG1sTm9kZSk7XG5cbiAgICAgICAgdGhpcy5fYXR0YWNobWVudHMucmVsYXRlZC5mb3JFYWNoKGFsdGVybmF0aXZlID0+IHRoaXMuX2NyZWF0ZUNvbnRlbnROb2RlKG5vZGUsIGFsdGVybmF0aXZlKSk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJlZ3VsYXIgbm9kZSB3aXRoIGNvbnRlbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyZW50Tm9kZSBQYXJlbnQgZm9yIHRoaXMgbm90ZS4gSWYgaXQgZG9lcyBub3QgZXhpc3QsIGEgcm9vdCBub2RlIGlzIGNyZWF0ZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCBOb2RlIGRhdGFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBNaW1lTm9kZSBub2RlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBfY3JlYXRlQ29udGVudE5vZGUocGFyZW50Tm9kZSwgZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudCB8fCB7fTtcbiAgICAgICAgZWxlbWVudC5jb250ZW50ID0gZWxlbWVudC5jb250ZW50IHx8ICcnO1xuXG4gICAgICAgIGxldCBub2RlO1xuICAgICAgICBsZXQgZW5jb2RpbmcgPSAoZWxlbWVudC5lbmNvZGluZyB8fCAndXRmOCcpXG4gICAgICAgICAgICAudG9TdHJpbmcoKVxuICAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bLV9cXHNdL2csICcnKTtcblxuICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUgPSBuZXcgTWltZU5vZGUoZWxlbWVudC5jb250ZW50VHlwZSwge1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBlbGVtZW50LmZpbGVuYW1lLFxuICAgICAgICAgICAgICAgIGJhc2VCb3VuZGFyeTogdGhpcy5tYWlsLmJhc2VCb3VuZGFyeSxcbiAgICAgICAgICAgICAgICB0ZXh0RW5jb2Rpbmc6IHRoaXMubWFpbC50ZXh0RW5jb2RpbmcsXG4gICAgICAgICAgICAgICAgYm91bmRhcnlQcmVmaXg6IHRoaXMubWFpbC5ib3VuZGFyeVByZWZpeCxcbiAgICAgICAgICAgICAgICBkaXNhYmxlVXJsQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZVVybEFjY2VzcyxcbiAgICAgICAgICAgICAgICBkaXNhYmxlRmlsZUFjY2VzczogdGhpcy5tYWlsLmRpc2FibGVGaWxlQWNjZXNzLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUhlYWRlcktleTogdGhpcy5tYWlsLm5vcm1hbGl6ZUhlYWRlcktleSxcbiAgICAgICAgICAgICAgICBuZXdsaW5lOiB0aGlzLm1haWwubmV3bGluZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gcGFyZW50Tm9kZS5jcmVhdGVDaGlsZChlbGVtZW50LmNvbnRlbnRUeXBlLCB7XG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IGVsZW1lbnQuZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgdGV4dEVuY29kaW5nOiB0aGlzLm1haWwudGV4dEVuY29kaW5nLFxuICAgICAgICAgICAgICAgIGRpc2FibGVVcmxBY2Nlc3M6IHRoaXMubWFpbC5kaXNhYmxlVXJsQWNjZXNzLFxuICAgICAgICAgICAgICAgIGRpc2FibGVGaWxlQWNjZXNzOiB0aGlzLm1haWwuZGlzYWJsZUZpbGVBY2Nlc3MsXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplSGVhZGVyS2V5OiB0aGlzLm1haWwubm9ybWFsaXplSGVhZGVyS2V5LFxuICAgICAgICAgICAgICAgIG5ld2xpbmU6IHRoaXMubWFpbC5uZXdsaW5lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCBjdXN0b20gaGVhZGVyc1xuICAgICAgICBpZiAoZWxlbWVudC5oZWFkZXJzKSB7XG4gICAgICAgICAgICBub2RlLmFkZEhlYWRlcihlbGVtZW50LmhlYWRlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1lbnQuY2lkKSB7XG4gICAgICAgICAgICBub2RlLnNldEhlYWRlcignQ29udGVudC1JZCcsICc8JyArIGVsZW1lbnQuY2lkLnJlcGxhY2UoL1s8Pl0vZywgJycpICsgJz4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGVtZW50LmNvbnRlbnRUcmFuc2ZlckVuY29kaW5nKSB7XG4gICAgICAgICAgICBub2RlLnNldEhlYWRlcignQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZycsIGVsZW1lbnQuY29udGVudFRyYW5zZmVyRW5jb2RpbmcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWFpbC5lbmNvZGluZyAmJiAvXnRleHRcXC8vaS50ZXN0KGVsZW1lbnQuY29udGVudFR5cGUpKSB7XG4gICAgICAgICAgICBub2RlLnNldEhlYWRlcignQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZycsIHRoaXMubWFpbC5lbmNvZGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIS9edGV4dFxcLy9pLnRlc3QoZWxlbWVudC5jb250ZW50VHlwZSkgfHwgZWxlbWVudC5jb250ZW50RGlzcG9zaXRpb24pIHtcbiAgICAgICAgICAgIG5vZGUuc2V0SGVhZGVyKFxuICAgICAgICAgICAgICAgICdDb250ZW50LURpc3Bvc2l0aW9uJyxcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNvbnRlbnREaXNwb3NpdGlvbiB8fCAoZWxlbWVudC5jaWQgJiYgL15pbWFnZVxcLy9pLnRlc3QoZWxlbWVudC5jb250ZW50VHlwZSkgPyAnaW5saW5lJyA6ICdhdHRhY2htZW50JylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQuY29udGVudCA9PT0gJ3N0cmluZycgJiYgIVsndXRmOCcsICd1c2FzY2lpJywgJ2FzY2lpJ10uaW5jbHVkZXMoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNvbnRlbnQgPSBCdWZmZXIuZnJvbShlbGVtZW50LmNvbnRlbnQsIGVuY29kaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByZWZlciBwcmVnZW5lcmF0ZWQgcmF3IGNvbnRlbnRcbiAgICAgICAgaWYgKGVsZW1lbnQucmF3KSB7XG4gICAgICAgICAgICBub2RlLnNldFJhdyhlbGVtZW50LnJhdyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLnNldENvbnRlbnQoZWxlbWVudC5jb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBkYXRhIHVyaSBhbmQgY29udmVydHMgaXQgdG8gYSBCdWZmZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IENvbnRlbnQgZWxlbWVudFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gUGFyc2VkIGVsZW1lbnRcbiAgICAgKi9cbiAgICBfcHJvY2Vzc0RhdGFVcmwoZWxlbWVudCkge1xuICAgICAgICBsZXQgcGFydHMgPSAoZWxlbWVudC5wYXRoIHx8IGVsZW1lbnQuaHJlZikubWF0Y2goL15kYXRhOigoPzpbXjtdKjspKig/OlteLF0qKSksKC4qKSQvaSk7XG4gICAgICAgIGlmICghcGFydHMpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5jb250ZW50ID0gL1xcYmJhc2U2NCQvaS50ZXN0KHBhcnRzWzFdKSA/IEJ1ZmZlci5mcm9tKHBhcnRzWzJdLCAnYmFzZTY0JykgOiBCdWZmZXIuZnJvbShkZWNvZGVVUklDb21wb25lbnQocGFydHNbMl0pKTtcblxuICAgICAgICBpZiAoJ3BhdGgnIGluIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucGF0aCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdocmVmJyBpbiBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmhyZWYgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnRzWzFdLnNwbGl0KCc7JykuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGlmICgvXlxcdytcXC9bXi9dKyQvaS50ZXN0KGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jb250ZW50VHlwZSA9IGVsZW1lbnQuY29udGVudFR5cGUgfHwgaXRlbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFpbENvbXBvc2VyO1xuIl0sIm5hbWVzIjpbIk1pbWVOb2RlIiwicmVxdWlyZSIsIm1pbWVGdW5jcyIsIk1haWxDb21wb3NlciIsImNvbnN0cnVjdG9yIiwibWFpbCIsIm1lc3NhZ2UiLCJjb21waWxlIiwiX2FsdGVybmF0aXZlcyIsImdldEFsdGVybmF0aXZlcyIsIl9odG1sTm9kZSIsImZpbHRlciIsImFsdGVybmF0aXZlIiwidGVzdCIsImNvbnRlbnRUeXBlIiwicG9wIiwiX2F0dGFjaG1lbnRzIiwiZ2V0QXR0YWNobWVudHMiLCJfdXNlUmVsYXRlZCIsInJlbGF0ZWQiLCJsZW5ndGgiLCJfdXNlQWx0ZXJuYXRpdmUiLCJfdXNlTWl4ZWQiLCJhdHRhY2hlZCIsInJhdyIsIm5ld2xpbmUiLCJzZXRSYXciLCJfY3JlYXRlTWl4ZWQiLCJfY3JlYXRlQWx0ZXJuYXRpdmUiLCJfY3JlYXRlUmVsYXRlZCIsIl9jcmVhdGVDb250ZW50Tm9kZSIsImNvbmNhdCIsInNoaWZ0IiwiY29udGVudCIsImhlYWRlcnMiLCJhZGRIZWFkZXIiLCJmb3JFYWNoIiwiaGVhZGVyIiwia2V5IiwicmVwbGFjZSIsIm8iLCJjIiwidG9VcHBlckNhc2UiLCJzZXRIZWFkZXIiLCJlbnZlbG9wZSIsInNldEVudmVsb3BlIiwibWVzc2FnZUlkIiwiZmluZFJlbGF0ZWQiLCJpY2FsRXZlbnQiLCJldmVudE9iamVjdCIsImF0dGFjaG1lbnRzIiwibWFwIiwiYXR0YWNobWVudCIsImkiLCJkYXRhIiwiaXNNZXNzYWdlTm9kZSIsInBhdGgiLCJocmVmIiwiX3Byb2Nlc3NEYXRhVXJsIiwiZGV0ZWN0TWltZVR5cGUiLCJmaWxlbmFtZSIsImlzSW1hZ2UiLCJjb250ZW50RGlzcG9zaXRpb24iLCJjaWQiLCJjb250ZW50VHJhbnNmZXJFbmNvZGluZyIsInNwbGl0IiwiaW5kZXhPZiIsImRldGVjdEV4dGVuc2lvbiIsInVuZGVmaW5lZCIsImh0dHBIZWFkZXJzIiwiZW5jb2RpbmciLCJPYmplY3QiLCJrZXlzIiwiYWx0ZXJuYXRpdmVzIiwidGV4dCIsImh0bWwiLCJ3YXRjaEh0bWwiLCJhbXAiLCJfcmVzb2x2ZSIsIm1ldGhvZCIsInRvU3RyaW5nIiwidHJpbSIsInB1c2giLCJwYXJlbnROb2RlIiwibm9kZSIsImJhc2VCb3VuZGFyeSIsInRleHRFbmNvZGluZyIsImJvdW5kYXJ5UHJlZml4IiwiZGlzYWJsZVVybEFjY2VzcyIsImRpc2FibGVGaWxlQWNjZXNzIiwibm9ybWFsaXplSGVhZGVyS2V5IiwiY3JlYXRlQ2hpbGQiLCJlbGVtZW50IiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsIkJ1ZmZlciIsImZyb20iLCJzZXRDb250ZW50IiwicGFydHMiLCJtYXRjaCIsImRlY29kZVVSSUNvbXBvbmVudCIsIml0ZW0iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mailer/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/mailer/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst mimeTypes = __webpack_require__(/*! ../mime-funcs/mime-types */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\");\nconst MailComposer = __webpack_require__(/*! ../mail-composer */ \"(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js\");\nconst DKIM = __webpack_require__(/*! ../dkim */ \"(rsc)/./node_modules/nodemailer/lib/dkim/index.js\");\nconst httpProxyClient = __webpack_require__(/*! ../smtp-connection/http-proxy-client */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst MailMessage = __webpack_require__(/*! ./mail-message */ \"(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Creates an object for exposing the Mail API\n *\n * @constructor\n * @param {Object} transporter Transport object instance to pass the mails to\n */ class Mail extends EventEmitter {\n    constructor(transporter, options, defaults){\n        super();\n        this.options = options || {};\n        this._defaults = defaults || {};\n        this._defaultPlugins = {\n            compile: [\n                (...args)=>this._convertDataImages(...args)\n            ],\n            stream: []\n        };\n        this._userPlugins = {\n            compile: [],\n            stream: []\n        };\n        this.meta = new Map();\n        this.dkim = this.options.dkim ? new DKIM(this.options.dkim) : false;\n        this.transporter = transporter;\n        this.transporter.mailer = this;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"mail\"\n        });\n        this.logger.debug({\n            tnx: \"create\"\n        }, \"Creating transport: %s\", this.getVersionString());\n        // setup emit handlers for the transporter\n        if (typeof this.transporter.on === \"function\") {\n            // deprecated log interface\n            this.transporter.on(\"log\", (log)=>{\n                this.logger.debug({\n                    tnx: \"transport\"\n                }, \"%s: %s\", log.type, log.message);\n            });\n            // transporter errors\n            this.transporter.on(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"transport\"\n                }, \"Transport Error: %s\", err.message);\n                this.emit(\"error\", err);\n            });\n            // indicates if the sender has became idle\n            this.transporter.on(\"idle\", (...args)=>{\n                this.emit(\"idle\", ...args);\n            });\n        }\n        /**\n         * Optional methods passed to the underlying transport object\n         */ [\n            \"close\",\n            \"isIdle\",\n            \"verify\"\n        ].forEach((method)=>{\n            this[method] = (...args)=>{\n                if (typeof this.transporter[method] === \"function\") {\n                    if (method === \"verify\" && typeof this.getSocket === \"function\") {\n                        this.transporter.getSocket = this.getSocket;\n                        this.getSocket = false;\n                    }\n                    return this.transporter[method](...args);\n                } else {\n                    this.logger.warn({\n                        tnx: \"transport\",\n                        methodName: method\n                    }, \"Non existing method %s called for transport\", method);\n                    return false;\n                }\n            };\n        });\n        // setup proxy handling\n        if (this.options.proxy && typeof this.options.proxy === \"string\") {\n            this.setupProxy(this.options.proxy);\n        }\n    }\n    use(step, plugin) {\n        step = (step || \"\").toString();\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            this._userPlugins[step] = [\n                plugin\n            ];\n        } else {\n            this._userPlugins[step].push(plugin);\n        }\n        return this;\n    }\n    /**\n     * Sends an email using the preselected transport object\n     *\n     * @param {Object} data E-data description\n     * @param {Function?} callback Callback to run once the sending succeeded or failed\n     */ sendMail(data, callback = null) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        if (typeof this.getSocket === \"function\") {\n            this.transporter.getSocket = this.getSocket;\n            this.getSocket = false;\n        }\n        let mail = new MailMessage(this, data);\n        this.logger.debug({\n            tnx: \"transport\",\n            name: this.transporter.name,\n            version: this.transporter.version,\n            action: \"send\"\n        }, \"Sending mail using %s/%s\", this.transporter.name, this.transporter.version);\n        this._processPlugins(\"compile\", mail, (err)=>{\n            if (err) {\n                this.logger.error({\n                    err,\n                    tnx: \"plugin\",\n                    action: \"compile\"\n                }, \"PluginCompile Error: %s\", err.message);\n                return callback(err);\n            }\n            mail.message = new MailComposer(mail.data).compile();\n            mail.setMailerHeader();\n            mail.setPriorityHeaders();\n            mail.setListHeaders();\n            this._processPlugins(\"stream\", mail, (err)=>{\n                if (err) {\n                    this.logger.error({\n                        err,\n                        tnx: \"plugin\",\n                        action: \"stream\"\n                    }, \"PluginStream Error: %s\", err.message);\n                    return callback(err);\n                }\n                if (mail.data.dkim || this.dkim) {\n                    mail.message.processFunc((input)=>{\n                        let dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : this.dkim;\n                        this.logger.debug({\n                            tnx: \"DKIM\",\n                            messageId: mail.message.messageId(),\n                            dkimDomains: dkim.keys.map((key)=>key.keySelector + \".\" + key.domainName).join(\", \")\n                        }, \"Signing outgoing message with %s keys\", dkim.keys.length);\n                        return dkim.sign(input, mail.data._dkim);\n                    });\n                }\n                this.transporter.send(mail, (...args)=>{\n                    if (args[0]) {\n                        this.logger.error({\n                            err: args[0],\n                            tnx: \"transport\",\n                            action: \"send\"\n                        }, \"Send Error: %s\", args[0].message);\n                    }\n                    callback(...args);\n                });\n            });\n        });\n        return promise;\n    }\n    getVersionString() {\n        return util.format(\"%s (%s; +%s; %s/%s)\", packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);\n    }\n    _processPlugins(step, mail, callback) {\n        step = (step || \"\").toString();\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            return callback();\n        }\n        let userPlugins = this._userPlugins[step] || [];\n        let defaultPlugins = this._defaultPlugins[step] || [];\n        if (userPlugins.length) {\n            this.logger.debug({\n                tnx: \"transaction\",\n                pluginCount: userPlugins.length,\n                step\n            }, \"Using %s plugins for %s\", userPlugins.length, step);\n        }\n        if (userPlugins.length + defaultPlugins.length === 0) {\n            return callback();\n        }\n        let pos = 0;\n        let block = \"default\";\n        let processPlugins = ()=>{\n            let curplugins = block === \"default\" ? defaultPlugins : userPlugins;\n            if (pos >= curplugins.length) {\n                if (block === \"default\" && userPlugins.length) {\n                    block = \"user\";\n                    pos = 0;\n                    curplugins = userPlugins;\n                } else {\n                    return callback();\n                }\n            }\n            let plugin = curplugins[pos++];\n            plugin(mail, (err)=>{\n                if (err) {\n                    return callback(err);\n                }\n                processPlugins();\n            });\n        };\n        processPlugins();\n    }\n    /**\n     * Sets up proxy handler for a Nodemailer object\n     *\n     * @param {String} proxyUrl Proxy configuration url\n     */ setupProxy(proxyUrl) {\n        let proxy = urllib.parse(proxyUrl);\n        // setup socket handler for the mailer object\n        this.getSocket = (options, callback)=>{\n            let protocol = proxy.protocol.replace(/:$/, \"\").toLowerCase();\n            if (this.meta.has(\"proxy_handler_\" + protocol)) {\n                return this.meta.get(\"proxy_handler_\" + protocol)(proxy, options, callback);\n            }\n            switch(protocol){\n                // Connect using a HTTP CONNECT method\n                case \"http\":\n                case \"https\":\n                    httpProxyClient(proxy.href, options.port, options.host, (err, socket)=>{\n                        if (err) {\n                            return callback(err);\n                        }\n                        return callback(null, {\n                            connection: socket\n                        });\n                    });\n                    return;\n                case \"socks\":\n                case \"socks5\":\n                case \"socks4\":\n                case \"socks4a\":\n                    {\n                        if (!this.meta.has(\"proxy_socks_module\")) {\n                            return callback(new Error(\"Socks module not loaded\"));\n                        }\n                        let connect = (ipaddress)=>{\n                            let proxyV2 = !!this.meta.get(\"proxy_socks_module\").SocksClient;\n                            let socksClient = proxyV2 ? this.meta.get(\"proxy_socks_module\").SocksClient : this.meta.get(\"proxy_socks_module\");\n                            let proxyType = Number(proxy.protocol.replace(/\\D/g, \"\")) || 5;\n                            let connectionOpts = {\n                                proxy: {\n                                    ipaddress,\n                                    port: Number(proxy.port),\n                                    type: proxyType\n                                },\n                                [proxyV2 ? \"destination\" : \"target\"]: {\n                                    host: options.host,\n                                    port: options.port\n                                },\n                                command: \"connect\"\n                            };\n                            if (proxy.auth) {\n                                let username = decodeURIComponent(proxy.auth.split(\":\").shift());\n                                let password = decodeURIComponent(proxy.auth.split(\":\").pop());\n                                if (proxyV2) {\n                                    connectionOpts.proxy.userId = username;\n                                    connectionOpts.proxy.password = password;\n                                } else if (proxyType === 4) {\n                                    connectionOpts.userid = username;\n                                } else {\n                                    connectionOpts.authentication = {\n                                        username,\n                                        password\n                                    };\n                                }\n                            }\n                            socksClient.createConnection(connectionOpts, (err, info)=>{\n                                if (err) {\n                                    return callback(err);\n                                }\n                                return callback(null, {\n                                    connection: info.socket || info\n                                });\n                            });\n                        };\n                        if (net.isIP(proxy.hostname)) {\n                            return connect(proxy.hostname);\n                        }\n                        return dns.resolve(proxy.hostname, (err, address)=>{\n                            if (err) {\n                                return callback(err);\n                            }\n                            connect(Array.isArray(address) ? address[0] : address);\n                        });\n                    }\n            }\n            callback(new Error(\"Unknown proxy configuration\"));\n        };\n    }\n    _convertDataImages(mail, callback) {\n        if (!this.options.attachDataUrls && !mail.data.attachDataUrls || !mail.data.html) {\n            return callback();\n        }\n        mail.resolveContent(mail.data, \"html\", (err, html)=>{\n            if (err) {\n                return callback(err);\n            }\n            let cidCounter = 0;\n            html = (html || \"\").toString().replace(/(<img\\b[^>]* src\\s*=[\\s\"']*)(data:([^;]+);[^\"'>\\s]+)/gi, (match, prefix, dataUri, mimeType)=>{\n                let cid = crypto.randomBytes(10).toString(\"hex\") + \"@localhost\";\n                if (!mail.data.attachments) {\n                    mail.data.attachments = [];\n                }\n                if (!Array.isArray(mail.data.attachments)) {\n                    mail.data.attachments = [].concat(mail.data.attachments || []);\n                }\n                mail.data.attachments.push({\n                    path: dataUri,\n                    cid,\n                    filename: \"image-\" + ++cidCounter + \".\" + mimeTypes.detectExtension(mimeType)\n                });\n                return prefix + \"cid:\" + cid;\n            });\n            mail.data.html = html;\n            callback();\n        });\n    }\n    set(key, value) {\n        return this.meta.set(key, value);\n    }\n    get(key) {\n        return this.meta.get(key);\n    }\n}\nmodule.exports = Mail;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mailer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mailer/mail-message.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst MimeNode = __webpack_require__(/*! ../mime-node */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nclass MailMessage {\n    constructor(mailer, data){\n        this.mailer = mailer;\n        this.data = {};\n        this.message = null;\n        data = data || {};\n        let options = mailer.options || {};\n        let defaults = mailer._defaults || {};\n        Object.keys(data).forEach((key)=>{\n            this.data[key] = data[key];\n        });\n        this.data.headers = this.data.headers || {};\n        // apply defaults\n        Object.keys(defaults).forEach((key)=>{\n            if (!(key in this.data)) {\n                this.data[key] = defaults[key];\n            } else if (key === \"headers\") {\n                // headers is a special case. Allow setting individual default headers\n                Object.keys(defaults.headers).forEach((key)=>{\n                    if (!(key in this.data.headers)) {\n                        this.data.headers[key] = defaults.headers[key];\n                    }\n                });\n            }\n        });\n        // force specific keys from transporter options\n        [\n            \"disableFileAccess\",\n            \"disableUrlAccess\",\n            \"normalizeHeaderKey\"\n        ].forEach((key)=>{\n            if (key in options) {\n                this.data[key] = options[key];\n            }\n        });\n    }\n    resolveContent(...args) {\n        return shared.resolveContent(...args);\n    }\n    resolveAll(callback) {\n        let keys = [\n            [\n                this.data,\n                \"html\"\n            ],\n            [\n                this.data,\n                \"text\"\n            ],\n            [\n                this.data,\n                \"watchHtml\"\n            ],\n            [\n                this.data,\n                \"amp\"\n            ],\n            [\n                this.data,\n                \"icalEvent\"\n            ]\n        ];\n        if (this.data.alternatives && this.data.alternatives.length) {\n            this.data.alternatives.forEach((alternative, i)=>{\n                keys.push([\n                    this.data.alternatives,\n                    i\n                ]);\n            });\n        }\n        if (this.data.attachments && this.data.attachments.length) {\n            this.data.attachments.forEach((attachment, i)=>{\n                if (!attachment.filename) {\n                    attachment.filename = (attachment.path || attachment.href || \"\").split(\"/\").pop().split(\"?\").shift() || \"attachment-\" + (i + 1);\n                    if (attachment.filename.indexOf(\".\") < 0) {\n                        attachment.filename += \".\" + mimeFuncs.detectExtension(attachment.contentType);\n                    }\n                }\n                if (!attachment.contentType) {\n                    attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || \"bin\");\n                }\n                keys.push([\n                    this.data.attachments,\n                    i\n                ]);\n            });\n        }\n        let mimeNode = new MimeNode();\n        let addressKeys = [\n            \"from\",\n            \"to\",\n            \"cc\",\n            \"bcc\",\n            \"sender\",\n            \"replyTo\"\n        ];\n        addressKeys.forEach((address)=>{\n            let value;\n            if (this.message) {\n                value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === \"replyTo\" ? \"reply-to\" : address)) || []);\n            } else if (this.data[address]) {\n                value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);\n            }\n            if (value && value.length) {\n                this.data[address] = value;\n            } else if (address in this.data) {\n                this.data[address] = null;\n            }\n        });\n        let singleKeys = [\n            \"from\",\n            \"sender\"\n        ];\n        singleKeys.forEach((address)=>{\n            if (this.data[address]) {\n                this.data[address] = this.data[address].shift();\n            }\n        });\n        let pos = 0;\n        let resolveNext = ()=>{\n            if (pos >= keys.length) {\n                return callback(null, this.data);\n            }\n            let args = keys[pos++];\n            if (!args[0] || !args[0][args[1]]) {\n                return resolveNext();\n            }\n            shared.resolveContent(...args, (err, value)=>{\n                if (err) {\n                    return callback(err);\n                }\n                let node = {\n                    content: value\n                };\n                if (args[0][args[1]] && typeof args[0][args[1]] === \"object\" && !Buffer.isBuffer(args[0][args[1]])) {\n                    Object.keys(args[0][args[1]]).forEach((key)=>{\n                        if (!(key in node) && ![\n                            \"content\",\n                            \"path\",\n                            \"href\",\n                            \"raw\"\n                        ].includes(key)) {\n                            node[key] = args[0][args[1]][key];\n                        }\n                    });\n                }\n                args[0][args[1]] = node;\n                resolveNext();\n            });\n        };\n        setImmediate(()=>resolveNext());\n    }\n    normalize(callback) {\n        let envelope = this.data.envelope || this.message.getEnvelope();\n        let messageId = this.message.messageId();\n        this.resolveAll((err, data)=>{\n            if (err) {\n                return callback(err);\n            }\n            data.envelope = envelope;\n            data.messageId = messageId;\n            [\n                \"html\",\n                \"text\",\n                \"watchHtml\",\n                \"amp\"\n            ].forEach((key)=>{\n                if (data[key] && data[key].content) {\n                    if (typeof data[key].content === \"string\") {\n                        data[key] = data[key].content;\n                    } else if (Buffer.isBuffer(data[key].content)) {\n                        data[key] = data[key].content.toString();\n                    }\n                }\n            });\n            if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {\n                data.icalEvent.content = data.icalEvent.content.toString(\"base64\");\n                data.icalEvent.encoding = \"base64\";\n            }\n            if (data.alternatives && data.alternatives.length) {\n                data.alternatives.forEach((alternative)=>{\n                    if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {\n                        alternative.content = alternative.content.toString(\"base64\");\n                        alternative.encoding = \"base64\";\n                    }\n                });\n            }\n            if (data.attachments && data.attachments.length) {\n                data.attachments.forEach((attachment)=>{\n                    if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {\n                        attachment.content = attachment.content.toString(\"base64\");\n                        attachment.encoding = \"base64\";\n                    }\n                });\n            }\n            data.normalizedHeaders = {};\n            Object.keys(data.headers || {}).forEach((key)=>{\n                let value = [].concat(data.headers[key] || []).shift();\n                value = value && value.value || value;\n                if (value) {\n                    if ([\n                        \"references\",\n                        \"in-reply-to\",\n                        \"message-id\",\n                        \"content-id\"\n                    ].includes(key)) {\n                        value = this.message._encodeHeaderValue(key, value);\n                    }\n                    data.normalizedHeaders[key] = value;\n                }\n            });\n            if (data.list && typeof data.list === \"object\") {\n                let listHeaders = this._getListHeaders(data.list);\n                listHeaders.forEach((entry)=>{\n                    data.normalizedHeaders[entry.key] = entry.value.map((val)=>val && val.value || val).join(\", \");\n                });\n            }\n            if (data.references) {\n                data.normalizedHeaders.references = this.message._encodeHeaderValue(\"references\", data.references);\n            }\n            if (data.inReplyTo) {\n                data.normalizedHeaders[\"in-reply-to\"] = this.message._encodeHeaderValue(\"in-reply-to\", data.inReplyTo);\n            }\n            return callback(null, data);\n        });\n    }\n    setMailerHeader() {\n        if (!this.message || !this.data.xMailer) {\n            return;\n        }\n        this.message.setHeader(\"X-Mailer\", this.data.xMailer);\n    }\n    setPriorityHeaders() {\n        if (!this.message || !this.data.priority) {\n            return;\n        }\n        switch((this.data.priority || \"\").toString().toLowerCase()){\n            case \"high\":\n                this.message.setHeader(\"X-Priority\", \"1 (Highest)\");\n                this.message.setHeader(\"X-MSMail-Priority\", \"High\");\n                this.message.setHeader(\"Importance\", \"High\");\n                break;\n            case \"low\":\n                this.message.setHeader(\"X-Priority\", \"5 (Lowest)\");\n                this.message.setHeader(\"X-MSMail-Priority\", \"Low\");\n                this.message.setHeader(\"Importance\", \"Low\");\n                break;\n            default:\n        }\n    }\n    setListHeaders() {\n        if (!this.message || !this.data.list || typeof this.data.list !== \"object\") {\n            return;\n        }\n        // add optional List-* headers\n        if (this.data.list && typeof this.data.list === \"object\") {\n            this._getListHeaders(this.data.list).forEach((listHeader)=>{\n                listHeader.value.forEach((value)=>{\n                    this.message.addHeader(listHeader.key, value);\n                });\n            });\n        }\n    }\n    _getListHeaders(listData) {\n        // make sure an url looks like <protocol:url>\n        return Object.keys(listData).map((key)=>({\n                key: \"list-\" + key.toLowerCase().trim(),\n                value: [].concat(listData[key] || []).map((value)=>({\n                        prepared: true,\n                        foldLines: true,\n                        value: [].concat(value || []).map((value)=>{\n                            if (typeof value === \"string\") {\n                                value = {\n                                    url: value\n                                };\n                            }\n                            if (value && value.url) {\n                                if (key.toLowerCase().trim() === \"id\") {\n                                    // List-ID: \"comment\" <domain>\n                                    let comment = value.comment || \"\";\n                                    if (mimeFuncs.isPlainText(comment)) {\n                                        comment = '\"' + comment + '\"';\n                                    } else {\n                                        comment = mimeFuncs.encodeWord(comment);\n                                    }\n                                    return (value.comment ? comment + \" \" : \"\") + this._formatListUrl(value.url).replace(/^<[^:]+\\/{,2}/, \"\");\n                                }\n                                // List-*: <http://domain> (comment)\n                                let comment = value.comment || \"\";\n                                if (!mimeFuncs.isPlainText(comment)) {\n                                    comment = mimeFuncs.encodeWord(comment);\n                                }\n                                return this._formatListUrl(value.url) + (value.comment ? \" (\" + comment + \")\" : \"\");\n                            }\n                            return \"\";\n                        }).filter((value)=>value).join(\", \")\n                    }))\n            }));\n    }\n    _formatListUrl(url) {\n        url = url.replace(/[\\s<]+|[\\s>]+/g, \"\");\n        if (/^(https?|mailto|ftp):/.test(url)) {\n            return \"<\" + url + \">\";\n        }\n        if (/^[^@]+@[^@]+$/.test(url)) {\n            return \"<mailto:\" + url + \">\";\n        }\n        return \"<http://\" + url + \">\";\n    }\n}\nmodule.exports = MailMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-funcs/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-control-regex:0 */ \nconst base64 = __webpack_require__(/*! ../base64 */ \"(rsc)/./node_modules/nodemailer/lib/base64/index.js\");\nconst qp = __webpack_require__(/*! ../qp */ \"(rsc)/./node_modules/nodemailer/lib/qp/index.js\");\nconst mimeTypes = __webpack_require__(/*! ./mime-types */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\");\nmodule.exports = {\n    /**\n     * Checks if a value is plaintext string (uses only printable 7bit chars)\n     *\n     * @param {String} value String to be tested\n     * @returns {Boolean} true if it is a plaintext string\n     */ isPlainText (value, isParam) {\n        const re = isParam ? /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\"\\u0080-\\uFFFF]/ : /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/;\n        if (typeof value !== \"string\" || re.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    },\n    /**\n     * Checks if a multi line string containes lines longer than the selected value.\n     *\n     * Useful when detecting if a mail message needs any processing at all –\n     * if only plaintext characters are used and lines are short, then there is\n     * no need to encode the values in any way. If the value is plaintext but has\n     * longer lines then allowed, then use format=flowed\n     *\n     * @param {Number} lineLength Max line length to check for\n     * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n     */ hasLongerLines (str, lineLength) {\n        if (str.length > 128 * 1024) {\n            // do not test strings longer than 128kB\n            return true;\n        }\n        return new RegExp(\"^.{\" + (lineLength + 1) + \",}\", \"m\").test(str);\n    },\n    /**\n     * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @return {String} Single or several mime words joined together\n     */ encodeWord (data, mimeWordEncoding, maxLength) {\n        mimeWordEncoding = (mimeWordEncoding || \"Q\").toString().toUpperCase().trim().charAt(0);\n        maxLength = maxLength || 0;\n        let encodedStr;\n        let toCharset = \"UTF-8\";\n        if (maxLength && maxLength > 7 + toCharset.length) {\n            maxLength -= 7 + toCharset.length;\n        }\n        if (mimeWordEncoding === \"Q\") {\n            // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n            encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, (chr)=>{\n                let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n                if (chr === \" \") {\n                    return \"_\";\n                } else {\n                    return \"=\" + (ord.length === 1 ? \"0\" + ord : ord);\n                }\n            });\n        } else if (mimeWordEncoding === \"B\") {\n            encodedStr = typeof data === \"string\" ? data : base64.encode(data);\n            maxLength = maxLength ? Math.max(3, (maxLength - maxLength % 4) / 4 * 3) : 0;\n        }\n        if (maxLength && (mimeWordEncoding !== \"B\" ? encodedStr : base64.encode(data)).length > maxLength) {\n            if (mimeWordEncoding === \"Q\") {\n                encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join(\"?= =?\" + toCharset + \"?\" + mimeWordEncoding + \"?\");\n            } else {\n                // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n                let parts = [];\n                let lpart = \"\";\n                for(let i = 0, len = encodedStr.length; i < len; i++){\n                    let chr = encodedStr.charAt(i);\n                    if (/[\\ud83c\\ud83d\\ud83e]/.test(chr) && i < len - 1) {\n                        // composite emoji byte, so add the next byte as well\n                        chr += encodedStr.charAt(++i);\n                    }\n                    // check if we can add this character to the existing string\n                    // without breaking byte length limit\n                    if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n                        lpart += chr;\n                    } else {\n                        // we hit the length limit, so push the existing string and start over\n                        parts.push(base64.encode(lpart));\n                        lpart = chr;\n                    }\n                }\n                if (lpart) {\n                    parts.push(base64.encode(lpart));\n                }\n                if (parts.length > 1) {\n                    encodedStr = parts.join(\"?= =?\" + toCharset + \"?\" + mimeWordEncoding + \"?\");\n                } else {\n                    encodedStr = parts.join(\"\");\n                }\n            }\n        } else if (mimeWordEncoding === \"B\") {\n            encodedStr = base64.encode(data);\n        }\n        return \"=?\" + toCharset + \"?\" + mimeWordEncoding + \"?\" + encodedStr + (encodedStr.substr(-2) === \"?=\" ? \"\" : \"?=\");\n    },\n    /**\n     * Finds word sequences with non ascii text and converts these to mime words\n     *\n     * @param {String} value String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match\n     * @return {String} String with possible mime words\n     */ encodeWords (value, mimeWordEncoding, maxLength, encodeAll) {\n        maxLength = maxLength || 0;\n        let encodedValue;\n        // find first word with a non-printable ascii or special symbol in it\n        let firstMatch = value.match(/(?:^|\\s)([^\\s]*[\"\\u0080-\\uFFFF])/);\n        if (!firstMatch) {\n            return value;\n        }\n        if (encodeAll) {\n            // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything\n            return this.encodeWord(value, mimeWordEncoding, maxLength);\n        }\n        // find the last word with a non-printable ascii in it\n        let lastMatch = value.match(/([\"\\u0080-\\uFFFF][^\\s]*)[^\"\\u0080-\\uFFFF]*$/);\n        if (!lastMatch) {\n            // should not happen\n            return value;\n        }\n        let startIndex = firstMatch.index + (firstMatch[0].match(/[^\\s]/) || {\n            index: 0\n        }).index;\n        let endIndex = lastMatch.index + (lastMatch[1] || \"\").length;\n        encodedValue = (startIndex ? value.substr(0, startIndex) : \"\") + this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || \"Q\", maxLength) + (endIndex < value.length ? value.substr(endIndex) : \"\");\n        return encodedValue;\n    },\n    /**\n     * Joins parsed header value together as 'value; param1=value1; param2=value2'\n     * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n     *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n     * @param {Object} structured Parsed header value\n     * @return {String} joined header value\n     */ buildHeaderValue (structured) {\n        let paramsArray = [];\n        Object.keys(structured.params || {}).forEach((param)=>{\n            // filename might include unicode characters so it is a special case\n            // other values probably do not\n            let value = structured.params[param];\n            if (!this.isPlainText(value, true) || value.length >= 75) {\n                this.buildHeaderParam(param, value, 50).forEach((encodedParam)=>{\n                    if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === \"*\") {\n                        paramsArray.push(encodedParam.key + \"=\" + encodedParam.value);\n                    } else {\n                        paramsArray.push(encodedParam.key + \"=\" + JSON.stringify(encodedParam.value));\n                    }\n                });\n            } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n                paramsArray.push(param + \"=\" + JSON.stringify(value));\n            } else {\n                paramsArray.push(param + \"=\" + value);\n            }\n        });\n        return structured.value + (paramsArray.length ? \"; \" + paramsArray.join(\"; \") : \"\");\n    },\n    /**\n     * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n     * Useful for splitting long parameter values.\n     *\n     * For example\n     *      title=\"unicode string\"\n     * becomes\n     *     title*0*=utf-8''unicode\n     *     title*1*=%20string\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {Number} [maxLength=50] Max length for generated chunks\n     * @param {String} [fromCharset='UTF-8'] Source sharacter set\n     * @return {Array} A list of encoded keys and headers\n     */ buildHeaderParam (key, data, maxLength) {\n        let list = [];\n        let encodedStr = typeof data === \"string\" ? data : (data || \"\").toString();\n        let encodedStrArr;\n        let chr, ord;\n        let line;\n        let startPos = 0;\n        let i, len;\n        maxLength = maxLength || 50;\n        // process ascii only text\n        if (this.isPlainText(data, true)) {\n            // check if conversion is even needed\n            if (encodedStr.length <= maxLength) {\n                return [\n                    {\n                        key,\n                        value: encodedStr\n                    }\n                ];\n            }\n            encodedStr = encodedStr.replace(new RegExp(\".{\" + maxLength + \"}\", \"g\"), (str)=>{\n                list.push({\n                    line: str\n                });\n                return \"\";\n            });\n            if (encodedStr) {\n                list.push({\n                    line: encodedStr\n                });\n            }\n        } else {\n            if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n                // string containts surrogate pairs, so normalize it to an array of bytes\n                encodedStrArr = [];\n                for(i = 0, len = encodedStr.length; i < len; i++){\n                    chr = encodedStr.charAt(i);\n                    ord = chr.charCodeAt(0);\n                    if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n                        chr += encodedStr.charAt(i + 1);\n                        encodedStrArr.push(chr);\n                        i++;\n                    } else {\n                        encodedStrArr.push(chr);\n                    }\n                }\n                encodedStr = encodedStrArr;\n            }\n            // first line includes the charset and language info and needs to be encoded\n            // even if it does not contain any unicode characters\n            line = \"utf-8''\";\n            let encoded = true;\n            startPos = 0;\n            // process text with unicode or special chars\n            for(i = 0, len = encodedStr.length; i < len; i++){\n                chr = encodedStr[i];\n                if (encoded) {\n                    chr = this.safeEncodeURIComponent(chr);\n                } else {\n                    // try to urlencode current char\n                    chr = chr === \" \" ? chr : this.safeEncodeURIComponent(chr);\n                    // By default it is not required to encode a line, the need\n                    // only appears when the string contains unicode or special chars\n                    // in this case we start processing the line over and encode all chars\n                    if (chr !== encodedStr[i]) {\n                        // Check if it is even possible to add the encoded char to the line\n                        // If not, there is no reason to use this line, just push it to the list\n                        // and start a new line with the char that needs encoding\n                        if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n                            list.push({\n                                line,\n                                encoded\n                            });\n                            line = \"\";\n                            startPos = i - 1;\n                        } else {\n                            encoded = true;\n                            i = startPos;\n                            line = \"\";\n                            continue;\n                        }\n                    }\n                }\n                // if the line is already too long, push it to the list and start a new one\n                if ((line + chr).length >= maxLength) {\n                    list.push({\n                        line,\n                        encoded\n                    });\n                    line = chr = encodedStr[i] === \" \" ? \" \" : this.safeEncodeURIComponent(encodedStr[i]);\n                    if (chr === encodedStr[i]) {\n                        encoded = false;\n                        startPos = i - 1;\n                    } else {\n                        encoded = true;\n                    }\n                } else {\n                    line += chr;\n                }\n            }\n            if (line) {\n                list.push({\n                    line,\n                    encoded\n                });\n            }\n        }\n        return list.map((item, i)=>({\n                // encoded lines: {name}*{part}*\n                // unencoded lines: {name}*{part}\n                // if any line needs to be encoded then the first line (part==0) is always encoded\n                key: key + \"*\" + i + (item.encoded ? \"*\" : \"\"),\n                value: item.line\n            }));\n    },\n    /**\n     * Parses a header value with key=value arguments into a structured\n     * object.\n     *\n     *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n     *   {\n     *     'value': 'text/plain',\n     *     'params': {\n     *       'charset': 'UTF-8'\n     *     }\n     *   }\n     *\n     * @param {String} str Header value\n     * @return {Object} Header value as a parsed structure\n     */ parseHeaderValue (str) {\n        let response = {\n            value: false,\n            params: {}\n        };\n        let key = false;\n        let value = \"\";\n        let type = \"value\";\n        let quote = false;\n        let escaped = false;\n        let chr;\n        for(let i = 0, len = str.length; i < len; i++){\n            chr = str.charAt(i);\n            if (type === \"key\") {\n                if (chr === \"=\") {\n                    key = value.trim().toLowerCase();\n                    type = \"value\";\n                    value = \"\";\n                    continue;\n                }\n                value += chr;\n            } else {\n                if (escaped) {\n                    value += chr;\n                } else if (chr === \"\\\\\") {\n                    escaped = true;\n                    continue;\n                } else if (quote && chr === quote) {\n                    quote = false;\n                } else if (!quote && chr === '\"') {\n                    quote = chr;\n                } else if (!quote && chr === \";\") {\n                    if (key === false) {\n                        response.value = value.trim();\n                    } else {\n                        response.params[key] = value.trim();\n                    }\n                    type = \"key\";\n                    value = \"\";\n                } else {\n                    value += chr;\n                }\n                escaped = false;\n            }\n        }\n        if (type === \"value\") {\n            if (key === false) {\n                response.value = value.trim();\n            } else {\n                response.params[key] = value.trim();\n            }\n        } else if (value.trim()) {\n            response.params[value.trim().toLowerCase()] = \"\";\n        }\n        // handle parameter value continuations\n        // https://tools.ietf.org/html/rfc2231#section-3\n        // preprocess values\n        Object.keys(response.params).forEach((key)=>{\n            let actualKey, nr, match, value;\n            if (match = key.match(/(\\*(\\d+)|\\*(\\d+)\\*|\\*)$/)) {\n                actualKey = key.substr(0, match.index);\n                nr = Number(match[2] || match[3]) || 0;\n                if (!response.params[actualKey] || typeof response.params[actualKey] !== \"object\") {\n                    response.params[actualKey] = {\n                        charset: false,\n                        values: []\n                    };\n                }\n                value = response.params[key];\n                if (nr === 0 && match[0].substr(-1) === \"*\" && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n                    response.params[actualKey].charset = match[1] || \"iso-8859-1\";\n                    value = match[2];\n                }\n                response.params[actualKey].values[nr] = value;\n                // remove the old reference\n                delete response.params[key];\n            }\n        });\n        // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n        Object.keys(response.params).forEach((key)=>{\n            let value;\n            if (response.params[key] && Array.isArray(response.params[key].values)) {\n                value = response.params[key].values.map((val)=>val || \"\").join(\"\");\n                if (response.params[key].charset) {\n                    // convert \"%AB\" to \"=?charset?Q?=AB?=\"\n                    response.params[key] = \"=?\" + response.params[key].charset + \"?Q?\" + value// fix invalidly encoded chars\n                    .replace(/[=?_\\s]/g, (s)=>{\n                        let c = s.charCodeAt(0).toString(16);\n                        if (s === \" \") {\n                            return \"_\";\n                        } else {\n                            return \"%\" + (c.length < 2 ? \"0\" : \"\") + c;\n                        }\n                    })// change from urlencoding to percent encoding\n                    .replace(/%/g, \"=\") + \"?=\";\n                } else {\n                    response.params[key] = value;\n                }\n            }\n        });\n        return response;\n    },\n    /**\n     * Returns file extension for a content type string. If no suitable extensions\n     * are found, 'bin' is used as the default extension\n     *\n     * @param {String} mimeType Content type to be checked for\n     * @return {String} File extension\n     */ detectExtension: (mimeType)=>mimeTypes.detectExtension(mimeType),\n    /**\n     * Returns content type for a file extension. If no suitable content types\n     * are found, 'application/octet-stream' is used as the default content type\n     *\n     * @param {String} extension Extension to be checked for\n     * @return {String} File extension\n     */ detectMimeType: (extension)=>mimeTypes.detectMimeType(extension),\n    /**\n     * Folds long lines, useful for folding header lines (afterSpace=false) and\n     * flowed text (afterSpace=true)\n     *\n     * @param {String} str String to be folded\n     * @param {Number} [lineLength=76] Maximum length of a line\n     * @param {Boolean} afterSpace If true, leave a space in th end of a line\n     * @return {String} String with folded lines\n     */ foldLines (str, lineLength, afterSpace) {\n        str = (str || \"\").toString();\n        lineLength = lineLength || 76;\n        let pos = 0, len = str.length, result = \"\", line, match;\n        while(pos < len){\n            line = str.substr(pos, lineLength);\n            if (line.length < lineLength) {\n                result += line;\n                break;\n            }\n            if (match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/)) {\n                line = match[0];\n                result += line;\n                pos += line.length;\n                continue;\n            } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || \"\").length : 0) < line.length) {\n                line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || \"\").length : 0)));\n            } else if (match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/)) {\n                line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || \"\").length : 0));\n            }\n            result += line;\n            pos += line.length;\n            if (pos < len) {\n                result += \"\\r\\n\";\n            }\n        }\n        return result;\n    },\n    /**\n     * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n     *\n     * @param {String} str Mime encoded string to be split up\n     * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n     * @return {Array} Split string\n     */ splitMimeEncodedString: (str, maxlen)=>{\n        let curLine, match, chr, done, lines = [];\n        // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n        maxlen = Math.max(maxlen || 0, 12);\n        while(str.length){\n            curLine = str.substr(0, maxlen);\n            // move incomplete escaped char back to main\n            if (match = curLine.match(/[=][0-9A-F]?$/i)) {\n                curLine = curLine.substr(0, match.index);\n            }\n            done = false;\n            while(!done){\n                done = true;\n                // check if not middle of a unicode char sequence\n                if (match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i)) {\n                    chr = parseInt(match[1], 16);\n                    // invalid sequence, move one char back anc recheck\n                    if (chr < 0xc2 && chr > 0x7f) {\n                        curLine = curLine.substr(0, curLine.length - 3);\n                        done = false;\n                    }\n                }\n            }\n            if (curLine.length) {\n                lines.push(curLine);\n            }\n            str = str.substr(curLine.length);\n        }\n        return lines;\n    },\n    encodeURICharComponent: (chr)=>{\n        let res = \"\";\n        let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n        if (ord.length % 2) {\n            ord = \"0\" + ord;\n        }\n        if (ord.length > 2) {\n            for(let i = 0, len = ord.length / 2; i < len; i++){\n                res += \"%\" + ord.substr(i, 2);\n            }\n        } else {\n            res += \"%\" + ord;\n        }\n        return res;\n    },\n    safeEncodeURIComponent (str) {\n        str = (str || \"\").toString();\n        try {\n            // might throw if we try to encode invalid sequences, eg. partial emoji\n            str = encodeURIComponent(str);\n        } catch (E) {\n            // should never run\n            return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, \"\");\n        }\n        // ensure chars that are not handled by encodeURICompent are converted as well\n        return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, (chr)=>this.encodeURICharComponent(chr));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-funcs/mime-types.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint quote-props: 0 */ \nconst path = __webpack_require__(/*! path */ \"path\");\nconst defaultMimeType = \"application/octet-stream\";\nconst defaultExtension = \"bin\";\nconst mimeTypes = new Map([\n    [\n        \"application/acad\",\n        \"dwg\"\n    ],\n    [\n        \"application/applixware\",\n        \"aw\"\n    ],\n    [\n        \"application/arj\",\n        \"arj\"\n    ],\n    [\n        \"application/atom+xml\",\n        \"xml\"\n    ],\n    [\n        \"application/atomcat+xml\",\n        \"atomcat\"\n    ],\n    [\n        \"application/atomsvc+xml\",\n        \"atomsvc\"\n    ],\n    [\n        \"application/base64\",\n        [\n            \"mm\",\n            \"mme\"\n        ]\n    ],\n    [\n        \"application/binhex\",\n        \"hqx\"\n    ],\n    [\n        \"application/binhex4\",\n        \"hqx\"\n    ],\n    [\n        \"application/book\",\n        [\n            \"book\",\n            \"boo\"\n        ]\n    ],\n    [\n        \"application/ccxml+xml,\",\n        \"ccxml\"\n    ],\n    [\n        \"application/cdf\",\n        \"cdf\"\n    ],\n    [\n        \"application/cdmi-capability\",\n        \"cdmia\"\n    ],\n    [\n        \"application/cdmi-container\",\n        \"cdmic\"\n    ],\n    [\n        \"application/cdmi-domain\",\n        \"cdmid\"\n    ],\n    [\n        \"application/cdmi-object\",\n        \"cdmio\"\n    ],\n    [\n        \"application/cdmi-queue\",\n        \"cdmiq\"\n    ],\n    [\n        \"application/clariscad\",\n        \"ccad\"\n    ],\n    [\n        \"application/commonground\",\n        \"dp\"\n    ],\n    [\n        \"application/cu-seeme\",\n        \"cu\"\n    ],\n    [\n        \"application/davmount+xml\",\n        \"davmount\"\n    ],\n    [\n        \"application/drafting\",\n        \"drw\"\n    ],\n    [\n        \"application/dsptype\",\n        \"tsp\"\n    ],\n    [\n        \"application/dssc+der\",\n        \"dssc\"\n    ],\n    [\n        \"application/dssc+xml\",\n        \"xdssc\"\n    ],\n    [\n        \"application/dxf\",\n        \"dxf\"\n    ],\n    [\n        \"application/ecmascript\",\n        [\n            \"js\",\n            \"es\"\n        ]\n    ],\n    [\n        \"application/emma+xml\",\n        \"emma\"\n    ],\n    [\n        \"application/envoy\",\n        \"evy\"\n    ],\n    [\n        \"application/epub+zip\",\n        \"epub\"\n    ],\n    [\n        \"application/excel\",\n        [\n            \"xls\",\n            \"xl\",\n            \"xla\",\n            \"xlb\",\n            \"xlc\",\n            \"xld\",\n            \"xlk\",\n            \"xll\",\n            \"xlm\",\n            \"xlt\",\n            \"xlv\",\n            \"xlw\"\n        ]\n    ],\n    [\n        \"application/exi\",\n        \"exi\"\n    ],\n    [\n        \"application/font-tdpfr\",\n        \"pfr\"\n    ],\n    [\n        \"application/fractals\",\n        \"fif\"\n    ],\n    [\n        \"application/freeloader\",\n        \"frl\"\n    ],\n    [\n        \"application/futuresplash\",\n        \"spl\"\n    ],\n    [\n        \"application/gnutar\",\n        \"tgz\"\n    ],\n    [\n        \"application/groupwise\",\n        \"vew\"\n    ],\n    [\n        \"application/hlp\",\n        \"hlp\"\n    ],\n    [\n        \"application/hta\",\n        \"hta\"\n    ],\n    [\n        \"application/hyperstudio\",\n        \"stk\"\n    ],\n    [\n        \"application/i-deas\",\n        \"unv\"\n    ],\n    [\n        \"application/iges\",\n        [\n            \"iges\",\n            \"igs\"\n        ]\n    ],\n    [\n        \"application/inf\",\n        \"inf\"\n    ],\n    [\n        \"application/internet-property-stream\",\n        \"acx\"\n    ],\n    [\n        \"application/ipfix\",\n        \"ipfix\"\n    ],\n    [\n        \"application/java\",\n        \"class\"\n    ],\n    [\n        \"application/java-archive\",\n        \"jar\"\n    ],\n    [\n        \"application/java-byte-code\",\n        \"class\"\n    ],\n    [\n        \"application/java-serialized-object\",\n        \"ser\"\n    ],\n    [\n        \"application/java-vm\",\n        \"class\"\n    ],\n    [\n        \"application/javascript\",\n        \"js\"\n    ],\n    [\n        \"application/json\",\n        \"json\"\n    ],\n    [\n        \"application/lha\",\n        \"lha\"\n    ],\n    [\n        \"application/lzx\",\n        \"lzx\"\n    ],\n    [\n        \"application/mac-binary\",\n        \"bin\"\n    ],\n    [\n        \"application/mac-binhex\",\n        \"hqx\"\n    ],\n    [\n        \"application/mac-binhex40\",\n        \"hqx\"\n    ],\n    [\n        \"application/mac-compactpro\",\n        \"cpt\"\n    ],\n    [\n        \"application/macbinary\",\n        \"bin\"\n    ],\n    [\n        \"application/mads+xml\",\n        \"mads\"\n    ],\n    [\n        \"application/marc\",\n        \"mrc\"\n    ],\n    [\n        \"application/marcxml+xml\",\n        \"mrcx\"\n    ],\n    [\n        \"application/mathematica\",\n        \"ma\"\n    ],\n    [\n        \"application/mathml+xml\",\n        \"mathml\"\n    ],\n    [\n        \"application/mbedlet\",\n        \"mbd\"\n    ],\n    [\n        \"application/mbox\",\n        \"mbox\"\n    ],\n    [\n        \"application/mcad\",\n        \"mcd\"\n    ],\n    [\n        \"application/mediaservercontrol+xml\",\n        \"mscml\"\n    ],\n    [\n        \"application/metalink4+xml\",\n        \"meta4\"\n    ],\n    [\n        \"application/mets+xml\",\n        \"mets\"\n    ],\n    [\n        \"application/mime\",\n        \"aps\"\n    ],\n    [\n        \"application/mods+xml\",\n        \"mods\"\n    ],\n    [\n        \"application/mp21\",\n        \"m21\"\n    ],\n    [\n        \"application/mp4\",\n        \"mp4\"\n    ],\n    [\n        \"application/mspowerpoint\",\n        [\n            \"ppt\",\n            \"pot\",\n            \"pps\",\n            \"ppz\"\n        ]\n    ],\n    [\n        \"application/msword\",\n        [\n            \"doc\",\n            \"dot\",\n            \"w6w\",\n            \"wiz\",\n            \"word\"\n        ]\n    ],\n    [\n        \"application/mswrite\",\n        \"wri\"\n    ],\n    [\n        \"application/mxf\",\n        \"mxf\"\n    ],\n    [\n        \"application/netmc\",\n        \"mcp\"\n    ],\n    [\n        \"application/octet-stream\",\n        [\n            \"*\"\n        ]\n    ],\n    [\n        \"application/oda\",\n        \"oda\"\n    ],\n    [\n        \"application/oebps-package+xml\",\n        \"opf\"\n    ],\n    [\n        \"application/ogg\",\n        \"ogx\"\n    ],\n    [\n        \"application/olescript\",\n        \"axs\"\n    ],\n    [\n        \"application/onenote\",\n        \"onetoc\"\n    ],\n    [\n        \"application/patch-ops-error+xml\",\n        \"xer\"\n    ],\n    [\n        \"application/pdf\",\n        \"pdf\"\n    ],\n    [\n        \"application/pgp-encrypted\",\n        \"asc\"\n    ],\n    [\n        \"application/pgp-signature\",\n        \"pgp\"\n    ],\n    [\n        \"application/pics-rules\",\n        \"prf\"\n    ],\n    [\n        \"application/pkcs-12\",\n        \"p12\"\n    ],\n    [\n        \"application/pkcs-crl\",\n        \"crl\"\n    ],\n    [\n        \"application/pkcs10\",\n        \"p10\"\n    ],\n    [\n        \"application/pkcs7-mime\",\n        [\n            \"p7c\",\n            \"p7m\"\n        ]\n    ],\n    [\n        \"application/pkcs7-signature\",\n        \"p7s\"\n    ],\n    [\n        \"application/pkcs8\",\n        \"p8\"\n    ],\n    [\n        \"application/pkix-attr-cert\",\n        \"ac\"\n    ],\n    [\n        \"application/pkix-cert\",\n        [\n            \"cer\",\n            \"crt\"\n        ]\n    ],\n    [\n        \"application/pkix-crl\",\n        \"crl\"\n    ],\n    [\n        \"application/pkix-pkipath\",\n        \"pkipath\"\n    ],\n    [\n        \"application/pkixcmp\",\n        \"pki\"\n    ],\n    [\n        \"application/plain\",\n        \"text\"\n    ],\n    [\n        \"application/pls+xml\",\n        \"pls\"\n    ],\n    [\n        \"application/postscript\",\n        [\n            \"ps\",\n            \"ai\",\n            \"eps\"\n        ]\n    ],\n    [\n        \"application/powerpoint\",\n        \"ppt\"\n    ],\n    [\n        \"application/pro_eng\",\n        [\n            \"part\",\n            \"prt\"\n        ]\n    ],\n    [\n        \"application/prs.cww\",\n        \"cww\"\n    ],\n    [\n        \"application/pskc+xml\",\n        \"pskcxml\"\n    ],\n    [\n        \"application/rdf+xml\",\n        \"rdf\"\n    ],\n    [\n        \"application/reginfo+xml\",\n        \"rif\"\n    ],\n    [\n        \"application/relax-ng-compact-syntax\",\n        \"rnc\"\n    ],\n    [\n        \"application/resource-lists+xml\",\n        \"rl\"\n    ],\n    [\n        \"application/resource-lists-diff+xml\",\n        \"rld\"\n    ],\n    [\n        \"application/ringing-tones\",\n        \"rng\"\n    ],\n    [\n        \"application/rls-services+xml\",\n        \"rs\"\n    ],\n    [\n        \"application/rsd+xml\",\n        \"rsd\"\n    ],\n    [\n        \"application/rss+xml\",\n        \"xml\"\n    ],\n    [\n        \"application/rtf\",\n        [\n            \"rtf\",\n            \"rtx\"\n        ]\n    ],\n    [\n        \"application/sbml+xml\",\n        \"sbml\"\n    ],\n    [\n        \"application/scvp-cv-request\",\n        \"scq\"\n    ],\n    [\n        \"application/scvp-cv-response\",\n        \"scs\"\n    ],\n    [\n        \"application/scvp-vp-request\",\n        \"spq\"\n    ],\n    [\n        \"application/scvp-vp-response\",\n        \"spp\"\n    ],\n    [\n        \"application/sdp\",\n        \"sdp\"\n    ],\n    [\n        \"application/sea\",\n        \"sea\"\n    ],\n    [\n        \"application/set\",\n        \"set\"\n    ],\n    [\n        \"application/set-payment-initiation\",\n        \"setpay\"\n    ],\n    [\n        \"application/set-registration-initiation\",\n        \"setreg\"\n    ],\n    [\n        \"application/shf+xml\",\n        \"shf\"\n    ],\n    [\n        \"application/sla\",\n        \"stl\"\n    ],\n    [\n        \"application/smil\",\n        [\n            \"smi\",\n            \"smil\"\n        ]\n    ],\n    [\n        \"application/smil+xml\",\n        \"smi\"\n    ],\n    [\n        \"application/solids\",\n        \"sol\"\n    ],\n    [\n        \"application/sounder\",\n        \"sdr\"\n    ],\n    [\n        \"application/sparql-query\",\n        \"rq\"\n    ],\n    [\n        \"application/sparql-results+xml\",\n        \"srx\"\n    ],\n    [\n        \"application/srgs\",\n        \"gram\"\n    ],\n    [\n        \"application/srgs+xml\",\n        \"grxml\"\n    ],\n    [\n        \"application/sru+xml\",\n        \"sru\"\n    ],\n    [\n        \"application/ssml+xml\",\n        \"ssml\"\n    ],\n    [\n        \"application/step\",\n        [\n            \"step\",\n            \"stp\"\n        ]\n    ],\n    [\n        \"application/streamingmedia\",\n        \"ssm\"\n    ],\n    [\n        \"application/tei+xml\",\n        \"tei\"\n    ],\n    [\n        \"application/thraud+xml\",\n        \"tfi\"\n    ],\n    [\n        \"application/timestamped-data\",\n        \"tsd\"\n    ],\n    [\n        \"application/toolbook\",\n        \"tbk\"\n    ],\n    [\n        \"application/vda\",\n        \"vda\"\n    ],\n    [\n        \"application/vnd.3gpp.pic-bw-large\",\n        \"plb\"\n    ],\n    [\n        \"application/vnd.3gpp.pic-bw-small\",\n        \"psb\"\n    ],\n    [\n        \"application/vnd.3gpp.pic-bw-var\",\n        \"pvb\"\n    ],\n    [\n        \"application/vnd.3gpp2.tcap\",\n        \"tcap\"\n    ],\n    [\n        \"application/vnd.3m.post-it-notes\",\n        \"pwn\"\n    ],\n    [\n        \"application/vnd.accpac.simply.aso\",\n        \"aso\"\n    ],\n    [\n        \"application/vnd.accpac.simply.imp\",\n        \"imp\"\n    ],\n    [\n        \"application/vnd.acucobol\",\n        \"acu\"\n    ],\n    [\n        \"application/vnd.acucorp\",\n        \"atc\"\n    ],\n    [\n        \"application/vnd.adobe.air-application-installer-package+zip\",\n        \"air\"\n    ],\n    [\n        \"application/vnd.adobe.fxp\",\n        \"fxp\"\n    ],\n    [\n        \"application/vnd.adobe.xdp+xml\",\n        \"xdp\"\n    ],\n    [\n        \"application/vnd.adobe.xfdf\",\n        \"xfdf\"\n    ],\n    [\n        \"application/vnd.ahead.space\",\n        \"ahead\"\n    ],\n    [\n        \"application/vnd.airzip.filesecure.azf\",\n        \"azf\"\n    ],\n    [\n        \"application/vnd.airzip.filesecure.azs\",\n        \"azs\"\n    ],\n    [\n        \"application/vnd.amazon.ebook\",\n        \"azw\"\n    ],\n    [\n        \"application/vnd.americandynamics.acc\",\n        \"acc\"\n    ],\n    [\n        \"application/vnd.amiga.ami\",\n        \"ami\"\n    ],\n    [\n        \"application/vnd.android.package-archive\",\n        \"apk\"\n    ],\n    [\n        \"application/vnd.anser-web-certificate-issue-initiation\",\n        \"cii\"\n    ],\n    [\n        \"application/vnd.anser-web-funds-transfer-initiation\",\n        \"fti\"\n    ],\n    [\n        \"application/vnd.antix.game-component\",\n        \"atx\"\n    ],\n    [\n        \"application/vnd.apple.installer+xml\",\n        \"mpkg\"\n    ],\n    [\n        \"application/vnd.apple.mpegurl\",\n        \"m3u8\"\n    ],\n    [\n        \"application/vnd.aristanetworks.swi\",\n        \"swi\"\n    ],\n    [\n        \"application/vnd.audiograph\",\n        \"aep\"\n    ],\n    [\n        \"application/vnd.blueice.multipass\",\n        \"mpm\"\n    ],\n    [\n        \"application/vnd.bmi\",\n        \"bmi\"\n    ],\n    [\n        \"application/vnd.businessobjects\",\n        \"rep\"\n    ],\n    [\n        \"application/vnd.chemdraw+xml\",\n        \"cdxml\"\n    ],\n    [\n        \"application/vnd.chipnuts.karaoke-mmd\",\n        \"mmd\"\n    ],\n    [\n        \"application/vnd.cinderella\",\n        \"cdy\"\n    ],\n    [\n        \"application/vnd.claymore\",\n        \"cla\"\n    ],\n    [\n        \"application/vnd.cloanto.rp9\",\n        \"rp9\"\n    ],\n    [\n        \"application/vnd.clonk.c4group\",\n        \"c4g\"\n    ],\n    [\n        \"application/vnd.cluetrust.cartomobile-config\",\n        \"c11amc\"\n    ],\n    [\n        \"application/vnd.cluetrust.cartomobile-config-pkg\",\n        \"c11amz\"\n    ],\n    [\n        \"application/vnd.commonspace\",\n        \"csp\"\n    ],\n    [\n        \"application/vnd.contact.cmsg\",\n        \"cdbcmsg\"\n    ],\n    [\n        \"application/vnd.cosmocaller\",\n        \"cmc\"\n    ],\n    [\n        \"application/vnd.crick.clicker\",\n        \"clkx\"\n    ],\n    [\n        \"application/vnd.crick.clicker.keyboard\",\n        \"clkk\"\n    ],\n    [\n        \"application/vnd.crick.clicker.palette\",\n        \"clkp\"\n    ],\n    [\n        \"application/vnd.crick.clicker.template\",\n        \"clkt\"\n    ],\n    [\n        \"application/vnd.crick.clicker.wordbank\",\n        \"clkw\"\n    ],\n    [\n        \"application/vnd.criticaltools.wbs+xml\",\n        \"wbs\"\n    ],\n    [\n        \"application/vnd.ctc-posml\",\n        \"pml\"\n    ],\n    [\n        \"application/vnd.cups-ppd\",\n        \"ppd\"\n    ],\n    [\n        \"application/vnd.curl.car\",\n        \"car\"\n    ],\n    [\n        \"application/vnd.curl.pcurl\",\n        \"pcurl\"\n    ],\n    [\n        \"application/vnd.data-vision.rdz\",\n        \"rdz\"\n    ],\n    [\n        \"application/vnd.denovo.fcselayout-link\",\n        \"fe_launch\"\n    ],\n    [\n        \"application/vnd.dna\",\n        \"dna\"\n    ],\n    [\n        \"application/vnd.dolby.mlp\",\n        \"mlp\"\n    ],\n    [\n        \"application/vnd.dpgraph\",\n        \"dpg\"\n    ],\n    [\n        \"application/vnd.dreamfactory\",\n        \"dfac\"\n    ],\n    [\n        \"application/vnd.dvb.ait\",\n        \"ait\"\n    ],\n    [\n        \"application/vnd.dvb.service\",\n        \"svc\"\n    ],\n    [\n        \"application/vnd.dynageo\",\n        \"geo\"\n    ],\n    [\n        \"application/vnd.ecowin.chart\",\n        \"mag\"\n    ],\n    [\n        \"application/vnd.enliven\",\n        \"nml\"\n    ],\n    [\n        \"application/vnd.epson.esf\",\n        \"esf\"\n    ],\n    [\n        \"application/vnd.epson.msf\",\n        \"msf\"\n    ],\n    [\n        \"application/vnd.epson.quickanime\",\n        \"qam\"\n    ],\n    [\n        \"application/vnd.epson.salt\",\n        \"slt\"\n    ],\n    [\n        \"application/vnd.epson.ssf\",\n        \"ssf\"\n    ],\n    [\n        \"application/vnd.eszigno3+xml\",\n        \"es3\"\n    ],\n    [\n        \"application/vnd.ezpix-album\",\n        \"ez2\"\n    ],\n    [\n        \"application/vnd.ezpix-package\",\n        \"ez3\"\n    ],\n    [\n        \"application/vnd.fdf\",\n        \"fdf\"\n    ],\n    [\n        \"application/vnd.fdsn.seed\",\n        \"seed\"\n    ],\n    [\n        \"application/vnd.flographit\",\n        \"gph\"\n    ],\n    [\n        \"application/vnd.fluxtime.clip\",\n        \"ftc\"\n    ],\n    [\n        \"application/vnd.framemaker\",\n        \"fm\"\n    ],\n    [\n        \"application/vnd.frogans.fnc\",\n        \"fnc\"\n    ],\n    [\n        \"application/vnd.frogans.ltf\",\n        \"ltf\"\n    ],\n    [\n        \"application/vnd.fsc.weblaunch\",\n        \"fsc\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasys\",\n        \"oas\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasys2\",\n        \"oa2\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasys3\",\n        \"oa3\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasysgp\",\n        \"fg5\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasysprs\",\n        \"bh2\"\n    ],\n    [\n        \"application/vnd.fujixerox.ddd\",\n        \"ddd\"\n    ],\n    [\n        \"application/vnd.fujixerox.docuworks\",\n        \"xdw\"\n    ],\n    [\n        \"application/vnd.fujixerox.docuworks.binder\",\n        \"xbd\"\n    ],\n    [\n        \"application/vnd.fuzzysheet\",\n        \"fzs\"\n    ],\n    [\n        \"application/vnd.genomatix.tuxedo\",\n        \"txd\"\n    ],\n    [\n        \"application/vnd.geogebra.file\",\n        \"ggb\"\n    ],\n    [\n        \"application/vnd.geogebra.tool\",\n        \"ggt\"\n    ],\n    [\n        \"application/vnd.geometry-explorer\",\n        \"gex\"\n    ],\n    [\n        \"application/vnd.geonext\",\n        \"gxt\"\n    ],\n    [\n        \"application/vnd.geoplan\",\n        \"g2w\"\n    ],\n    [\n        \"application/vnd.geospace\",\n        \"g3w\"\n    ],\n    [\n        \"application/vnd.gmx\",\n        \"gmx\"\n    ],\n    [\n        \"application/vnd.google-earth.kml+xml\",\n        \"kml\"\n    ],\n    [\n        \"application/vnd.google-earth.kmz\",\n        \"kmz\"\n    ],\n    [\n        \"application/vnd.grafeq\",\n        \"gqf\"\n    ],\n    [\n        \"application/vnd.groove-account\",\n        \"gac\"\n    ],\n    [\n        \"application/vnd.groove-help\",\n        \"ghf\"\n    ],\n    [\n        \"application/vnd.groove-identity-message\",\n        \"gim\"\n    ],\n    [\n        \"application/vnd.groove-injector\",\n        \"grv\"\n    ],\n    [\n        \"application/vnd.groove-tool-message\",\n        \"gtm\"\n    ],\n    [\n        \"application/vnd.groove-tool-template\",\n        \"tpl\"\n    ],\n    [\n        \"application/vnd.groove-vcard\",\n        \"vcg\"\n    ],\n    [\n        \"application/vnd.hal+xml\",\n        \"hal\"\n    ],\n    [\n        \"application/vnd.handheld-entertainment+xml\",\n        \"zmm\"\n    ],\n    [\n        \"application/vnd.hbci\",\n        \"hbci\"\n    ],\n    [\n        \"application/vnd.hhe.lesson-player\",\n        \"les\"\n    ],\n    [\n        \"application/vnd.hp-hpgl\",\n        [\n            \"hgl\",\n            \"hpg\",\n            \"hpgl\"\n        ]\n    ],\n    [\n        \"application/vnd.hp-hpid\",\n        \"hpid\"\n    ],\n    [\n        \"application/vnd.hp-hps\",\n        \"hps\"\n    ],\n    [\n        \"application/vnd.hp-jlyt\",\n        \"jlt\"\n    ],\n    [\n        \"application/vnd.hp-pcl\",\n        \"pcl\"\n    ],\n    [\n        \"application/vnd.hp-pclxl\",\n        \"pclxl\"\n    ],\n    [\n        \"application/vnd.hydrostatix.sof-data\",\n        \"sfd-hdstx\"\n    ],\n    [\n        \"application/vnd.hzn-3d-crossword\",\n        \"x3d\"\n    ],\n    [\n        \"application/vnd.ibm.minipay\",\n        \"mpy\"\n    ],\n    [\n        \"application/vnd.ibm.modcap\",\n        \"afp\"\n    ],\n    [\n        \"application/vnd.ibm.rights-management\",\n        \"irm\"\n    ],\n    [\n        \"application/vnd.ibm.secure-container\",\n        \"sc\"\n    ],\n    [\n        \"application/vnd.iccprofile\",\n        \"icc\"\n    ],\n    [\n        \"application/vnd.igloader\",\n        \"igl\"\n    ],\n    [\n        \"application/vnd.immervision-ivp\",\n        \"ivp\"\n    ],\n    [\n        \"application/vnd.immervision-ivu\",\n        \"ivu\"\n    ],\n    [\n        \"application/vnd.insors.igm\",\n        \"igm\"\n    ],\n    [\n        \"application/vnd.intercon.formnet\",\n        \"xpw\"\n    ],\n    [\n        \"application/vnd.intergeo\",\n        \"i2g\"\n    ],\n    [\n        \"application/vnd.intu.qbo\",\n        \"qbo\"\n    ],\n    [\n        \"application/vnd.intu.qfx\",\n        \"qfx\"\n    ],\n    [\n        \"application/vnd.ipunplugged.rcprofile\",\n        \"rcprofile\"\n    ],\n    [\n        \"application/vnd.irepository.package+xml\",\n        \"irp\"\n    ],\n    [\n        \"application/vnd.is-xpr\",\n        \"xpr\"\n    ],\n    [\n        \"application/vnd.isac.fcs\",\n        \"fcs\"\n    ],\n    [\n        \"application/vnd.jam\",\n        \"jam\"\n    ],\n    [\n        \"application/vnd.jcp.javame.midlet-rms\",\n        \"rms\"\n    ],\n    [\n        \"application/vnd.jisp\",\n        \"jisp\"\n    ],\n    [\n        \"application/vnd.joost.joda-archive\",\n        \"joda\"\n    ],\n    [\n        \"application/vnd.kahootz\",\n        \"ktz\"\n    ],\n    [\n        \"application/vnd.kde.karbon\",\n        \"karbon\"\n    ],\n    [\n        \"application/vnd.kde.kchart\",\n        \"chrt\"\n    ],\n    [\n        \"application/vnd.kde.kformula\",\n        \"kfo\"\n    ],\n    [\n        \"application/vnd.kde.kivio\",\n        \"flw\"\n    ],\n    [\n        \"application/vnd.kde.kontour\",\n        \"kon\"\n    ],\n    [\n        \"application/vnd.kde.kpresenter\",\n        \"kpr\"\n    ],\n    [\n        \"application/vnd.kde.kspread\",\n        \"ksp\"\n    ],\n    [\n        \"application/vnd.kde.kword\",\n        \"kwd\"\n    ],\n    [\n        \"application/vnd.kenameaapp\",\n        \"htke\"\n    ],\n    [\n        \"application/vnd.kidspiration\",\n        \"kia\"\n    ],\n    [\n        \"application/vnd.kinar\",\n        \"kne\"\n    ],\n    [\n        \"application/vnd.koan\",\n        \"skp\"\n    ],\n    [\n        \"application/vnd.kodak-descriptor\",\n        \"sse\"\n    ],\n    [\n        \"application/vnd.las.las+xml\",\n        \"lasxml\"\n    ],\n    [\n        \"application/vnd.llamagraphics.life-balance.desktop\",\n        \"lbd\"\n    ],\n    [\n        \"application/vnd.llamagraphics.life-balance.exchange+xml\",\n        \"lbe\"\n    ],\n    [\n        \"application/vnd.lotus-1-2-3\",\n        \"123\"\n    ],\n    [\n        \"application/vnd.lotus-approach\",\n        \"apr\"\n    ],\n    [\n        \"application/vnd.lotus-freelance\",\n        \"pre\"\n    ],\n    [\n        \"application/vnd.lotus-notes\",\n        \"nsf\"\n    ],\n    [\n        \"application/vnd.lotus-organizer\",\n        \"org\"\n    ],\n    [\n        \"application/vnd.lotus-screencam\",\n        \"scm\"\n    ],\n    [\n        \"application/vnd.lotus-wordpro\",\n        \"lwp\"\n    ],\n    [\n        \"application/vnd.macports.portpkg\",\n        \"portpkg\"\n    ],\n    [\n        \"application/vnd.mcd\",\n        \"mcd\"\n    ],\n    [\n        \"application/vnd.medcalcdata\",\n        \"mc1\"\n    ],\n    [\n        \"application/vnd.mediastation.cdkey\",\n        \"cdkey\"\n    ],\n    [\n        \"application/vnd.mfer\",\n        \"mwf\"\n    ],\n    [\n        \"application/vnd.mfmp\",\n        \"mfm\"\n    ],\n    [\n        \"application/vnd.micrografx.flo\",\n        \"flo\"\n    ],\n    [\n        \"application/vnd.micrografx.igx\",\n        \"igx\"\n    ],\n    [\n        \"application/vnd.mif\",\n        \"mif\"\n    ],\n    [\n        \"application/vnd.mobius.daf\",\n        \"daf\"\n    ],\n    [\n        \"application/vnd.mobius.dis\",\n        \"dis\"\n    ],\n    [\n        \"application/vnd.mobius.mbk\",\n        \"mbk\"\n    ],\n    [\n        \"application/vnd.mobius.mqy\",\n        \"mqy\"\n    ],\n    [\n        \"application/vnd.mobius.msl\",\n        \"msl\"\n    ],\n    [\n        \"application/vnd.mobius.plc\",\n        \"plc\"\n    ],\n    [\n        \"application/vnd.mobius.txf\",\n        \"txf\"\n    ],\n    [\n        \"application/vnd.mophun.application\",\n        \"mpn\"\n    ],\n    [\n        \"application/vnd.mophun.certificate\",\n        \"mpc\"\n    ],\n    [\n        \"application/vnd.mozilla.xul+xml\",\n        \"xul\"\n    ],\n    [\n        \"application/vnd.ms-artgalry\",\n        \"cil\"\n    ],\n    [\n        \"application/vnd.ms-cab-compressed\",\n        \"cab\"\n    ],\n    [\n        \"application/vnd.ms-excel\",\n        [\n            \"xls\",\n            \"xla\",\n            \"xlc\",\n            \"xlm\",\n            \"xlt\",\n            \"xlw\",\n            \"xlb\",\n            \"xll\"\n        ]\n    ],\n    [\n        \"application/vnd.ms-excel.addin.macroenabled.12\",\n        \"xlam\"\n    ],\n    [\n        \"application/vnd.ms-excel.sheet.binary.macroenabled.12\",\n        \"xlsb\"\n    ],\n    [\n        \"application/vnd.ms-excel.sheet.macroenabled.12\",\n        \"xlsm\"\n    ],\n    [\n        \"application/vnd.ms-excel.template.macroenabled.12\",\n        \"xltm\"\n    ],\n    [\n        \"application/vnd.ms-fontobject\",\n        \"eot\"\n    ],\n    [\n        \"application/vnd.ms-htmlhelp\",\n        \"chm\"\n    ],\n    [\n        \"application/vnd.ms-ims\",\n        \"ims\"\n    ],\n    [\n        \"application/vnd.ms-lrm\",\n        \"lrm\"\n    ],\n    [\n        \"application/vnd.ms-officetheme\",\n        \"thmx\"\n    ],\n    [\n        \"application/vnd.ms-outlook\",\n        \"msg\"\n    ],\n    [\n        \"application/vnd.ms-pki.certstore\",\n        \"sst\"\n    ],\n    [\n        \"application/vnd.ms-pki.pko\",\n        \"pko\"\n    ],\n    [\n        \"application/vnd.ms-pki.seccat\",\n        \"cat\"\n    ],\n    [\n        \"application/vnd.ms-pki.stl\",\n        \"stl\"\n    ],\n    [\n        \"application/vnd.ms-pkicertstore\",\n        \"sst\"\n    ],\n    [\n        \"application/vnd.ms-pkiseccat\",\n        \"cat\"\n    ],\n    [\n        \"application/vnd.ms-pkistl\",\n        \"stl\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint\",\n        [\n            \"ppt\",\n            \"pot\",\n            \"pps\",\n            \"ppa\",\n            \"pwz\"\n        ]\n    ],\n    [\n        \"application/vnd.ms-powerpoint.addin.macroenabled.12\",\n        \"ppam\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.presentation.macroenabled.12\",\n        \"pptm\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.slide.macroenabled.12\",\n        \"sldm\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\",\n        \"ppsm\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.template.macroenabled.12\",\n        \"potm\"\n    ],\n    [\n        \"application/vnd.ms-project\",\n        \"mpp\"\n    ],\n    [\n        \"application/vnd.ms-word.document.macroenabled.12\",\n        \"docm\"\n    ],\n    [\n        \"application/vnd.ms-word.template.macroenabled.12\",\n        \"dotm\"\n    ],\n    [\n        \"application/vnd.ms-works\",\n        [\n            \"wks\",\n            \"wcm\",\n            \"wdb\",\n            \"wps\"\n        ]\n    ],\n    [\n        \"application/vnd.ms-wpl\",\n        \"wpl\"\n    ],\n    [\n        \"application/vnd.ms-xpsdocument\",\n        \"xps\"\n    ],\n    [\n        \"application/vnd.mseq\",\n        \"mseq\"\n    ],\n    [\n        \"application/vnd.musician\",\n        \"mus\"\n    ],\n    [\n        \"application/vnd.muvee.style\",\n        \"msty\"\n    ],\n    [\n        \"application/vnd.neurolanguage.nlu\",\n        \"nlu\"\n    ],\n    [\n        \"application/vnd.noblenet-directory\",\n        \"nnd\"\n    ],\n    [\n        \"application/vnd.noblenet-sealer\",\n        \"nns\"\n    ],\n    [\n        \"application/vnd.noblenet-web\",\n        \"nnw\"\n    ],\n    [\n        \"application/vnd.nokia.configuration-message\",\n        \"ncm\"\n    ],\n    [\n        \"application/vnd.nokia.n-gage.data\",\n        \"ngdat\"\n    ],\n    [\n        \"application/vnd.nokia.n-gage.symbian.install\",\n        \"n-gage\"\n    ],\n    [\n        \"application/vnd.nokia.radio-preset\",\n        \"rpst\"\n    ],\n    [\n        \"application/vnd.nokia.radio-presets\",\n        \"rpss\"\n    ],\n    [\n        \"application/vnd.nokia.ringing-tone\",\n        \"rng\"\n    ],\n    [\n        \"application/vnd.novadigm.edm\",\n        \"edm\"\n    ],\n    [\n        \"application/vnd.novadigm.edx\",\n        \"edx\"\n    ],\n    [\n        \"application/vnd.novadigm.ext\",\n        \"ext\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.chart\",\n        \"odc\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.chart-template\",\n        \"otc\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.database\",\n        \"odb\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.formula\",\n        \"odf\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.formula-template\",\n        \"odft\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.graphics\",\n        \"odg\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.graphics-template\",\n        \"otg\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.image\",\n        \"odi\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.image-template\",\n        \"oti\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.presentation\",\n        \"odp\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.presentation-template\",\n        \"otp\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.spreadsheet\",\n        \"ods\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.spreadsheet-template\",\n        \"ots\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text\",\n        \"odt\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text-master\",\n        \"odm\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text-template\",\n        \"ott\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text-web\",\n        \"oth\"\n    ],\n    [\n        \"application/vnd.olpc-sugar\",\n        \"xo\"\n    ],\n    [\n        \"application/vnd.oma.dd2+xml\",\n        \"dd2\"\n    ],\n    [\n        \"application/vnd.openofficeorg.extension\",\n        \"oxt\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n        \"pptx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.slide\",\n        \"sldx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\",\n        \"ppsx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.template\",\n        \"potx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        \"xlsx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\",\n        \"xltx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        \"docx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\",\n        \"dotx\"\n    ],\n    [\n        \"application/vnd.osgeo.mapguide.package\",\n        \"mgp\"\n    ],\n    [\n        \"application/vnd.osgi.dp\",\n        \"dp\"\n    ],\n    [\n        \"application/vnd.palm\",\n        \"pdb\"\n    ],\n    [\n        \"application/vnd.pawaafile\",\n        \"paw\"\n    ],\n    [\n        \"application/vnd.pg.format\",\n        \"str\"\n    ],\n    [\n        \"application/vnd.pg.osasli\",\n        \"ei6\"\n    ],\n    [\n        \"application/vnd.picsel\",\n        \"efif\"\n    ],\n    [\n        \"application/vnd.pmi.widget\",\n        \"wg\"\n    ],\n    [\n        \"application/vnd.pocketlearn\",\n        \"plf\"\n    ],\n    [\n        \"application/vnd.powerbuilder6\",\n        \"pbd\"\n    ],\n    [\n        \"application/vnd.previewsystems.box\",\n        \"box\"\n    ],\n    [\n        \"application/vnd.proteus.magazine\",\n        \"mgz\"\n    ],\n    [\n        \"application/vnd.publishare-delta-tree\",\n        \"qps\"\n    ],\n    [\n        \"application/vnd.pvi.ptid1\",\n        \"ptid\"\n    ],\n    [\n        \"application/vnd.quark.quarkxpress\",\n        \"qxd\"\n    ],\n    [\n        \"application/vnd.realvnc.bed\",\n        \"bed\"\n    ],\n    [\n        \"application/vnd.recordare.musicxml\",\n        \"mxl\"\n    ],\n    [\n        \"application/vnd.recordare.musicxml+xml\",\n        \"musicxml\"\n    ],\n    [\n        \"application/vnd.rig.cryptonote\",\n        \"cryptonote\"\n    ],\n    [\n        \"application/vnd.rim.cod\",\n        \"cod\"\n    ],\n    [\n        \"application/vnd.rn-realmedia\",\n        \"rm\"\n    ],\n    [\n        \"application/vnd.rn-realplayer\",\n        \"rnx\"\n    ],\n    [\n        \"application/vnd.route66.link66+xml\",\n        \"link66\"\n    ],\n    [\n        \"application/vnd.sailingtracker.track\",\n        \"st\"\n    ],\n    [\n        \"application/vnd.seemail\",\n        \"see\"\n    ],\n    [\n        \"application/vnd.sema\",\n        \"sema\"\n    ],\n    [\n        \"application/vnd.semd\",\n        \"semd\"\n    ],\n    [\n        \"application/vnd.semf\",\n        \"semf\"\n    ],\n    [\n        \"application/vnd.shana.informed.formdata\",\n        \"ifm\"\n    ],\n    [\n        \"application/vnd.shana.informed.formtemplate\",\n        \"itp\"\n    ],\n    [\n        \"application/vnd.shana.informed.interchange\",\n        \"iif\"\n    ],\n    [\n        \"application/vnd.shana.informed.package\",\n        \"ipk\"\n    ],\n    [\n        \"application/vnd.simtech-mindmapper\",\n        \"twd\"\n    ],\n    [\n        \"application/vnd.smaf\",\n        \"mmf\"\n    ],\n    [\n        \"application/vnd.smart.teacher\",\n        \"teacher\"\n    ],\n    [\n        \"application/vnd.solent.sdkm+xml\",\n        \"sdkm\"\n    ],\n    [\n        \"application/vnd.spotfire.dxp\",\n        \"dxp\"\n    ],\n    [\n        \"application/vnd.spotfire.sfs\",\n        \"sfs\"\n    ],\n    [\n        \"application/vnd.stardivision.calc\",\n        \"sdc\"\n    ],\n    [\n        \"application/vnd.stardivision.draw\",\n        \"sda\"\n    ],\n    [\n        \"application/vnd.stardivision.impress\",\n        \"sdd\"\n    ],\n    [\n        \"application/vnd.stardivision.math\",\n        \"smf\"\n    ],\n    [\n        \"application/vnd.stardivision.writer\",\n        \"sdw\"\n    ],\n    [\n        \"application/vnd.stardivision.writer-global\",\n        \"sgl\"\n    ],\n    [\n        \"application/vnd.stepmania.stepchart\",\n        \"sm\"\n    ],\n    [\n        \"application/vnd.sun.xml.calc\",\n        \"sxc\"\n    ],\n    [\n        \"application/vnd.sun.xml.calc.template\",\n        \"stc\"\n    ],\n    [\n        \"application/vnd.sun.xml.draw\",\n        \"sxd\"\n    ],\n    [\n        \"application/vnd.sun.xml.draw.template\",\n        \"std\"\n    ],\n    [\n        \"application/vnd.sun.xml.impress\",\n        \"sxi\"\n    ],\n    [\n        \"application/vnd.sun.xml.impress.template\",\n        \"sti\"\n    ],\n    [\n        \"application/vnd.sun.xml.math\",\n        \"sxm\"\n    ],\n    [\n        \"application/vnd.sun.xml.writer\",\n        \"sxw\"\n    ],\n    [\n        \"application/vnd.sun.xml.writer.global\",\n        \"sxg\"\n    ],\n    [\n        \"application/vnd.sun.xml.writer.template\",\n        \"stw\"\n    ],\n    [\n        \"application/vnd.sus-calendar\",\n        \"sus\"\n    ],\n    [\n        \"application/vnd.svd\",\n        \"svd\"\n    ],\n    [\n        \"application/vnd.symbian.install\",\n        \"sis\"\n    ],\n    [\n        \"application/vnd.syncml+xml\",\n        \"xsm\"\n    ],\n    [\n        \"application/vnd.syncml.dm+wbxml\",\n        \"bdm\"\n    ],\n    [\n        \"application/vnd.syncml.dm+xml\",\n        \"xdm\"\n    ],\n    [\n        \"application/vnd.tao.intent-module-archive\",\n        \"tao\"\n    ],\n    [\n        \"application/vnd.tmobile-livetv\",\n        \"tmo\"\n    ],\n    [\n        \"application/vnd.trid.tpt\",\n        \"tpt\"\n    ],\n    [\n        \"application/vnd.triscape.mxs\",\n        \"mxs\"\n    ],\n    [\n        \"application/vnd.trueapp\",\n        \"tra\"\n    ],\n    [\n        \"application/vnd.ufdl\",\n        \"ufd\"\n    ],\n    [\n        \"application/vnd.uiq.theme\",\n        \"utz\"\n    ],\n    [\n        \"application/vnd.umajin\",\n        \"umj\"\n    ],\n    [\n        \"application/vnd.unity\",\n        \"unityweb\"\n    ],\n    [\n        \"application/vnd.uoml+xml\",\n        \"uoml\"\n    ],\n    [\n        \"application/vnd.vcx\",\n        \"vcx\"\n    ],\n    [\n        \"application/vnd.visio\",\n        \"vsd\"\n    ],\n    [\n        \"application/vnd.visionary\",\n        \"vis\"\n    ],\n    [\n        \"application/vnd.vsf\",\n        \"vsf\"\n    ],\n    [\n        \"application/vnd.wap.wbxml\",\n        \"wbxml\"\n    ],\n    [\n        \"application/vnd.wap.wmlc\",\n        \"wmlc\"\n    ],\n    [\n        \"application/vnd.wap.wmlscriptc\",\n        \"wmlsc\"\n    ],\n    [\n        \"application/vnd.webturbo\",\n        \"wtb\"\n    ],\n    [\n        \"application/vnd.wolfram.player\",\n        \"nbp\"\n    ],\n    [\n        \"application/vnd.wordperfect\",\n        \"wpd\"\n    ],\n    [\n        \"application/vnd.wqd\",\n        \"wqd\"\n    ],\n    [\n        \"application/vnd.wt.stf\",\n        \"stf\"\n    ],\n    [\n        \"application/vnd.xara\",\n        [\n            \"web\",\n            \"xar\"\n        ]\n    ],\n    [\n        \"application/vnd.xfdl\",\n        \"xfdl\"\n    ],\n    [\n        \"application/vnd.yamaha.hv-dic\",\n        \"hvd\"\n    ],\n    [\n        \"application/vnd.yamaha.hv-script\",\n        \"hvs\"\n    ],\n    [\n        \"application/vnd.yamaha.hv-voice\",\n        \"hvp\"\n    ],\n    [\n        \"application/vnd.yamaha.openscoreformat\",\n        \"osf\"\n    ],\n    [\n        \"application/vnd.yamaha.openscoreformat.osfpvg+xml\",\n        \"osfpvg\"\n    ],\n    [\n        \"application/vnd.yamaha.smaf-audio\",\n        \"saf\"\n    ],\n    [\n        \"application/vnd.yamaha.smaf-phrase\",\n        \"spf\"\n    ],\n    [\n        \"application/vnd.yellowriver-custom-menu\",\n        \"cmp\"\n    ],\n    [\n        \"application/vnd.zul\",\n        \"zir\"\n    ],\n    [\n        \"application/vnd.zzazz.deck+xml\",\n        \"zaz\"\n    ],\n    [\n        \"application/vocaltec-media-desc\",\n        \"vmd\"\n    ],\n    [\n        \"application/vocaltec-media-file\",\n        \"vmf\"\n    ],\n    [\n        \"application/voicexml+xml\",\n        \"vxml\"\n    ],\n    [\n        \"application/widget\",\n        \"wgt\"\n    ],\n    [\n        \"application/winhlp\",\n        \"hlp\"\n    ],\n    [\n        \"application/wordperfect\",\n        [\n            \"wp\",\n            \"wp5\",\n            \"wp6\",\n            \"wpd\"\n        ]\n    ],\n    [\n        \"application/wordperfect6.0\",\n        [\n            \"w60\",\n            \"wp5\"\n        ]\n    ],\n    [\n        \"application/wordperfect6.1\",\n        \"w61\"\n    ],\n    [\n        \"application/wsdl+xml\",\n        \"wsdl\"\n    ],\n    [\n        \"application/wspolicy+xml\",\n        \"wspolicy\"\n    ],\n    [\n        \"application/x-123\",\n        \"wk1\"\n    ],\n    [\n        \"application/x-7z-compressed\",\n        \"7z\"\n    ],\n    [\n        \"application/x-abiword\",\n        \"abw\"\n    ],\n    [\n        \"application/x-ace-compressed\",\n        \"ace\"\n    ],\n    [\n        \"application/x-aim\",\n        \"aim\"\n    ],\n    [\n        \"application/x-authorware-bin\",\n        \"aab\"\n    ],\n    [\n        \"application/x-authorware-map\",\n        \"aam\"\n    ],\n    [\n        \"application/x-authorware-seg\",\n        \"aas\"\n    ],\n    [\n        \"application/x-bcpio\",\n        \"bcpio\"\n    ],\n    [\n        \"application/x-binary\",\n        \"bin\"\n    ],\n    [\n        \"application/x-binhex40\",\n        \"hqx\"\n    ],\n    [\n        \"application/x-bittorrent\",\n        \"torrent\"\n    ],\n    [\n        \"application/x-bsh\",\n        [\n            \"bsh\",\n            \"sh\",\n            \"shar\"\n        ]\n    ],\n    [\n        \"application/x-bytecode.elisp\",\n        \"elc\"\n    ],\n    [\n        \"application/x-bytecode.python\",\n        \"pyc\"\n    ],\n    [\n        \"application/x-bzip\",\n        \"bz\"\n    ],\n    [\n        \"application/x-bzip2\",\n        [\n            \"boz\",\n            \"bz2\"\n        ]\n    ],\n    [\n        \"application/x-cdf\",\n        \"cdf\"\n    ],\n    [\n        \"application/x-cdlink\",\n        \"vcd\"\n    ],\n    [\n        \"application/x-chat\",\n        [\n            \"cha\",\n            \"chat\"\n        ]\n    ],\n    [\n        \"application/x-chess-pgn\",\n        \"pgn\"\n    ],\n    [\n        \"application/x-cmu-raster\",\n        \"ras\"\n    ],\n    [\n        \"application/x-cocoa\",\n        \"cco\"\n    ],\n    [\n        \"application/x-compactpro\",\n        \"cpt\"\n    ],\n    [\n        \"application/x-compress\",\n        \"z\"\n    ],\n    [\n        \"application/x-compressed\",\n        [\n            \"tgz\",\n            \"gz\",\n            \"z\",\n            \"zip\"\n        ]\n    ],\n    [\n        \"application/x-conference\",\n        \"nsc\"\n    ],\n    [\n        \"application/x-cpio\",\n        \"cpio\"\n    ],\n    [\n        \"application/x-cpt\",\n        \"cpt\"\n    ],\n    [\n        \"application/x-csh\",\n        \"csh\"\n    ],\n    [\n        \"application/x-debian-package\",\n        \"deb\"\n    ],\n    [\n        \"application/x-deepv\",\n        \"deepv\"\n    ],\n    [\n        \"application/x-director\",\n        [\n            \"dir\",\n            \"dcr\",\n            \"dxr\"\n        ]\n    ],\n    [\n        \"application/x-doom\",\n        \"wad\"\n    ],\n    [\n        \"application/x-dtbncx+xml\",\n        \"ncx\"\n    ],\n    [\n        \"application/x-dtbook+xml\",\n        \"dtb\"\n    ],\n    [\n        \"application/x-dtbresource+xml\",\n        \"res\"\n    ],\n    [\n        \"application/x-dvi\",\n        \"dvi\"\n    ],\n    [\n        \"application/x-elc\",\n        \"elc\"\n    ],\n    [\n        \"application/x-envoy\",\n        [\n            \"env\",\n            \"evy\"\n        ]\n    ],\n    [\n        \"application/x-esrehber\",\n        \"es\"\n    ],\n    [\n        \"application/x-excel\",\n        [\n            \"xls\",\n            \"xla\",\n            \"xlb\",\n            \"xlc\",\n            \"xld\",\n            \"xlk\",\n            \"xll\",\n            \"xlm\",\n            \"xlt\",\n            \"xlv\",\n            \"xlw\"\n        ]\n    ],\n    [\n        \"application/x-font-bdf\",\n        \"bdf\"\n    ],\n    [\n        \"application/x-font-ghostscript\",\n        \"gsf\"\n    ],\n    [\n        \"application/x-font-linux-psf\",\n        \"psf\"\n    ],\n    [\n        \"application/x-font-otf\",\n        \"otf\"\n    ],\n    [\n        \"application/x-font-pcf\",\n        \"pcf\"\n    ],\n    [\n        \"application/x-font-snf\",\n        \"snf\"\n    ],\n    [\n        \"application/x-font-ttf\",\n        \"ttf\"\n    ],\n    [\n        \"application/x-font-type1\",\n        \"pfa\"\n    ],\n    [\n        \"application/x-font-woff\",\n        \"woff\"\n    ],\n    [\n        \"application/x-frame\",\n        \"mif\"\n    ],\n    [\n        \"application/x-freelance\",\n        \"pre\"\n    ],\n    [\n        \"application/x-futuresplash\",\n        \"spl\"\n    ],\n    [\n        \"application/x-gnumeric\",\n        \"gnumeric\"\n    ],\n    [\n        \"application/x-gsp\",\n        \"gsp\"\n    ],\n    [\n        \"application/x-gss\",\n        \"gss\"\n    ],\n    [\n        \"application/x-gtar\",\n        \"gtar\"\n    ],\n    [\n        \"application/x-gzip\",\n        [\n            \"gz\",\n            \"gzip\"\n        ]\n    ],\n    [\n        \"application/x-hdf\",\n        \"hdf\"\n    ],\n    [\n        \"application/x-helpfile\",\n        [\n            \"help\",\n            \"hlp\"\n        ]\n    ],\n    [\n        \"application/x-httpd-imap\",\n        \"imap\"\n    ],\n    [\n        \"application/x-ima\",\n        \"ima\"\n    ],\n    [\n        \"application/x-internet-signup\",\n        [\n            \"ins\",\n            \"isp\"\n        ]\n    ],\n    [\n        \"application/x-internett-signup\",\n        \"ins\"\n    ],\n    [\n        \"application/x-inventor\",\n        \"iv\"\n    ],\n    [\n        \"application/x-ip2\",\n        \"ip\"\n    ],\n    [\n        \"application/x-iphone\",\n        \"iii\"\n    ],\n    [\n        \"application/x-java-class\",\n        \"class\"\n    ],\n    [\n        \"application/x-java-commerce\",\n        \"jcm\"\n    ],\n    [\n        \"application/x-java-jnlp-file\",\n        \"jnlp\"\n    ],\n    [\n        \"application/x-javascript\",\n        \"js\"\n    ],\n    [\n        \"application/x-koan\",\n        [\n            \"skd\",\n            \"skm\",\n            \"skp\",\n            \"skt\"\n        ]\n    ],\n    [\n        \"application/x-ksh\",\n        \"ksh\"\n    ],\n    [\n        \"application/x-latex\",\n        [\n            \"latex\",\n            \"ltx\"\n        ]\n    ],\n    [\n        \"application/x-lha\",\n        \"lha\"\n    ],\n    [\n        \"application/x-lisp\",\n        \"lsp\"\n    ],\n    [\n        \"application/x-livescreen\",\n        \"ivy\"\n    ],\n    [\n        \"application/x-lotus\",\n        \"wq1\"\n    ],\n    [\n        \"application/x-lotusscreencam\",\n        \"scm\"\n    ],\n    [\n        \"application/x-lzh\",\n        \"lzh\"\n    ],\n    [\n        \"application/x-lzx\",\n        \"lzx\"\n    ],\n    [\n        \"application/x-mac-binhex40\",\n        \"hqx\"\n    ],\n    [\n        \"application/x-macbinary\",\n        \"bin\"\n    ],\n    [\n        \"application/x-magic-cap-package-1.0\",\n        \"mc$\"\n    ],\n    [\n        \"application/x-mathcad\",\n        \"mcd\"\n    ],\n    [\n        \"application/x-meme\",\n        \"mm\"\n    ],\n    [\n        \"application/x-midi\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"application/x-mif\",\n        \"mif\"\n    ],\n    [\n        \"application/x-mix-transfer\",\n        \"nix\"\n    ],\n    [\n        \"application/x-mobipocket-ebook\",\n        \"prc\"\n    ],\n    [\n        \"application/x-mplayer2\",\n        \"asx\"\n    ],\n    [\n        \"application/x-ms-application\",\n        \"application\"\n    ],\n    [\n        \"application/x-ms-wmd\",\n        \"wmd\"\n    ],\n    [\n        \"application/x-ms-wmz\",\n        \"wmz\"\n    ],\n    [\n        \"application/x-ms-xbap\",\n        \"xbap\"\n    ],\n    [\n        \"application/x-msaccess\",\n        \"mdb\"\n    ],\n    [\n        \"application/x-msbinder\",\n        \"obd\"\n    ],\n    [\n        \"application/x-mscardfile\",\n        \"crd\"\n    ],\n    [\n        \"application/x-msclip\",\n        \"clp\"\n    ],\n    [\n        \"application/x-msdownload\",\n        [\n            \"exe\",\n            \"dll\"\n        ]\n    ],\n    [\n        \"application/x-msexcel\",\n        [\n            \"xls\",\n            \"xla\",\n            \"xlw\"\n        ]\n    ],\n    [\n        \"application/x-msmediaview\",\n        [\n            \"mvb\",\n            \"m13\",\n            \"m14\"\n        ]\n    ],\n    [\n        \"application/x-msmetafile\",\n        \"wmf\"\n    ],\n    [\n        \"application/x-msmoney\",\n        \"mny\"\n    ],\n    [\n        \"application/x-mspowerpoint\",\n        \"ppt\"\n    ],\n    [\n        \"application/x-mspublisher\",\n        \"pub\"\n    ],\n    [\n        \"application/x-msschedule\",\n        \"scd\"\n    ],\n    [\n        \"application/x-msterminal\",\n        \"trm\"\n    ],\n    [\n        \"application/x-mswrite\",\n        \"wri\"\n    ],\n    [\n        \"application/x-navi-animation\",\n        \"ani\"\n    ],\n    [\n        \"application/x-navidoc\",\n        \"nvd\"\n    ],\n    [\n        \"application/x-navimap\",\n        \"map\"\n    ],\n    [\n        \"application/x-navistyle\",\n        \"stl\"\n    ],\n    [\n        \"application/x-netcdf\",\n        [\n            \"cdf\",\n            \"nc\"\n        ]\n    ],\n    [\n        \"application/x-newton-compatible-pkg\",\n        \"pkg\"\n    ],\n    [\n        \"application/x-nokia-9000-communicator-add-on-software\",\n        \"aos\"\n    ],\n    [\n        \"application/x-omc\",\n        \"omc\"\n    ],\n    [\n        \"application/x-omcdatamaker\",\n        \"omcd\"\n    ],\n    [\n        \"application/x-omcregerator\",\n        \"omcr\"\n    ],\n    [\n        \"application/x-pagemaker\",\n        [\n            \"pm4\",\n            \"pm5\"\n        ]\n    ],\n    [\n        \"application/x-pcl\",\n        \"pcl\"\n    ],\n    [\n        \"application/x-perfmon\",\n        [\n            \"pma\",\n            \"pmc\",\n            \"pml\",\n            \"pmr\",\n            \"pmw\"\n        ]\n    ],\n    [\n        \"application/x-pixclscript\",\n        \"plx\"\n    ],\n    [\n        \"application/x-pkcs10\",\n        \"p10\"\n    ],\n    [\n        \"application/x-pkcs12\",\n        [\n            \"p12\",\n            \"pfx\"\n        ]\n    ],\n    [\n        \"application/x-pkcs7-certificates\",\n        [\n            \"p7b\",\n            \"spc\"\n        ]\n    ],\n    [\n        \"application/x-pkcs7-certreqresp\",\n        \"p7r\"\n    ],\n    [\n        \"application/x-pkcs7-mime\",\n        [\n            \"p7m\",\n            \"p7c\"\n        ]\n    ],\n    [\n        \"application/x-pkcs7-signature\",\n        [\n            \"p7s\",\n            \"p7a\"\n        ]\n    ],\n    [\n        \"application/x-pointplus\",\n        \"css\"\n    ],\n    [\n        \"application/x-portable-anymap\",\n        \"pnm\"\n    ],\n    [\n        \"application/x-project\",\n        [\n            \"mpc\",\n            \"mpt\",\n            \"mpv\",\n            \"mpx\"\n        ]\n    ],\n    [\n        \"application/x-qpro\",\n        \"wb1\"\n    ],\n    [\n        \"application/x-rar-compressed\",\n        \"rar\"\n    ],\n    [\n        \"application/x-rtf\",\n        \"rtf\"\n    ],\n    [\n        \"application/x-sdp\",\n        \"sdp\"\n    ],\n    [\n        \"application/x-sea\",\n        \"sea\"\n    ],\n    [\n        \"application/x-seelogo\",\n        \"sl\"\n    ],\n    [\n        \"application/x-sh\",\n        \"sh\"\n    ],\n    [\n        \"application/x-shar\",\n        [\n            \"shar\",\n            \"sh\"\n        ]\n    ],\n    [\n        \"application/x-shockwave-flash\",\n        \"swf\"\n    ],\n    [\n        \"application/x-silverlight-app\",\n        \"xap\"\n    ],\n    [\n        \"application/x-sit\",\n        \"sit\"\n    ],\n    [\n        \"application/x-sprite\",\n        [\n            \"spr\",\n            \"sprite\"\n        ]\n    ],\n    [\n        \"application/x-stuffit\",\n        \"sit\"\n    ],\n    [\n        \"application/x-stuffitx\",\n        \"sitx\"\n    ],\n    [\n        \"application/x-sv4cpio\",\n        \"sv4cpio\"\n    ],\n    [\n        \"application/x-sv4crc\",\n        \"sv4crc\"\n    ],\n    [\n        \"application/x-tar\",\n        \"tar\"\n    ],\n    [\n        \"application/x-tbook\",\n        [\n            \"sbk\",\n            \"tbk\"\n        ]\n    ],\n    [\n        \"application/x-tcl\",\n        \"tcl\"\n    ],\n    [\n        \"application/x-tex\",\n        \"tex\"\n    ],\n    [\n        \"application/x-tex-tfm\",\n        \"tfm\"\n    ],\n    [\n        \"application/x-texinfo\",\n        [\n            \"texi\",\n            \"texinfo\"\n        ]\n    ],\n    [\n        \"application/x-troff\",\n        [\n            \"roff\",\n            \"t\",\n            \"tr\"\n        ]\n    ],\n    [\n        \"application/x-troff-man\",\n        \"man\"\n    ],\n    [\n        \"application/x-troff-me\",\n        \"me\"\n    ],\n    [\n        \"application/x-troff-ms\",\n        \"ms\"\n    ],\n    [\n        \"application/x-troff-msvideo\",\n        \"avi\"\n    ],\n    [\n        \"application/x-ustar\",\n        \"ustar\"\n    ],\n    [\n        \"application/x-visio\",\n        [\n            \"vsd\",\n            \"vst\",\n            \"vsw\"\n        ]\n    ],\n    [\n        \"application/x-vnd.audioexplosion.mzz\",\n        \"mzz\"\n    ],\n    [\n        \"application/x-vnd.ls-xpix\",\n        \"xpix\"\n    ],\n    [\n        \"application/x-vrml\",\n        \"vrml\"\n    ],\n    [\n        \"application/x-wais-source\",\n        [\n            \"src\",\n            \"wsrc\"\n        ]\n    ],\n    [\n        \"application/x-winhelp\",\n        \"hlp\"\n    ],\n    [\n        \"application/x-wintalk\",\n        \"wtk\"\n    ],\n    [\n        \"application/x-world\",\n        [\n            \"wrl\",\n            \"svr\"\n        ]\n    ],\n    [\n        \"application/x-wpwin\",\n        \"wpd\"\n    ],\n    [\n        \"application/x-wri\",\n        \"wri\"\n    ],\n    [\n        \"application/x-x509-ca-cert\",\n        [\n            \"cer\",\n            \"crt\",\n            \"der\"\n        ]\n    ],\n    [\n        \"application/x-x509-user-cert\",\n        \"crt\"\n    ],\n    [\n        \"application/x-xfig\",\n        \"fig\"\n    ],\n    [\n        \"application/x-xpinstall\",\n        \"xpi\"\n    ],\n    [\n        \"application/x-zip-compressed\",\n        \"zip\"\n    ],\n    [\n        \"application/xcap-diff+xml\",\n        \"xdf\"\n    ],\n    [\n        \"application/xenc+xml\",\n        \"xenc\"\n    ],\n    [\n        \"application/xhtml+xml\",\n        \"xhtml\"\n    ],\n    [\n        \"application/xml\",\n        \"xml\"\n    ],\n    [\n        \"application/xml-dtd\",\n        \"dtd\"\n    ],\n    [\n        \"application/xop+xml\",\n        \"xop\"\n    ],\n    [\n        \"application/xslt+xml\",\n        \"xslt\"\n    ],\n    [\n        \"application/xspf+xml\",\n        \"xspf\"\n    ],\n    [\n        \"application/xv+xml\",\n        \"mxml\"\n    ],\n    [\n        \"application/yang\",\n        \"yang\"\n    ],\n    [\n        \"application/yin+xml\",\n        \"yin\"\n    ],\n    [\n        \"application/ynd.ms-pkipko\",\n        \"pko\"\n    ],\n    [\n        \"application/zip\",\n        \"zip\"\n    ],\n    [\n        \"audio/adpcm\",\n        \"adp\"\n    ],\n    [\n        \"audio/aiff\",\n        [\n            \"aiff\",\n            \"aif\",\n            \"aifc\"\n        ]\n    ],\n    [\n        \"audio/basic\",\n        [\n            \"snd\",\n            \"au\"\n        ]\n    ],\n    [\n        \"audio/it\",\n        \"it\"\n    ],\n    [\n        \"audio/make\",\n        [\n            \"funk\",\n            \"my\",\n            \"pfunk\"\n        ]\n    ],\n    [\n        \"audio/make.my.funk\",\n        \"pfunk\"\n    ],\n    [\n        \"audio/mid\",\n        [\n            \"mid\",\n            \"rmi\"\n        ]\n    ],\n    [\n        \"audio/midi\",\n        [\n            \"midi\",\n            \"kar\",\n            \"mid\"\n        ]\n    ],\n    [\n        \"audio/mod\",\n        \"mod\"\n    ],\n    [\n        \"audio/mp4\",\n        \"mp4a\"\n    ],\n    [\n        \"audio/mpeg\",\n        [\n            \"mpga\",\n            \"mp3\",\n            \"m2a\",\n            \"mp2\",\n            \"mpa\",\n            \"mpg\"\n        ]\n    ],\n    [\n        \"audio/mpeg3\",\n        \"mp3\"\n    ],\n    [\n        \"audio/nspaudio\",\n        [\n            \"la\",\n            \"lma\"\n        ]\n    ],\n    [\n        \"audio/ogg\",\n        \"oga\"\n    ],\n    [\n        \"audio/s3m\",\n        \"s3m\"\n    ],\n    [\n        \"audio/tsp-audio\",\n        \"tsi\"\n    ],\n    [\n        \"audio/tsplayer\",\n        \"tsp\"\n    ],\n    [\n        \"audio/vnd.dece.audio\",\n        \"uva\"\n    ],\n    [\n        \"audio/vnd.digital-winds\",\n        \"eol\"\n    ],\n    [\n        \"audio/vnd.dra\",\n        \"dra\"\n    ],\n    [\n        \"audio/vnd.dts\",\n        \"dts\"\n    ],\n    [\n        \"audio/vnd.dts.hd\",\n        \"dtshd\"\n    ],\n    [\n        \"audio/vnd.lucent.voice\",\n        \"lvp\"\n    ],\n    [\n        \"audio/vnd.ms-playready.media.pya\",\n        \"pya\"\n    ],\n    [\n        \"audio/vnd.nuera.ecelp4800\",\n        \"ecelp4800\"\n    ],\n    [\n        \"audio/vnd.nuera.ecelp7470\",\n        \"ecelp7470\"\n    ],\n    [\n        \"audio/vnd.nuera.ecelp9600\",\n        \"ecelp9600\"\n    ],\n    [\n        \"audio/vnd.qcelp\",\n        \"qcp\"\n    ],\n    [\n        \"audio/vnd.rip\",\n        \"rip\"\n    ],\n    [\n        \"audio/voc\",\n        \"voc\"\n    ],\n    [\n        \"audio/voxware\",\n        \"vox\"\n    ],\n    [\n        \"audio/wav\",\n        \"wav\"\n    ],\n    [\n        \"audio/webm\",\n        \"weba\"\n    ],\n    [\n        \"audio/x-aac\",\n        \"aac\"\n    ],\n    [\n        \"audio/x-adpcm\",\n        \"snd\"\n    ],\n    [\n        \"audio/x-aiff\",\n        [\n            \"aiff\",\n            \"aif\",\n            \"aifc\"\n        ]\n    ],\n    [\n        \"audio/x-au\",\n        \"au\"\n    ],\n    [\n        \"audio/x-gsm\",\n        [\n            \"gsd\",\n            \"gsm\"\n        ]\n    ],\n    [\n        \"audio/x-jam\",\n        \"jam\"\n    ],\n    [\n        \"audio/x-liveaudio\",\n        \"lam\"\n    ],\n    [\n        \"audio/x-mid\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"audio/x-midi\",\n        [\n            \"midi\",\n            \"mid\"\n        ]\n    ],\n    [\n        \"audio/x-mod\",\n        \"mod\"\n    ],\n    [\n        \"audio/x-mpeg\",\n        \"mp2\"\n    ],\n    [\n        \"audio/x-mpeg-3\",\n        \"mp3\"\n    ],\n    [\n        \"audio/x-mpegurl\",\n        \"m3u\"\n    ],\n    [\n        \"audio/x-mpequrl\",\n        \"m3u\"\n    ],\n    [\n        \"audio/x-ms-wax\",\n        \"wax\"\n    ],\n    [\n        \"audio/x-ms-wma\",\n        \"wma\"\n    ],\n    [\n        \"audio/x-nspaudio\",\n        [\n            \"la\",\n            \"lma\"\n        ]\n    ],\n    [\n        \"audio/x-pn-realaudio\",\n        [\n            \"ra\",\n            \"ram\",\n            \"rm\",\n            \"rmm\",\n            \"rmp\"\n        ]\n    ],\n    [\n        \"audio/x-pn-realaudio-plugin\",\n        [\n            \"ra\",\n            \"rmp\",\n            \"rpm\"\n        ]\n    ],\n    [\n        \"audio/x-psid\",\n        \"sid\"\n    ],\n    [\n        \"audio/x-realaudio\",\n        \"ra\"\n    ],\n    [\n        \"audio/x-twinvq\",\n        \"vqf\"\n    ],\n    [\n        \"audio/x-twinvq-plugin\",\n        [\n            \"vqe\",\n            \"vql\"\n        ]\n    ],\n    [\n        \"audio/x-vnd.audioexplosion.mjuicemediafile\",\n        \"mjf\"\n    ],\n    [\n        \"audio/x-voc\",\n        \"voc\"\n    ],\n    [\n        \"audio/x-wav\",\n        \"wav\"\n    ],\n    [\n        \"audio/xm\",\n        \"xm\"\n    ],\n    [\n        \"chemical/x-cdx\",\n        \"cdx\"\n    ],\n    [\n        \"chemical/x-cif\",\n        \"cif\"\n    ],\n    [\n        \"chemical/x-cmdf\",\n        \"cmdf\"\n    ],\n    [\n        \"chemical/x-cml\",\n        \"cml\"\n    ],\n    [\n        \"chemical/x-csml\",\n        \"csml\"\n    ],\n    [\n        \"chemical/x-pdb\",\n        [\n            \"pdb\",\n            \"xyz\"\n        ]\n    ],\n    [\n        \"chemical/x-xyz\",\n        \"xyz\"\n    ],\n    [\n        \"drawing/x-dwf\",\n        \"dwf\"\n    ],\n    [\n        \"i-world/i-vrml\",\n        \"ivr\"\n    ],\n    [\n        \"image/bmp\",\n        [\n            \"bmp\",\n            \"bm\"\n        ]\n    ],\n    [\n        \"image/cgm\",\n        \"cgm\"\n    ],\n    [\n        \"image/cis-cod\",\n        \"cod\"\n    ],\n    [\n        \"image/cmu-raster\",\n        [\n            \"ras\",\n            \"rast\"\n        ]\n    ],\n    [\n        \"image/fif\",\n        \"fif\"\n    ],\n    [\n        \"image/florian\",\n        [\n            \"flo\",\n            \"turbot\"\n        ]\n    ],\n    [\n        \"image/g3fax\",\n        \"g3\"\n    ],\n    [\n        \"image/gif\",\n        \"gif\"\n    ],\n    [\n        \"image/ief\",\n        [\n            \"ief\",\n            \"iefs\"\n        ]\n    ],\n    [\n        \"image/jpeg\",\n        [\n            \"jpeg\",\n            \"jpe\",\n            \"jpg\",\n            \"jfif\",\n            \"jfif-tbnl\"\n        ]\n    ],\n    [\n        \"image/jutvision\",\n        \"jut\"\n    ],\n    [\n        \"image/ktx\",\n        \"ktx\"\n    ],\n    [\n        \"image/naplps\",\n        [\n            \"nap\",\n            \"naplps\"\n        ]\n    ],\n    [\n        \"image/pict\",\n        [\n            \"pic\",\n            \"pict\"\n        ]\n    ],\n    [\n        \"image/pipeg\",\n        \"jfif\"\n    ],\n    [\n        \"image/pjpeg\",\n        [\n            \"jfif\",\n            \"jpe\",\n            \"jpeg\",\n            \"jpg\"\n        ]\n    ],\n    [\n        \"image/png\",\n        [\n            \"png\",\n            \"x-png\"\n        ]\n    ],\n    [\n        \"image/prs.btif\",\n        \"btif\"\n    ],\n    [\n        \"image/svg+xml\",\n        \"svg\"\n    ],\n    [\n        \"image/tiff\",\n        [\n            \"tif\",\n            \"tiff\"\n        ]\n    ],\n    [\n        \"image/vasa\",\n        \"mcf\"\n    ],\n    [\n        \"image/vnd.adobe.photoshop\",\n        \"psd\"\n    ],\n    [\n        \"image/vnd.dece.graphic\",\n        \"uvi\"\n    ],\n    [\n        \"image/vnd.djvu\",\n        \"djvu\"\n    ],\n    [\n        \"image/vnd.dvb.subtitle\",\n        \"sub\"\n    ],\n    [\n        \"image/vnd.dwg\",\n        [\n            \"dwg\",\n            \"dxf\",\n            \"svf\"\n        ]\n    ],\n    [\n        \"image/vnd.dxf\",\n        \"dxf\"\n    ],\n    [\n        \"image/vnd.fastbidsheet\",\n        \"fbs\"\n    ],\n    [\n        \"image/vnd.fpx\",\n        \"fpx\"\n    ],\n    [\n        \"image/vnd.fst\",\n        \"fst\"\n    ],\n    [\n        \"image/vnd.fujixerox.edmics-mmr\",\n        \"mmr\"\n    ],\n    [\n        \"image/vnd.fujixerox.edmics-rlc\",\n        \"rlc\"\n    ],\n    [\n        \"image/vnd.ms-modi\",\n        \"mdi\"\n    ],\n    [\n        \"image/vnd.net-fpx\",\n        [\n            \"fpx\",\n            \"npx\"\n        ]\n    ],\n    [\n        \"image/vnd.rn-realflash\",\n        \"rf\"\n    ],\n    [\n        \"image/vnd.rn-realpix\",\n        \"rp\"\n    ],\n    [\n        \"image/vnd.wap.wbmp\",\n        \"wbmp\"\n    ],\n    [\n        \"image/vnd.xiff\",\n        \"xif\"\n    ],\n    [\n        \"image/webp\",\n        \"webp\"\n    ],\n    [\n        \"image/x-cmu-raster\",\n        \"ras\"\n    ],\n    [\n        \"image/x-cmx\",\n        \"cmx\"\n    ],\n    [\n        \"image/x-dwg\",\n        [\n            \"dwg\",\n            \"dxf\",\n            \"svf\"\n        ]\n    ],\n    [\n        \"image/x-freehand\",\n        \"fh\"\n    ],\n    [\n        \"image/x-icon\",\n        \"ico\"\n    ],\n    [\n        \"image/x-jg\",\n        \"art\"\n    ],\n    [\n        \"image/x-jps\",\n        \"jps\"\n    ],\n    [\n        \"image/x-niff\",\n        [\n            \"niff\",\n            \"nif\"\n        ]\n    ],\n    [\n        \"image/x-pcx\",\n        \"pcx\"\n    ],\n    [\n        \"image/x-pict\",\n        [\n            \"pct\",\n            \"pic\"\n        ]\n    ],\n    [\n        \"image/x-portable-anymap\",\n        \"pnm\"\n    ],\n    [\n        \"image/x-portable-bitmap\",\n        \"pbm\"\n    ],\n    [\n        \"image/x-portable-graymap\",\n        \"pgm\"\n    ],\n    [\n        \"image/x-portable-greymap\",\n        \"pgm\"\n    ],\n    [\n        \"image/x-portable-pixmap\",\n        \"ppm\"\n    ],\n    [\n        \"image/x-quicktime\",\n        [\n            \"qif\",\n            \"qti\",\n            \"qtif\"\n        ]\n    ],\n    [\n        \"image/x-rgb\",\n        \"rgb\"\n    ],\n    [\n        \"image/x-tiff\",\n        [\n            \"tif\",\n            \"tiff\"\n        ]\n    ],\n    [\n        \"image/x-windows-bmp\",\n        \"bmp\"\n    ],\n    [\n        \"image/x-xbitmap\",\n        \"xbm\"\n    ],\n    [\n        \"image/x-xbm\",\n        \"xbm\"\n    ],\n    [\n        \"image/x-xpixmap\",\n        [\n            \"xpm\",\n            \"pm\"\n        ]\n    ],\n    [\n        \"image/x-xwd\",\n        \"xwd\"\n    ],\n    [\n        \"image/x-xwindowdump\",\n        \"xwd\"\n    ],\n    [\n        \"image/xbm\",\n        \"xbm\"\n    ],\n    [\n        \"image/xpm\",\n        \"xpm\"\n    ],\n    [\n        \"message/rfc822\",\n        [\n            \"eml\",\n            \"mht\",\n            \"mhtml\",\n            \"nws\",\n            \"mime\"\n        ]\n    ],\n    [\n        \"model/iges\",\n        [\n            \"iges\",\n            \"igs\"\n        ]\n    ],\n    [\n        \"model/mesh\",\n        \"msh\"\n    ],\n    [\n        \"model/vnd.collada+xml\",\n        \"dae\"\n    ],\n    [\n        \"model/vnd.dwf\",\n        \"dwf\"\n    ],\n    [\n        \"model/vnd.gdl\",\n        \"gdl\"\n    ],\n    [\n        \"model/vnd.gtw\",\n        \"gtw\"\n    ],\n    [\n        \"model/vnd.mts\",\n        \"mts\"\n    ],\n    [\n        \"model/vnd.vtu\",\n        \"vtu\"\n    ],\n    [\n        \"model/vrml\",\n        [\n            \"vrml\",\n            \"wrl\",\n            \"wrz\"\n        ]\n    ],\n    [\n        \"model/x-pov\",\n        \"pov\"\n    ],\n    [\n        \"multipart/x-gzip\",\n        \"gzip\"\n    ],\n    [\n        \"multipart/x-ustar\",\n        \"ustar\"\n    ],\n    [\n        \"multipart/x-zip\",\n        \"zip\"\n    ],\n    [\n        \"music/crescendo\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"music/x-karaoke\",\n        \"kar\"\n    ],\n    [\n        \"paleovu/x-pv\",\n        \"pvu\"\n    ],\n    [\n        \"text/asp\",\n        \"asp\"\n    ],\n    [\n        \"text/calendar\",\n        \"ics\"\n    ],\n    [\n        \"text/css\",\n        \"css\"\n    ],\n    [\n        \"text/csv\",\n        \"csv\"\n    ],\n    [\n        \"text/ecmascript\",\n        \"js\"\n    ],\n    [\n        \"text/h323\",\n        \"323\"\n    ],\n    [\n        \"text/html\",\n        [\n            \"html\",\n            \"htm\",\n            \"stm\",\n            \"acgi\",\n            \"htmls\",\n            \"htx\",\n            \"shtml\"\n        ]\n    ],\n    [\n        \"text/iuls\",\n        \"uls\"\n    ],\n    [\n        \"text/javascript\",\n        \"js\"\n    ],\n    [\n        \"text/mcf\",\n        \"mcf\"\n    ],\n    [\n        \"text/n3\",\n        \"n3\"\n    ],\n    [\n        \"text/pascal\",\n        \"pas\"\n    ],\n    [\n        \"text/plain\",\n        [\n            \"txt\",\n            \"bas\",\n            \"c\",\n            \"h\",\n            \"c++\",\n            \"cc\",\n            \"com\",\n            \"conf\",\n            \"cxx\",\n            \"def\",\n            \"f\",\n            \"f90\",\n            \"for\",\n            \"g\",\n            \"hh\",\n            \"idc\",\n            \"jav\",\n            \"java\",\n            \"list\",\n            \"log\",\n            \"lst\",\n            \"m\",\n            \"mar\",\n            \"pl\",\n            \"sdml\",\n            \"text\"\n        ]\n    ],\n    [\n        \"text/plain-bas\",\n        \"par\"\n    ],\n    [\n        \"text/prs.lines.tag\",\n        \"dsc\"\n    ],\n    [\n        \"text/richtext\",\n        [\n            \"rtx\",\n            \"rt\",\n            \"rtf\"\n        ]\n    ],\n    [\n        \"text/scriplet\",\n        \"wsc\"\n    ],\n    [\n        \"text/scriptlet\",\n        \"sct\"\n    ],\n    [\n        \"text/sgml\",\n        [\n            \"sgm\",\n            \"sgml\"\n        ]\n    ],\n    [\n        \"text/tab-separated-values\",\n        \"tsv\"\n    ],\n    [\n        \"text/troff\",\n        \"t\"\n    ],\n    [\n        \"text/turtle\",\n        \"ttl\"\n    ],\n    [\n        \"text/uri-list\",\n        [\n            \"uni\",\n            \"unis\",\n            \"uri\",\n            \"uris\"\n        ]\n    ],\n    [\n        \"text/vnd.abc\",\n        \"abc\"\n    ],\n    [\n        \"text/vnd.curl\",\n        \"curl\"\n    ],\n    [\n        \"text/vnd.curl.dcurl\",\n        \"dcurl\"\n    ],\n    [\n        \"text/vnd.curl.mcurl\",\n        \"mcurl\"\n    ],\n    [\n        \"text/vnd.curl.scurl\",\n        \"scurl\"\n    ],\n    [\n        \"text/vnd.fly\",\n        \"fly\"\n    ],\n    [\n        \"text/vnd.fmi.flexstor\",\n        \"flx\"\n    ],\n    [\n        \"text/vnd.graphviz\",\n        \"gv\"\n    ],\n    [\n        \"text/vnd.in3d.3dml\",\n        \"3dml\"\n    ],\n    [\n        \"text/vnd.in3d.spot\",\n        \"spot\"\n    ],\n    [\n        \"text/vnd.rn-realtext\",\n        \"rt\"\n    ],\n    [\n        \"text/vnd.sun.j2me.app-descriptor\",\n        \"jad\"\n    ],\n    [\n        \"text/vnd.wap.wml\",\n        \"wml\"\n    ],\n    [\n        \"text/vnd.wap.wmlscript\",\n        \"wmls\"\n    ],\n    [\n        \"text/webviewhtml\",\n        \"htt\"\n    ],\n    [\n        \"text/x-asm\",\n        [\n            \"asm\",\n            \"s\"\n        ]\n    ],\n    [\n        \"text/x-audiosoft-intra\",\n        \"aip\"\n    ],\n    [\n        \"text/x-c\",\n        [\n            \"c\",\n            \"cc\",\n            \"cpp\"\n        ]\n    ],\n    [\n        \"text/x-component\",\n        \"htc\"\n    ],\n    [\n        \"text/x-fortran\",\n        [\n            \"for\",\n            \"f\",\n            \"f77\",\n            \"f90\"\n        ]\n    ],\n    [\n        \"text/x-h\",\n        [\n            \"h\",\n            \"hh\"\n        ]\n    ],\n    [\n        \"text/x-java-source\",\n        [\n            \"java\",\n            \"jav\"\n        ]\n    ],\n    [\n        \"text/x-java-source,java\",\n        \"java\"\n    ],\n    [\n        \"text/x-la-asf\",\n        \"lsx\"\n    ],\n    [\n        \"text/x-m\",\n        \"m\"\n    ],\n    [\n        \"text/x-pascal\",\n        \"p\"\n    ],\n    [\n        \"text/x-script\",\n        \"hlb\"\n    ],\n    [\n        \"text/x-script.csh\",\n        \"csh\"\n    ],\n    [\n        \"text/x-script.elisp\",\n        \"el\"\n    ],\n    [\n        \"text/x-script.guile\",\n        \"scm\"\n    ],\n    [\n        \"text/x-script.ksh\",\n        \"ksh\"\n    ],\n    [\n        \"text/x-script.lisp\",\n        \"lsp\"\n    ],\n    [\n        \"text/x-script.perl\",\n        \"pl\"\n    ],\n    [\n        \"text/x-script.perl-module\",\n        \"pm\"\n    ],\n    [\n        \"text/x-script.phyton\",\n        \"py\"\n    ],\n    [\n        \"text/x-script.rexx\",\n        \"rexx\"\n    ],\n    [\n        \"text/x-script.scheme\",\n        \"scm\"\n    ],\n    [\n        \"text/x-script.sh\",\n        \"sh\"\n    ],\n    [\n        \"text/x-script.tcl\",\n        \"tcl\"\n    ],\n    [\n        \"text/x-script.tcsh\",\n        \"tcsh\"\n    ],\n    [\n        \"text/x-script.zsh\",\n        \"zsh\"\n    ],\n    [\n        \"text/x-server-parsed-html\",\n        [\n            \"shtml\",\n            \"ssi\"\n        ]\n    ],\n    [\n        \"text/x-setext\",\n        \"etx\"\n    ],\n    [\n        \"text/x-sgml\",\n        [\n            \"sgm\",\n            \"sgml\"\n        ]\n    ],\n    [\n        \"text/x-speech\",\n        [\n            \"spc\",\n            \"talk\"\n        ]\n    ],\n    [\n        \"text/x-uil\",\n        \"uil\"\n    ],\n    [\n        \"text/x-uuencode\",\n        [\n            \"uu\",\n            \"uue\"\n        ]\n    ],\n    [\n        \"text/x-vcalendar\",\n        \"vcs\"\n    ],\n    [\n        \"text/x-vcard\",\n        \"vcf\"\n    ],\n    [\n        \"text/xml\",\n        \"xml\"\n    ],\n    [\n        \"video/3gpp\",\n        \"3gp\"\n    ],\n    [\n        \"video/3gpp2\",\n        \"3g2\"\n    ],\n    [\n        \"video/animaflex\",\n        \"afl\"\n    ],\n    [\n        \"video/avi\",\n        \"avi\"\n    ],\n    [\n        \"video/avs-video\",\n        \"avs\"\n    ],\n    [\n        \"video/dl\",\n        \"dl\"\n    ],\n    [\n        \"video/fli\",\n        \"fli\"\n    ],\n    [\n        \"video/gl\",\n        \"gl\"\n    ],\n    [\n        \"video/h261\",\n        \"h261\"\n    ],\n    [\n        \"video/h263\",\n        \"h263\"\n    ],\n    [\n        \"video/h264\",\n        \"h264\"\n    ],\n    [\n        \"video/jpeg\",\n        \"jpgv\"\n    ],\n    [\n        \"video/jpm\",\n        \"jpm\"\n    ],\n    [\n        \"video/mj2\",\n        \"mj2\"\n    ],\n    [\n        \"video/mp4\",\n        \"mp4\"\n    ],\n    [\n        \"video/mpeg\",\n        [\n            \"mpeg\",\n            \"mp2\",\n            \"mpa\",\n            \"mpe\",\n            \"mpg\",\n            \"mpv2\",\n            \"m1v\",\n            \"m2v\",\n            \"mp3\"\n        ]\n    ],\n    [\n        \"video/msvideo\",\n        \"avi\"\n    ],\n    [\n        \"video/ogg\",\n        \"ogv\"\n    ],\n    [\n        \"video/quicktime\",\n        [\n            \"mov\",\n            \"qt\",\n            \"moov\"\n        ]\n    ],\n    [\n        \"video/vdo\",\n        \"vdo\"\n    ],\n    [\n        \"video/vivo\",\n        [\n            \"viv\",\n            \"vivo\"\n        ]\n    ],\n    [\n        \"video/vnd.dece.hd\",\n        \"uvh\"\n    ],\n    [\n        \"video/vnd.dece.mobile\",\n        \"uvm\"\n    ],\n    [\n        \"video/vnd.dece.pd\",\n        \"uvp\"\n    ],\n    [\n        \"video/vnd.dece.sd\",\n        \"uvs\"\n    ],\n    [\n        \"video/vnd.dece.video\",\n        \"uvv\"\n    ],\n    [\n        \"video/vnd.fvt\",\n        \"fvt\"\n    ],\n    [\n        \"video/vnd.mpegurl\",\n        \"mxu\"\n    ],\n    [\n        \"video/vnd.ms-playready.media.pyv\",\n        \"pyv\"\n    ],\n    [\n        \"video/vnd.rn-realvideo\",\n        \"rv\"\n    ],\n    [\n        \"video/vnd.uvvu.mp4\",\n        \"uvu\"\n    ],\n    [\n        \"video/vnd.vivo\",\n        [\n            \"viv\",\n            \"vivo\"\n        ]\n    ],\n    [\n        \"video/vosaic\",\n        \"vos\"\n    ],\n    [\n        \"video/webm\",\n        \"webm\"\n    ],\n    [\n        \"video/x-amt-demorun\",\n        \"xdr\"\n    ],\n    [\n        \"video/x-amt-showrun\",\n        \"xsr\"\n    ],\n    [\n        \"video/x-atomic3d-feature\",\n        \"fmf\"\n    ],\n    [\n        \"video/x-dl\",\n        \"dl\"\n    ],\n    [\n        \"video/x-dv\",\n        [\n            \"dif\",\n            \"dv\"\n        ]\n    ],\n    [\n        \"video/x-f4v\",\n        \"f4v\"\n    ],\n    [\n        \"video/x-fli\",\n        \"fli\"\n    ],\n    [\n        \"video/x-flv\",\n        \"flv\"\n    ],\n    [\n        \"video/x-gl\",\n        \"gl\"\n    ],\n    [\n        \"video/x-isvideo\",\n        \"isu\"\n    ],\n    [\n        \"video/x-la-asf\",\n        [\n            \"lsf\",\n            \"lsx\"\n        ]\n    ],\n    [\n        \"video/x-m4v\",\n        \"m4v\"\n    ],\n    [\n        \"video/x-motion-jpeg\",\n        \"mjpg\"\n    ],\n    [\n        \"video/x-mpeg\",\n        [\n            \"mp3\",\n            \"mp2\"\n        ]\n    ],\n    [\n        \"video/x-mpeq2a\",\n        \"mp2\"\n    ],\n    [\n        \"video/x-ms-asf\",\n        [\n            \"asf\",\n            \"asr\",\n            \"asx\"\n        ]\n    ],\n    [\n        \"video/x-ms-asf-plugin\",\n        \"asx\"\n    ],\n    [\n        \"video/x-ms-wm\",\n        \"wm\"\n    ],\n    [\n        \"video/x-ms-wmv\",\n        \"wmv\"\n    ],\n    [\n        \"video/x-ms-wmx\",\n        \"wmx\"\n    ],\n    [\n        \"video/x-ms-wvx\",\n        \"wvx\"\n    ],\n    [\n        \"video/x-msvideo\",\n        \"avi\"\n    ],\n    [\n        \"video/x-qtc\",\n        \"qtc\"\n    ],\n    [\n        \"video/x-scm\",\n        \"scm\"\n    ],\n    [\n        \"video/x-sgi-movie\",\n        [\n            \"movie\",\n            \"mv\"\n        ]\n    ],\n    [\n        \"windows/metafile\",\n        \"wmf\"\n    ],\n    [\n        \"www/mime\",\n        \"mime\"\n    ],\n    [\n        \"x-conference/x-cooltalk\",\n        \"ice\"\n    ],\n    [\n        \"x-music/x-midi\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"x-world/x-3dmf\",\n        [\n            \"3dm\",\n            \"3dmf\",\n            \"qd3\",\n            \"qd3d\"\n        ]\n    ],\n    [\n        \"x-world/x-svr\",\n        \"svr\"\n    ],\n    [\n        \"x-world/x-vrml\",\n        [\n            \"flr\",\n            \"vrml\",\n            \"wrl\",\n            \"wrz\",\n            \"xaf\",\n            \"xof\"\n        ]\n    ],\n    [\n        \"x-world/x-vrt\",\n        \"vrt\"\n    ],\n    [\n        \"xgl/drawing\",\n        \"xgz\"\n    ],\n    [\n        \"xgl/movie\",\n        \"xmz\"\n    ]\n]);\nconst extensions = new Map([\n    [\n        \"123\",\n        \"application/vnd.lotus-1-2-3\"\n    ],\n    [\n        \"323\",\n        \"text/h323\"\n    ],\n    [\n        \"*\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"3dm\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"3dmf\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"3dml\",\n        \"text/vnd.in3d.3dml\"\n    ],\n    [\n        \"3g2\",\n        \"video/3gpp2\"\n    ],\n    [\n        \"3gp\",\n        \"video/3gpp\"\n    ],\n    [\n        \"7z\",\n        \"application/x-7z-compressed\"\n    ],\n    [\n        \"a\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"aab\",\n        \"application/x-authorware-bin\"\n    ],\n    [\n        \"aac\",\n        \"audio/x-aac\"\n    ],\n    [\n        \"aam\",\n        \"application/x-authorware-map\"\n    ],\n    [\n        \"aas\",\n        \"application/x-authorware-seg\"\n    ],\n    [\n        \"abc\",\n        \"text/vnd.abc\"\n    ],\n    [\n        \"abw\",\n        \"application/x-abiword\"\n    ],\n    [\n        \"ac\",\n        \"application/pkix-attr-cert\"\n    ],\n    [\n        \"acc\",\n        \"application/vnd.americandynamics.acc\"\n    ],\n    [\n        \"ace\",\n        \"application/x-ace-compressed\"\n    ],\n    [\n        \"acgi\",\n        \"text/html\"\n    ],\n    [\n        \"acu\",\n        \"application/vnd.acucobol\"\n    ],\n    [\n        \"acx\",\n        \"application/internet-property-stream\"\n    ],\n    [\n        \"adp\",\n        \"audio/adpcm\"\n    ],\n    [\n        \"aep\",\n        \"application/vnd.audiograph\"\n    ],\n    [\n        \"afl\",\n        \"video/animaflex\"\n    ],\n    [\n        \"afp\",\n        \"application/vnd.ibm.modcap\"\n    ],\n    [\n        \"ahead\",\n        \"application/vnd.ahead.space\"\n    ],\n    [\n        \"ai\",\n        \"application/postscript\"\n    ],\n    [\n        \"aif\",\n        [\n            \"audio/aiff\",\n            \"audio/x-aiff\"\n        ]\n    ],\n    [\n        \"aifc\",\n        [\n            \"audio/aiff\",\n            \"audio/x-aiff\"\n        ]\n    ],\n    [\n        \"aiff\",\n        [\n            \"audio/aiff\",\n            \"audio/x-aiff\"\n        ]\n    ],\n    [\n        \"aim\",\n        \"application/x-aim\"\n    ],\n    [\n        \"aip\",\n        \"text/x-audiosoft-intra\"\n    ],\n    [\n        \"air\",\n        \"application/vnd.adobe.air-application-installer-package+zip\"\n    ],\n    [\n        \"ait\",\n        \"application/vnd.dvb.ait\"\n    ],\n    [\n        \"ami\",\n        \"application/vnd.amiga.ami\"\n    ],\n    [\n        \"ani\",\n        \"application/x-navi-animation\"\n    ],\n    [\n        \"aos\",\n        \"application/x-nokia-9000-communicator-add-on-software\"\n    ],\n    [\n        \"apk\",\n        \"application/vnd.android.package-archive\"\n    ],\n    [\n        \"application\",\n        \"application/x-ms-application\"\n    ],\n    [\n        \"apr\",\n        \"application/vnd.lotus-approach\"\n    ],\n    [\n        \"aps\",\n        \"application/mime\"\n    ],\n    [\n        \"arc\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"arj\",\n        [\n            \"application/arj\",\n            \"application/octet-stream\"\n        ]\n    ],\n    [\n        \"art\",\n        \"image/x-jg\"\n    ],\n    [\n        \"asf\",\n        \"video/x-ms-asf\"\n    ],\n    [\n        \"asm\",\n        \"text/x-asm\"\n    ],\n    [\n        \"aso\",\n        \"application/vnd.accpac.simply.aso\"\n    ],\n    [\n        \"asp\",\n        \"text/asp\"\n    ],\n    [\n        \"asr\",\n        \"video/x-ms-asf\"\n    ],\n    [\n        \"asx\",\n        [\n            \"video/x-ms-asf\",\n            \"application/x-mplayer2\",\n            \"video/x-ms-asf-plugin\"\n        ]\n    ],\n    [\n        \"atc\",\n        \"application/vnd.acucorp\"\n    ],\n    [\n        \"atomcat\",\n        \"application/atomcat+xml\"\n    ],\n    [\n        \"atomsvc\",\n        \"application/atomsvc+xml\"\n    ],\n    [\n        \"atx\",\n        \"application/vnd.antix.game-component\"\n    ],\n    [\n        \"au\",\n        [\n            \"audio/basic\",\n            \"audio/x-au\"\n        ]\n    ],\n    [\n        \"avi\",\n        [\n            \"video/avi\",\n            \"video/msvideo\",\n            \"application/x-troff-msvideo\",\n            \"video/x-msvideo\"\n        ]\n    ],\n    [\n        \"avs\",\n        \"video/avs-video\"\n    ],\n    [\n        \"aw\",\n        \"application/applixware\"\n    ],\n    [\n        \"axs\",\n        \"application/olescript\"\n    ],\n    [\n        \"azf\",\n        \"application/vnd.airzip.filesecure.azf\"\n    ],\n    [\n        \"azs\",\n        \"application/vnd.airzip.filesecure.azs\"\n    ],\n    [\n        \"azw\",\n        \"application/vnd.amazon.ebook\"\n    ],\n    [\n        \"bas\",\n        \"text/plain\"\n    ],\n    [\n        \"bcpio\",\n        \"application/x-bcpio\"\n    ],\n    [\n        \"bdf\",\n        \"application/x-font-bdf\"\n    ],\n    [\n        \"bdm\",\n        \"application/vnd.syncml.dm+wbxml\"\n    ],\n    [\n        \"bed\",\n        \"application/vnd.realvnc.bed\"\n    ],\n    [\n        \"bh2\",\n        \"application/vnd.fujitsu.oasysprs\"\n    ],\n    [\n        \"bin\",\n        [\n            \"application/octet-stream\",\n            \"application/mac-binary\",\n            \"application/macbinary\",\n            \"application/x-macbinary\",\n            \"application/x-binary\"\n        ]\n    ],\n    [\n        \"bm\",\n        \"image/bmp\"\n    ],\n    [\n        \"bmi\",\n        \"application/vnd.bmi\"\n    ],\n    [\n        \"bmp\",\n        [\n            \"image/bmp\",\n            \"image/x-windows-bmp\"\n        ]\n    ],\n    [\n        \"boo\",\n        \"application/book\"\n    ],\n    [\n        \"book\",\n        \"application/book\"\n    ],\n    [\n        \"box\",\n        \"application/vnd.previewsystems.box\"\n    ],\n    [\n        \"boz\",\n        \"application/x-bzip2\"\n    ],\n    [\n        \"bsh\",\n        \"application/x-bsh\"\n    ],\n    [\n        \"btif\",\n        \"image/prs.btif\"\n    ],\n    [\n        \"bz\",\n        \"application/x-bzip\"\n    ],\n    [\n        \"bz2\",\n        \"application/x-bzip2\"\n    ],\n    [\n        \"c\",\n        [\n            \"text/plain\",\n            \"text/x-c\"\n        ]\n    ],\n    [\n        \"c++\",\n        \"text/plain\"\n    ],\n    [\n        \"c11amc\",\n        \"application/vnd.cluetrust.cartomobile-config\"\n    ],\n    [\n        \"c11amz\",\n        \"application/vnd.cluetrust.cartomobile-config-pkg\"\n    ],\n    [\n        \"c4g\",\n        \"application/vnd.clonk.c4group\"\n    ],\n    [\n        \"cab\",\n        \"application/vnd.ms-cab-compressed\"\n    ],\n    [\n        \"car\",\n        \"application/vnd.curl.car\"\n    ],\n    [\n        \"cat\",\n        [\n            \"application/vnd.ms-pkiseccat\",\n            \"application/vnd.ms-pki.seccat\"\n        ]\n    ],\n    [\n        \"cc\",\n        [\n            \"text/plain\",\n            \"text/x-c\"\n        ]\n    ],\n    [\n        \"ccad\",\n        \"application/clariscad\"\n    ],\n    [\n        \"cco\",\n        \"application/x-cocoa\"\n    ],\n    [\n        \"ccxml\",\n        \"application/ccxml+xml,\"\n    ],\n    [\n        \"cdbcmsg\",\n        \"application/vnd.contact.cmsg\"\n    ],\n    [\n        \"cdf\",\n        [\n            \"application/cdf\",\n            \"application/x-cdf\",\n            \"application/x-netcdf\"\n        ]\n    ],\n    [\n        \"cdkey\",\n        \"application/vnd.mediastation.cdkey\"\n    ],\n    [\n        \"cdmia\",\n        \"application/cdmi-capability\"\n    ],\n    [\n        \"cdmic\",\n        \"application/cdmi-container\"\n    ],\n    [\n        \"cdmid\",\n        \"application/cdmi-domain\"\n    ],\n    [\n        \"cdmio\",\n        \"application/cdmi-object\"\n    ],\n    [\n        \"cdmiq\",\n        \"application/cdmi-queue\"\n    ],\n    [\n        \"cdx\",\n        \"chemical/x-cdx\"\n    ],\n    [\n        \"cdxml\",\n        \"application/vnd.chemdraw+xml\"\n    ],\n    [\n        \"cdy\",\n        \"application/vnd.cinderella\"\n    ],\n    [\n        \"cer\",\n        [\n            \"application/pkix-cert\",\n            \"application/x-x509-ca-cert\"\n        ]\n    ],\n    [\n        \"cgm\",\n        \"image/cgm\"\n    ],\n    [\n        \"cha\",\n        \"application/x-chat\"\n    ],\n    [\n        \"chat\",\n        \"application/x-chat\"\n    ],\n    [\n        \"chm\",\n        \"application/vnd.ms-htmlhelp\"\n    ],\n    [\n        \"chrt\",\n        \"application/vnd.kde.kchart\"\n    ],\n    [\n        \"cif\",\n        \"chemical/x-cif\"\n    ],\n    [\n        \"cii\",\n        \"application/vnd.anser-web-certificate-issue-initiation\"\n    ],\n    [\n        \"cil\",\n        \"application/vnd.ms-artgalry\"\n    ],\n    [\n        \"cla\",\n        \"application/vnd.claymore\"\n    ],\n    [\n        \"class\",\n        [\n            \"application/octet-stream\",\n            \"application/java\",\n            \"application/java-byte-code\",\n            \"application/java-vm\",\n            \"application/x-java-class\"\n        ]\n    ],\n    [\n        \"clkk\",\n        \"application/vnd.crick.clicker.keyboard\"\n    ],\n    [\n        \"clkp\",\n        \"application/vnd.crick.clicker.palette\"\n    ],\n    [\n        \"clkt\",\n        \"application/vnd.crick.clicker.template\"\n    ],\n    [\n        \"clkw\",\n        \"application/vnd.crick.clicker.wordbank\"\n    ],\n    [\n        \"clkx\",\n        \"application/vnd.crick.clicker\"\n    ],\n    [\n        \"clp\",\n        \"application/x-msclip\"\n    ],\n    [\n        \"cmc\",\n        \"application/vnd.cosmocaller\"\n    ],\n    [\n        \"cmdf\",\n        \"chemical/x-cmdf\"\n    ],\n    [\n        \"cml\",\n        \"chemical/x-cml\"\n    ],\n    [\n        \"cmp\",\n        \"application/vnd.yellowriver-custom-menu\"\n    ],\n    [\n        \"cmx\",\n        \"image/x-cmx\"\n    ],\n    [\n        \"cod\",\n        [\n            \"image/cis-cod\",\n            \"application/vnd.rim.cod\"\n        ]\n    ],\n    [\n        \"com\",\n        [\n            \"application/octet-stream\",\n            \"text/plain\"\n        ]\n    ],\n    [\n        \"conf\",\n        \"text/plain\"\n    ],\n    [\n        \"cpio\",\n        \"application/x-cpio\"\n    ],\n    [\n        \"cpp\",\n        \"text/x-c\"\n    ],\n    [\n        \"cpt\",\n        [\n            \"application/mac-compactpro\",\n            \"application/x-compactpro\",\n            \"application/x-cpt\"\n        ]\n    ],\n    [\n        \"crd\",\n        \"application/x-mscardfile\"\n    ],\n    [\n        \"crl\",\n        [\n            \"application/pkix-crl\",\n            \"application/pkcs-crl\"\n        ]\n    ],\n    [\n        \"crt\",\n        [\n            \"application/pkix-cert\",\n            \"application/x-x509-user-cert\",\n            \"application/x-x509-ca-cert\"\n        ]\n    ],\n    [\n        \"cryptonote\",\n        \"application/vnd.rig.cryptonote\"\n    ],\n    [\n        \"csh\",\n        [\n            \"text/x-script.csh\",\n            \"application/x-csh\"\n        ]\n    ],\n    [\n        \"csml\",\n        \"chemical/x-csml\"\n    ],\n    [\n        \"csp\",\n        \"application/vnd.commonspace\"\n    ],\n    [\n        \"css\",\n        [\n            \"text/css\",\n            \"application/x-pointplus\"\n        ]\n    ],\n    [\n        \"csv\",\n        \"text/csv\"\n    ],\n    [\n        \"cu\",\n        \"application/cu-seeme\"\n    ],\n    [\n        \"curl\",\n        \"text/vnd.curl\"\n    ],\n    [\n        \"cww\",\n        \"application/prs.cww\"\n    ],\n    [\n        \"cxx\",\n        \"text/plain\"\n    ],\n    [\n        \"dae\",\n        \"model/vnd.collada+xml\"\n    ],\n    [\n        \"daf\",\n        \"application/vnd.mobius.daf\"\n    ],\n    [\n        \"davmount\",\n        \"application/davmount+xml\"\n    ],\n    [\n        \"dcr\",\n        \"application/x-director\"\n    ],\n    [\n        \"dcurl\",\n        \"text/vnd.curl.dcurl\"\n    ],\n    [\n        \"dd2\",\n        \"application/vnd.oma.dd2+xml\"\n    ],\n    [\n        \"ddd\",\n        \"application/vnd.fujixerox.ddd\"\n    ],\n    [\n        \"deb\",\n        \"application/x-debian-package\"\n    ],\n    [\n        \"deepv\",\n        \"application/x-deepv\"\n    ],\n    [\n        \"def\",\n        \"text/plain\"\n    ],\n    [\n        \"der\",\n        \"application/x-x509-ca-cert\"\n    ],\n    [\n        \"dfac\",\n        \"application/vnd.dreamfactory\"\n    ],\n    [\n        \"dif\",\n        \"video/x-dv\"\n    ],\n    [\n        \"dir\",\n        \"application/x-director\"\n    ],\n    [\n        \"dis\",\n        \"application/vnd.mobius.dis\"\n    ],\n    [\n        \"djvu\",\n        \"image/vnd.djvu\"\n    ],\n    [\n        \"dl\",\n        [\n            \"video/dl\",\n            \"video/x-dl\"\n        ]\n    ],\n    [\n        \"dll\",\n        \"application/x-msdownload\"\n    ],\n    [\n        \"dms\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"dna\",\n        \"application/vnd.dna\"\n    ],\n    [\n        \"doc\",\n        \"application/msword\"\n    ],\n    [\n        \"docm\",\n        \"application/vnd.ms-word.document.macroenabled.12\"\n    ],\n    [\n        \"docx\",\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    ],\n    [\n        \"dot\",\n        \"application/msword\"\n    ],\n    [\n        \"dotm\",\n        \"application/vnd.ms-word.template.macroenabled.12\"\n    ],\n    [\n        \"dotx\",\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\"\n    ],\n    [\n        \"dp\",\n        [\n            \"application/commonground\",\n            \"application/vnd.osgi.dp\"\n        ]\n    ],\n    [\n        \"dpg\",\n        \"application/vnd.dpgraph\"\n    ],\n    [\n        \"dra\",\n        \"audio/vnd.dra\"\n    ],\n    [\n        \"drw\",\n        \"application/drafting\"\n    ],\n    [\n        \"dsc\",\n        \"text/prs.lines.tag\"\n    ],\n    [\n        \"dssc\",\n        \"application/dssc+der\"\n    ],\n    [\n        \"dtb\",\n        \"application/x-dtbook+xml\"\n    ],\n    [\n        \"dtd\",\n        \"application/xml-dtd\"\n    ],\n    [\n        \"dts\",\n        \"audio/vnd.dts\"\n    ],\n    [\n        \"dtshd\",\n        \"audio/vnd.dts.hd\"\n    ],\n    [\n        \"dump\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"dv\",\n        \"video/x-dv\"\n    ],\n    [\n        \"dvi\",\n        \"application/x-dvi\"\n    ],\n    [\n        \"dwf\",\n        [\n            \"model/vnd.dwf\",\n            \"drawing/x-dwf\"\n        ]\n    ],\n    [\n        \"dwg\",\n        [\n            \"application/acad\",\n            \"image/vnd.dwg\",\n            \"image/x-dwg\"\n        ]\n    ],\n    [\n        \"dxf\",\n        [\n            \"application/dxf\",\n            \"image/vnd.dwg\",\n            \"image/vnd.dxf\",\n            \"image/x-dwg\"\n        ]\n    ],\n    [\n        \"dxp\",\n        \"application/vnd.spotfire.dxp\"\n    ],\n    [\n        \"dxr\",\n        \"application/x-director\"\n    ],\n    [\n        \"ecelp4800\",\n        \"audio/vnd.nuera.ecelp4800\"\n    ],\n    [\n        \"ecelp7470\",\n        \"audio/vnd.nuera.ecelp7470\"\n    ],\n    [\n        \"ecelp9600\",\n        \"audio/vnd.nuera.ecelp9600\"\n    ],\n    [\n        \"edm\",\n        \"application/vnd.novadigm.edm\"\n    ],\n    [\n        \"edx\",\n        \"application/vnd.novadigm.edx\"\n    ],\n    [\n        \"efif\",\n        \"application/vnd.picsel\"\n    ],\n    [\n        \"ei6\",\n        \"application/vnd.pg.osasli\"\n    ],\n    [\n        \"el\",\n        \"text/x-script.elisp\"\n    ],\n    [\n        \"elc\",\n        [\n            \"application/x-elc\",\n            \"application/x-bytecode.elisp\"\n        ]\n    ],\n    [\n        \"eml\",\n        \"message/rfc822\"\n    ],\n    [\n        \"emma\",\n        \"application/emma+xml\"\n    ],\n    [\n        \"env\",\n        \"application/x-envoy\"\n    ],\n    [\n        \"eol\",\n        \"audio/vnd.digital-winds\"\n    ],\n    [\n        \"eot\",\n        \"application/vnd.ms-fontobject\"\n    ],\n    [\n        \"eps\",\n        \"application/postscript\"\n    ],\n    [\n        \"epub\",\n        \"application/epub+zip\"\n    ],\n    [\n        \"es\",\n        [\n            \"application/ecmascript\",\n            \"application/x-esrehber\"\n        ]\n    ],\n    [\n        \"es3\",\n        \"application/vnd.eszigno3+xml\"\n    ],\n    [\n        \"esf\",\n        \"application/vnd.epson.esf\"\n    ],\n    [\n        \"etx\",\n        \"text/x-setext\"\n    ],\n    [\n        \"evy\",\n        [\n            \"application/envoy\",\n            \"application/x-envoy\"\n        ]\n    ],\n    [\n        \"exe\",\n        [\n            \"application/octet-stream\",\n            \"application/x-msdownload\"\n        ]\n    ],\n    [\n        \"exi\",\n        \"application/exi\"\n    ],\n    [\n        \"ext\",\n        \"application/vnd.novadigm.ext\"\n    ],\n    [\n        \"ez2\",\n        \"application/vnd.ezpix-album\"\n    ],\n    [\n        \"ez3\",\n        \"application/vnd.ezpix-package\"\n    ],\n    [\n        \"f\",\n        [\n            \"text/plain\",\n            \"text/x-fortran\"\n        ]\n    ],\n    [\n        \"f4v\",\n        \"video/x-f4v\"\n    ],\n    [\n        \"f77\",\n        \"text/x-fortran\"\n    ],\n    [\n        \"f90\",\n        [\n            \"text/plain\",\n            \"text/x-fortran\"\n        ]\n    ],\n    [\n        \"fbs\",\n        \"image/vnd.fastbidsheet\"\n    ],\n    [\n        \"fcs\",\n        \"application/vnd.isac.fcs\"\n    ],\n    [\n        \"fdf\",\n        \"application/vnd.fdf\"\n    ],\n    [\n        \"fe_launch\",\n        \"application/vnd.denovo.fcselayout-link\"\n    ],\n    [\n        \"fg5\",\n        \"application/vnd.fujitsu.oasysgp\"\n    ],\n    [\n        \"fh\",\n        \"image/x-freehand\"\n    ],\n    [\n        \"fif\",\n        [\n            \"application/fractals\",\n            \"image/fif\"\n        ]\n    ],\n    [\n        \"fig\",\n        \"application/x-xfig\"\n    ],\n    [\n        \"fli\",\n        [\n            \"video/fli\",\n            \"video/x-fli\"\n        ]\n    ],\n    [\n        \"flo\",\n        [\n            \"image/florian\",\n            \"application/vnd.micrografx.flo\"\n        ]\n    ],\n    [\n        \"flr\",\n        \"x-world/x-vrml\"\n    ],\n    [\n        \"flv\",\n        \"video/x-flv\"\n    ],\n    [\n        \"flw\",\n        \"application/vnd.kde.kivio\"\n    ],\n    [\n        \"flx\",\n        \"text/vnd.fmi.flexstor\"\n    ],\n    [\n        \"fly\",\n        \"text/vnd.fly\"\n    ],\n    [\n        \"fm\",\n        \"application/vnd.framemaker\"\n    ],\n    [\n        \"fmf\",\n        \"video/x-atomic3d-feature\"\n    ],\n    [\n        \"fnc\",\n        \"application/vnd.frogans.fnc\"\n    ],\n    [\n        \"for\",\n        [\n            \"text/plain\",\n            \"text/x-fortran\"\n        ]\n    ],\n    [\n        \"fpx\",\n        [\n            \"image/vnd.fpx\",\n            \"image/vnd.net-fpx\"\n        ]\n    ],\n    [\n        \"frl\",\n        \"application/freeloader\"\n    ],\n    [\n        \"fsc\",\n        \"application/vnd.fsc.weblaunch\"\n    ],\n    [\n        \"fst\",\n        \"image/vnd.fst\"\n    ],\n    [\n        \"ftc\",\n        \"application/vnd.fluxtime.clip\"\n    ],\n    [\n        \"fti\",\n        \"application/vnd.anser-web-funds-transfer-initiation\"\n    ],\n    [\n        \"funk\",\n        \"audio/make\"\n    ],\n    [\n        \"fvt\",\n        \"video/vnd.fvt\"\n    ],\n    [\n        \"fxp\",\n        \"application/vnd.adobe.fxp\"\n    ],\n    [\n        \"fzs\",\n        \"application/vnd.fuzzysheet\"\n    ],\n    [\n        \"g\",\n        \"text/plain\"\n    ],\n    [\n        \"g2w\",\n        \"application/vnd.geoplan\"\n    ],\n    [\n        \"g3\",\n        \"image/g3fax\"\n    ],\n    [\n        \"g3w\",\n        \"application/vnd.geospace\"\n    ],\n    [\n        \"gac\",\n        \"application/vnd.groove-account\"\n    ],\n    [\n        \"gdl\",\n        \"model/vnd.gdl\"\n    ],\n    [\n        \"geo\",\n        \"application/vnd.dynageo\"\n    ],\n    [\n        \"gex\",\n        \"application/vnd.geometry-explorer\"\n    ],\n    [\n        \"ggb\",\n        \"application/vnd.geogebra.file\"\n    ],\n    [\n        \"ggt\",\n        \"application/vnd.geogebra.tool\"\n    ],\n    [\n        \"ghf\",\n        \"application/vnd.groove-help\"\n    ],\n    [\n        \"gif\",\n        \"image/gif\"\n    ],\n    [\n        \"gim\",\n        \"application/vnd.groove-identity-message\"\n    ],\n    [\n        \"gl\",\n        [\n            \"video/gl\",\n            \"video/x-gl\"\n        ]\n    ],\n    [\n        \"gmx\",\n        \"application/vnd.gmx\"\n    ],\n    [\n        \"gnumeric\",\n        \"application/x-gnumeric\"\n    ],\n    [\n        \"gph\",\n        \"application/vnd.flographit\"\n    ],\n    [\n        \"gqf\",\n        \"application/vnd.grafeq\"\n    ],\n    [\n        \"gram\",\n        \"application/srgs\"\n    ],\n    [\n        \"grv\",\n        \"application/vnd.groove-injector\"\n    ],\n    [\n        \"grxml\",\n        \"application/srgs+xml\"\n    ],\n    [\n        \"gsd\",\n        \"audio/x-gsm\"\n    ],\n    [\n        \"gsf\",\n        \"application/x-font-ghostscript\"\n    ],\n    [\n        \"gsm\",\n        \"audio/x-gsm\"\n    ],\n    [\n        \"gsp\",\n        \"application/x-gsp\"\n    ],\n    [\n        \"gss\",\n        \"application/x-gss\"\n    ],\n    [\n        \"gtar\",\n        \"application/x-gtar\"\n    ],\n    [\n        \"gtm\",\n        \"application/vnd.groove-tool-message\"\n    ],\n    [\n        \"gtw\",\n        \"model/vnd.gtw\"\n    ],\n    [\n        \"gv\",\n        \"text/vnd.graphviz\"\n    ],\n    [\n        \"gxt\",\n        \"application/vnd.geonext\"\n    ],\n    [\n        \"gz\",\n        [\n            \"application/x-gzip\",\n            \"application/x-compressed\"\n        ]\n    ],\n    [\n        \"gzip\",\n        [\n            \"multipart/x-gzip\",\n            \"application/x-gzip\"\n        ]\n    ],\n    [\n        \"h\",\n        [\n            \"text/plain\",\n            \"text/x-h\"\n        ]\n    ],\n    [\n        \"h261\",\n        \"video/h261\"\n    ],\n    [\n        \"h263\",\n        \"video/h263\"\n    ],\n    [\n        \"h264\",\n        \"video/h264\"\n    ],\n    [\n        \"hal\",\n        \"application/vnd.hal+xml\"\n    ],\n    [\n        \"hbci\",\n        \"application/vnd.hbci\"\n    ],\n    [\n        \"hdf\",\n        \"application/x-hdf\"\n    ],\n    [\n        \"help\",\n        \"application/x-helpfile\"\n    ],\n    [\n        \"hgl\",\n        \"application/vnd.hp-hpgl\"\n    ],\n    [\n        \"hh\",\n        [\n            \"text/plain\",\n            \"text/x-h\"\n        ]\n    ],\n    [\n        \"hlb\",\n        \"text/x-script\"\n    ],\n    [\n        \"hlp\",\n        [\n            \"application/winhlp\",\n            \"application/hlp\",\n            \"application/x-helpfile\",\n            \"application/x-winhelp\"\n        ]\n    ],\n    [\n        \"hpg\",\n        \"application/vnd.hp-hpgl\"\n    ],\n    [\n        \"hpgl\",\n        \"application/vnd.hp-hpgl\"\n    ],\n    [\n        \"hpid\",\n        \"application/vnd.hp-hpid\"\n    ],\n    [\n        \"hps\",\n        \"application/vnd.hp-hps\"\n    ],\n    [\n        \"hqx\",\n        [\n            \"application/mac-binhex40\",\n            \"application/binhex\",\n            \"application/binhex4\",\n            \"application/mac-binhex\",\n            \"application/x-binhex40\",\n            \"application/x-mac-binhex40\"\n        ]\n    ],\n    [\n        \"hta\",\n        \"application/hta\"\n    ],\n    [\n        \"htc\",\n        \"text/x-component\"\n    ],\n    [\n        \"htke\",\n        \"application/vnd.kenameaapp\"\n    ],\n    [\n        \"htm\",\n        \"text/html\"\n    ],\n    [\n        \"html\",\n        \"text/html\"\n    ],\n    [\n        \"htmls\",\n        \"text/html\"\n    ],\n    [\n        \"htt\",\n        \"text/webviewhtml\"\n    ],\n    [\n        \"htx\",\n        \"text/html\"\n    ],\n    [\n        \"hvd\",\n        \"application/vnd.yamaha.hv-dic\"\n    ],\n    [\n        \"hvp\",\n        \"application/vnd.yamaha.hv-voice\"\n    ],\n    [\n        \"hvs\",\n        \"application/vnd.yamaha.hv-script\"\n    ],\n    [\n        \"i2g\",\n        \"application/vnd.intergeo\"\n    ],\n    [\n        \"icc\",\n        \"application/vnd.iccprofile\"\n    ],\n    [\n        \"ice\",\n        \"x-conference/x-cooltalk\"\n    ],\n    [\n        \"ico\",\n        \"image/x-icon\"\n    ],\n    [\n        \"ics\",\n        \"text/calendar\"\n    ],\n    [\n        \"idc\",\n        \"text/plain\"\n    ],\n    [\n        \"ief\",\n        \"image/ief\"\n    ],\n    [\n        \"iefs\",\n        \"image/ief\"\n    ],\n    [\n        \"ifm\",\n        \"application/vnd.shana.informed.formdata\"\n    ],\n    [\n        \"iges\",\n        [\n            \"application/iges\",\n            \"model/iges\"\n        ]\n    ],\n    [\n        \"igl\",\n        \"application/vnd.igloader\"\n    ],\n    [\n        \"igm\",\n        \"application/vnd.insors.igm\"\n    ],\n    [\n        \"igs\",\n        [\n            \"application/iges\",\n            \"model/iges\"\n        ]\n    ],\n    [\n        \"igx\",\n        \"application/vnd.micrografx.igx\"\n    ],\n    [\n        \"iif\",\n        \"application/vnd.shana.informed.interchange\"\n    ],\n    [\n        \"iii\",\n        \"application/x-iphone\"\n    ],\n    [\n        \"ima\",\n        \"application/x-ima\"\n    ],\n    [\n        \"imap\",\n        \"application/x-httpd-imap\"\n    ],\n    [\n        \"imp\",\n        \"application/vnd.accpac.simply.imp\"\n    ],\n    [\n        \"ims\",\n        \"application/vnd.ms-ims\"\n    ],\n    [\n        \"inf\",\n        \"application/inf\"\n    ],\n    [\n        \"ins\",\n        [\n            \"application/x-internet-signup\",\n            \"application/x-internett-signup\"\n        ]\n    ],\n    [\n        \"ip\",\n        \"application/x-ip2\"\n    ],\n    [\n        \"ipfix\",\n        \"application/ipfix\"\n    ],\n    [\n        \"ipk\",\n        \"application/vnd.shana.informed.package\"\n    ],\n    [\n        \"irm\",\n        \"application/vnd.ibm.rights-management\"\n    ],\n    [\n        \"irp\",\n        \"application/vnd.irepository.package+xml\"\n    ],\n    [\n        \"isp\",\n        \"application/x-internet-signup\"\n    ],\n    [\n        \"isu\",\n        \"video/x-isvideo\"\n    ],\n    [\n        \"it\",\n        \"audio/it\"\n    ],\n    [\n        \"itp\",\n        \"application/vnd.shana.informed.formtemplate\"\n    ],\n    [\n        \"iv\",\n        \"application/x-inventor\"\n    ],\n    [\n        \"ivp\",\n        \"application/vnd.immervision-ivp\"\n    ],\n    [\n        \"ivr\",\n        \"i-world/i-vrml\"\n    ],\n    [\n        \"ivu\",\n        \"application/vnd.immervision-ivu\"\n    ],\n    [\n        \"ivy\",\n        \"application/x-livescreen\"\n    ],\n    [\n        \"jad\",\n        \"text/vnd.sun.j2me.app-descriptor\"\n    ],\n    [\n        \"jam\",\n        [\n            \"application/vnd.jam\",\n            \"audio/x-jam\"\n        ]\n    ],\n    [\n        \"jar\",\n        \"application/java-archive\"\n    ],\n    [\n        \"jav\",\n        [\n            \"text/plain\",\n            \"text/x-java-source\"\n        ]\n    ],\n    [\n        \"java\",\n        [\n            \"text/plain\",\n            \"text/x-java-source,java\",\n            \"text/x-java-source\"\n        ]\n    ],\n    [\n        \"jcm\",\n        \"application/x-java-commerce\"\n    ],\n    [\n        \"jfif\",\n        [\n            \"image/pipeg\",\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jfif-tbnl\",\n        \"image/jpeg\"\n    ],\n    [\n        \"jisp\",\n        \"application/vnd.jisp\"\n    ],\n    [\n        \"jlt\",\n        \"application/vnd.hp-jlyt\"\n    ],\n    [\n        \"jnlp\",\n        \"application/x-java-jnlp-file\"\n    ],\n    [\n        \"joda\",\n        \"application/vnd.joost.joda-archive\"\n    ],\n    [\n        \"jpe\",\n        [\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jpeg\",\n        [\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jpg\",\n        [\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jpgv\",\n        \"video/jpeg\"\n    ],\n    [\n        \"jpm\",\n        \"video/jpm\"\n    ],\n    [\n        \"jps\",\n        \"image/x-jps\"\n    ],\n    [\n        \"js\",\n        [\n            \"application/javascript\",\n            \"application/ecmascript\",\n            \"text/javascript\",\n            \"text/ecmascript\",\n            \"application/x-javascript\"\n        ]\n    ],\n    [\n        \"json\",\n        \"application/json\"\n    ],\n    [\n        \"jut\",\n        \"image/jutvision\"\n    ],\n    [\n        \"kar\",\n        [\n            \"audio/midi\",\n            \"music/x-karaoke\"\n        ]\n    ],\n    [\n        \"karbon\",\n        \"application/vnd.kde.karbon\"\n    ],\n    [\n        \"kfo\",\n        \"application/vnd.kde.kformula\"\n    ],\n    [\n        \"kia\",\n        \"application/vnd.kidspiration\"\n    ],\n    [\n        \"kml\",\n        \"application/vnd.google-earth.kml+xml\"\n    ],\n    [\n        \"kmz\",\n        \"application/vnd.google-earth.kmz\"\n    ],\n    [\n        \"kne\",\n        \"application/vnd.kinar\"\n    ],\n    [\n        \"kon\",\n        \"application/vnd.kde.kontour\"\n    ],\n    [\n        \"kpr\",\n        \"application/vnd.kde.kpresenter\"\n    ],\n    [\n        \"ksh\",\n        [\n            \"application/x-ksh\",\n            \"text/x-script.ksh\"\n        ]\n    ],\n    [\n        \"ksp\",\n        \"application/vnd.kde.kspread\"\n    ],\n    [\n        \"ktx\",\n        \"image/ktx\"\n    ],\n    [\n        \"ktz\",\n        \"application/vnd.kahootz\"\n    ],\n    [\n        \"kwd\",\n        \"application/vnd.kde.kword\"\n    ],\n    [\n        \"la\",\n        [\n            \"audio/nspaudio\",\n            \"audio/x-nspaudio\"\n        ]\n    ],\n    [\n        \"lam\",\n        \"audio/x-liveaudio\"\n    ],\n    [\n        \"lasxml\",\n        \"application/vnd.las.las+xml\"\n    ],\n    [\n        \"latex\",\n        \"application/x-latex\"\n    ],\n    [\n        \"lbd\",\n        \"application/vnd.llamagraphics.life-balance.desktop\"\n    ],\n    [\n        \"lbe\",\n        \"application/vnd.llamagraphics.life-balance.exchange+xml\"\n    ],\n    [\n        \"les\",\n        \"application/vnd.hhe.lesson-player\"\n    ],\n    [\n        \"lha\",\n        [\n            \"application/octet-stream\",\n            \"application/lha\",\n            \"application/x-lha\"\n        ]\n    ],\n    [\n        \"lhx\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"link66\",\n        \"application/vnd.route66.link66+xml\"\n    ],\n    [\n        \"list\",\n        \"text/plain\"\n    ],\n    [\n        \"lma\",\n        [\n            \"audio/nspaudio\",\n            \"audio/x-nspaudio\"\n        ]\n    ],\n    [\n        \"log\",\n        \"text/plain\"\n    ],\n    [\n        \"lrm\",\n        \"application/vnd.ms-lrm\"\n    ],\n    [\n        \"lsf\",\n        \"video/x-la-asf\"\n    ],\n    [\n        \"lsp\",\n        [\n            \"application/x-lisp\",\n            \"text/x-script.lisp\"\n        ]\n    ],\n    [\n        \"lst\",\n        \"text/plain\"\n    ],\n    [\n        \"lsx\",\n        [\n            \"video/x-la-asf\",\n            \"text/x-la-asf\"\n        ]\n    ],\n    [\n        \"ltf\",\n        \"application/vnd.frogans.ltf\"\n    ],\n    [\n        \"ltx\",\n        \"application/x-latex\"\n    ],\n    [\n        \"lvp\",\n        \"audio/vnd.lucent.voice\"\n    ],\n    [\n        \"lwp\",\n        \"application/vnd.lotus-wordpro\"\n    ],\n    [\n        \"lzh\",\n        [\n            \"application/octet-stream\",\n            \"application/x-lzh\"\n        ]\n    ],\n    [\n        \"lzx\",\n        [\n            \"application/lzx\",\n            \"application/octet-stream\",\n            \"application/x-lzx\"\n        ]\n    ],\n    [\n        \"m\",\n        [\n            \"text/plain\",\n            \"text/x-m\"\n        ]\n    ],\n    [\n        \"m13\",\n        \"application/x-msmediaview\"\n    ],\n    [\n        \"m14\",\n        \"application/x-msmediaview\"\n    ],\n    [\n        \"m1v\",\n        \"video/mpeg\"\n    ],\n    [\n        \"m21\",\n        \"application/mp21\"\n    ],\n    [\n        \"m2a\",\n        \"audio/mpeg\"\n    ],\n    [\n        \"m2v\",\n        \"video/mpeg\"\n    ],\n    [\n        \"m3u\",\n        [\n            \"audio/x-mpegurl\",\n            \"audio/x-mpequrl\"\n        ]\n    ],\n    [\n        \"m3u8\",\n        \"application/vnd.apple.mpegurl\"\n    ],\n    [\n        \"m4v\",\n        \"video/x-m4v\"\n    ],\n    [\n        \"ma\",\n        \"application/mathematica\"\n    ],\n    [\n        \"mads\",\n        \"application/mads+xml\"\n    ],\n    [\n        \"mag\",\n        \"application/vnd.ecowin.chart\"\n    ],\n    [\n        \"man\",\n        \"application/x-troff-man\"\n    ],\n    [\n        \"map\",\n        \"application/x-navimap\"\n    ],\n    [\n        \"mar\",\n        \"text/plain\"\n    ],\n    [\n        \"mathml\",\n        \"application/mathml+xml\"\n    ],\n    [\n        \"mbd\",\n        \"application/mbedlet\"\n    ],\n    [\n        \"mbk\",\n        \"application/vnd.mobius.mbk\"\n    ],\n    [\n        \"mbox\",\n        \"application/mbox\"\n    ],\n    [\n        \"mc$\",\n        \"application/x-magic-cap-package-1.0\"\n    ],\n    [\n        \"mc1\",\n        \"application/vnd.medcalcdata\"\n    ],\n    [\n        \"mcd\",\n        [\n            \"application/mcad\",\n            \"application/vnd.mcd\",\n            \"application/x-mathcad\"\n        ]\n    ],\n    [\n        \"mcf\",\n        [\n            \"image/vasa\",\n            \"text/mcf\"\n        ]\n    ],\n    [\n        \"mcp\",\n        \"application/netmc\"\n    ],\n    [\n        \"mcurl\",\n        \"text/vnd.curl.mcurl\"\n    ],\n    [\n        \"mdb\",\n        \"application/x-msaccess\"\n    ],\n    [\n        \"mdi\",\n        \"image/vnd.ms-modi\"\n    ],\n    [\n        \"me\",\n        \"application/x-troff-me\"\n    ],\n    [\n        \"meta4\",\n        \"application/metalink4+xml\"\n    ],\n    [\n        \"mets\",\n        \"application/mets+xml\"\n    ],\n    [\n        \"mfm\",\n        \"application/vnd.mfmp\"\n    ],\n    [\n        \"mgp\",\n        \"application/vnd.osgeo.mapguide.package\"\n    ],\n    [\n        \"mgz\",\n        \"application/vnd.proteus.magazine\"\n    ],\n    [\n        \"mht\",\n        \"message/rfc822\"\n    ],\n    [\n        \"mhtml\",\n        \"message/rfc822\"\n    ],\n    [\n        \"mid\",\n        [\n            \"audio/mid\",\n            \"audio/midi\",\n            \"music/crescendo\",\n            \"x-music/x-midi\",\n            \"audio/x-midi\",\n            \"application/x-midi\",\n            \"audio/x-mid\"\n        ]\n    ],\n    [\n        \"midi\",\n        [\n            \"audio/midi\",\n            \"music/crescendo\",\n            \"x-music/x-midi\",\n            \"audio/x-midi\",\n            \"application/x-midi\",\n            \"audio/x-mid\"\n        ]\n    ],\n    [\n        \"mif\",\n        [\n            \"application/vnd.mif\",\n            \"application/x-mif\",\n            \"application/x-frame\"\n        ]\n    ],\n    [\n        \"mime\",\n        [\n            \"message/rfc822\",\n            \"www/mime\"\n        ]\n    ],\n    [\n        \"mj2\",\n        \"video/mj2\"\n    ],\n    [\n        \"mjf\",\n        \"audio/x-vnd.audioexplosion.mjuicemediafile\"\n    ],\n    [\n        \"mjpg\",\n        \"video/x-motion-jpeg\"\n    ],\n    [\n        \"mlp\",\n        \"application/vnd.dolby.mlp\"\n    ],\n    [\n        \"mm\",\n        [\n            \"application/base64\",\n            \"application/x-meme\"\n        ]\n    ],\n    [\n        \"mmd\",\n        \"application/vnd.chipnuts.karaoke-mmd\"\n    ],\n    [\n        \"mme\",\n        \"application/base64\"\n    ],\n    [\n        \"mmf\",\n        \"application/vnd.smaf\"\n    ],\n    [\n        \"mmr\",\n        \"image/vnd.fujixerox.edmics-mmr\"\n    ],\n    [\n        \"mny\",\n        \"application/x-msmoney\"\n    ],\n    [\n        \"mod\",\n        [\n            \"audio/mod\",\n            \"audio/x-mod\"\n        ]\n    ],\n    [\n        \"mods\",\n        \"application/mods+xml\"\n    ],\n    [\n        \"moov\",\n        \"video/quicktime\"\n    ],\n    [\n        \"mov\",\n        \"video/quicktime\"\n    ],\n    [\n        \"movie\",\n        \"video/x-sgi-movie\"\n    ],\n    [\n        \"mp2\",\n        [\n            \"video/mpeg\",\n            \"audio/mpeg\",\n            \"video/x-mpeg\",\n            \"audio/x-mpeg\",\n            \"video/x-mpeq2a\"\n        ]\n    ],\n    [\n        \"mp3\",\n        [\n            \"audio/mpeg\",\n            \"audio/mpeg3\",\n            \"video/mpeg\",\n            \"audio/x-mpeg-3\",\n            \"video/x-mpeg\"\n        ]\n    ],\n    [\n        \"mp4\",\n        [\n            \"video/mp4\",\n            \"application/mp4\"\n        ]\n    ],\n    [\n        \"mp4a\",\n        \"audio/mp4\"\n    ],\n    [\n        \"mpa\",\n        [\n            \"video/mpeg\",\n            \"audio/mpeg\"\n        ]\n    ],\n    [\n        \"mpc\",\n        [\n            \"application/vnd.mophun.certificate\",\n            \"application/x-project\"\n        ]\n    ],\n    [\n        \"mpe\",\n        \"video/mpeg\"\n    ],\n    [\n        \"mpeg\",\n        \"video/mpeg\"\n    ],\n    [\n        \"mpg\",\n        [\n            \"video/mpeg\",\n            \"audio/mpeg\"\n        ]\n    ],\n    [\n        \"mpga\",\n        \"audio/mpeg\"\n    ],\n    [\n        \"mpkg\",\n        \"application/vnd.apple.installer+xml\"\n    ],\n    [\n        \"mpm\",\n        \"application/vnd.blueice.multipass\"\n    ],\n    [\n        \"mpn\",\n        \"application/vnd.mophun.application\"\n    ],\n    [\n        \"mpp\",\n        \"application/vnd.ms-project\"\n    ],\n    [\n        \"mpt\",\n        \"application/x-project\"\n    ],\n    [\n        \"mpv\",\n        \"application/x-project\"\n    ],\n    [\n        \"mpv2\",\n        \"video/mpeg\"\n    ],\n    [\n        \"mpx\",\n        \"application/x-project\"\n    ],\n    [\n        \"mpy\",\n        \"application/vnd.ibm.minipay\"\n    ],\n    [\n        \"mqy\",\n        \"application/vnd.mobius.mqy\"\n    ],\n    [\n        \"mrc\",\n        \"application/marc\"\n    ],\n    [\n        \"mrcx\",\n        \"application/marcxml+xml\"\n    ],\n    [\n        \"ms\",\n        \"application/x-troff-ms\"\n    ],\n    [\n        \"mscml\",\n        \"application/mediaservercontrol+xml\"\n    ],\n    [\n        \"mseq\",\n        \"application/vnd.mseq\"\n    ],\n    [\n        \"msf\",\n        \"application/vnd.epson.msf\"\n    ],\n    [\n        \"msg\",\n        \"application/vnd.ms-outlook\"\n    ],\n    [\n        \"msh\",\n        \"model/mesh\"\n    ],\n    [\n        \"msl\",\n        \"application/vnd.mobius.msl\"\n    ],\n    [\n        \"msty\",\n        \"application/vnd.muvee.style\"\n    ],\n    [\n        \"mts\",\n        \"model/vnd.mts\"\n    ],\n    [\n        \"mus\",\n        \"application/vnd.musician\"\n    ],\n    [\n        \"musicxml\",\n        \"application/vnd.recordare.musicxml+xml\"\n    ],\n    [\n        \"mv\",\n        \"video/x-sgi-movie\"\n    ],\n    [\n        \"mvb\",\n        \"application/x-msmediaview\"\n    ],\n    [\n        \"mwf\",\n        \"application/vnd.mfer\"\n    ],\n    [\n        \"mxf\",\n        \"application/mxf\"\n    ],\n    [\n        \"mxl\",\n        \"application/vnd.recordare.musicxml\"\n    ],\n    [\n        \"mxml\",\n        \"application/xv+xml\"\n    ],\n    [\n        \"mxs\",\n        \"application/vnd.triscape.mxs\"\n    ],\n    [\n        \"mxu\",\n        \"video/vnd.mpegurl\"\n    ],\n    [\n        \"my\",\n        \"audio/make\"\n    ],\n    [\n        \"mzz\",\n        \"application/x-vnd.audioexplosion.mzz\"\n    ],\n    [\n        \"n-gage\",\n        \"application/vnd.nokia.n-gage.symbian.install\"\n    ],\n    [\n        \"n3\",\n        \"text/n3\"\n    ],\n    [\n        \"nap\",\n        \"image/naplps\"\n    ],\n    [\n        \"naplps\",\n        \"image/naplps\"\n    ],\n    [\n        \"nbp\",\n        \"application/vnd.wolfram.player\"\n    ],\n    [\n        \"nc\",\n        \"application/x-netcdf\"\n    ],\n    [\n        \"ncm\",\n        \"application/vnd.nokia.configuration-message\"\n    ],\n    [\n        \"ncx\",\n        \"application/x-dtbncx+xml\"\n    ],\n    [\n        \"ngdat\",\n        \"application/vnd.nokia.n-gage.data\"\n    ],\n    [\n        \"nif\",\n        \"image/x-niff\"\n    ],\n    [\n        \"niff\",\n        \"image/x-niff\"\n    ],\n    [\n        \"nix\",\n        \"application/x-mix-transfer\"\n    ],\n    [\n        \"nlu\",\n        \"application/vnd.neurolanguage.nlu\"\n    ],\n    [\n        \"nml\",\n        \"application/vnd.enliven\"\n    ],\n    [\n        \"nnd\",\n        \"application/vnd.noblenet-directory\"\n    ],\n    [\n        \"nns\",\n        \"application/vnd.noblenet-sealer\"\n    ],\n    [\n        \"nnw\",\n        \"application/vnd.noblenet-web\"\n    ],\n    [\n        \"npx\",\n        \"image/vnd.net-fpx\"\n    ],\n    [\n        \"nsc\",\n        \"application/x-conference\"\n    ],\n    [\n        \"nsf\",\n        \"application/vnd.lotus-notes\"\n    ],\n    [\n        \"nvd\",\n        \"application/x-navidoc\"\n    ],\n    [\n        \"nws\",\n        \"message/rfc822\"\n    ],\n    [\n        \"o\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"oa2\",\n        \"application/vnd.fujitsu.oasys2\"\n    ],\n    [\n        \"oa3\",\n        \"application/vnd.fujitsu.oasys3\"\n    ],\n    [\n        \"oas\",\n        \"application/vnd.fujitsu.oasys\"\n    ],\n    [\n        \"obd\",\n        \"application/x-msbinder\"\n    ],\n    [\n        \"oda\",\n        \"application/oda\"\n    ],\n    [\n        \"odb\",\n        \"application/vnd.oasis.opendocument.database\"\n    ],\n    [\n        \"odc\",\n        \"application/vnd.oasis.opendocument.chart\"\n    ],\n    [\n        \"odf\",\n        \"application/vnd.oasis.opendocument.formula\"\n    ],\n    [\n        \"odft\",\n        \"application/vnd.oasis.opendocument.formula-template\"\n    ],\n    [\n        \"odg\",\n        \"application/vnd.oasis.opendocument.graphics\"\n    ],\n    [\n        \"odi\",\n        \"application/vnd.oasis.opendocument.image\"\n    ],\n    [\n        \"odm\",\n        \"application/vnd.oasis.opendocument.text-master\"\n    ],\n    [\n        \"odp\",\n        \"application/vnd.oasis.opendocument.presentation\"\n    ],\n    [\n        \"ods\",\n        \"application/vnd.oasis.opendocument.spreadsheet\"\n    ],\n    [\n        \"odt\",\n        \"application/vnd.oasis.opendocument.text\"\n    ],\n    [\n        \"oga\",\n        \"audio/ogg\"\n    ],\n    [\n        \"ogv\",\n        \"video/ogg\"\n    ],\n    [\n        \"ogx\",\n        \"application/ogg\"\n    ],\n    [\n        \"omc\",\n        \"application/x-omc\"\n    ],\n    [\n        \"omcd\",\n        \"application/x-omcdatamaker\"\n    ],\n    [\n        \"omcr\",\n        \"application/x-omcregerator\"\n    ],\n    [\n        \"onetoc\",\n        \"application/onenote\"\n    ],\n    [\n        \"opf\",\n        \"application/oebps-package+xml\"\n    ],\n    [\n        \"org\",\n        \"application/vnd.lotus-organizer\"\n    ],\n    [\n        \"osf\",\n        \"application/vnd.yamaha.openscoreformat\"\n    ],\n    [\n        \"osfpvg\",\n        \"application/vnd.yamaha.openscoreformat.osfpvg+xml\"\n    ],\n    [\n        \"otc\",\n        \"application/vnd.oasis.opendocument.chart-template\"\n    ],\n    [\n        \"otf\",\n        \"application/x-font-otf\"\n    ],\n    [\n        \"otg\",\n        \"application/vnd.oasis.opendocument.graphics-template\"\n    ],\n    [\n        \"oth\",\n        \"application/vnd.oasis.opendocument.text-web\"\n    ],\n    [\n        \"oti\",\n        \"application/vnd.oasis.opendocument.image-template\"\n    ],\n    [\n        \"otp\",\n        \"application/vnd.oasis.opendocument.presentation-template\"\n    ],\n    [\n        \"ots\",\n        \"application/vnd.oasis.opendocument.spreadsheet-template\"\n    ],\n    [\n        \"ott\",\n        \"application/vnd.oasis.opendocument.text-template\"\n    ],\n    [\n        \"oxt\",\n        \"application/vnd.openofficeorg.extension\"\n    ],\n    [\n        \"p\",\n        \"text/x-pascal\"\n    ],\n    [\n        \"p10\",\n        [\n            \"application/pkcs10\",\n            \"application/x-pkcs10\"\n        ]\n    ],\n    [\n        \"p12\",\n        [\n            \"application/pkcs-12\",\n            \"application/x-pkcs12\"\n        ]\n    ],\n    [\n        \"p7a\",\n        \"application/x-pkcs7-signature\"\n    ],\n    [\n        \"p7b\",\n        \"application/x-pkcs7-certificates\"\n    ],\n    [\n        \"p7c\",\n        [\n            \"application/pkcs7-mime\",\n            \"application/x-pkcs7-mime\"\n        ]\n    ],\n    [\n        \"p7m\",\n        [\n            \"application/pkcs7-mime\",\n            \"application/x-pkcs7-mime\"\n        ]\n    ],\n    [\n        \"p7r\",\n        \"application/x-pkcs7-certreqresp\"\n    ],\n    [\n        \"p7s\",\n        [\n            \"application/pkcs7-signature\",\n            \"application/x-pkcs7-signature\"\n        ]\n    ],\n    [\n        \"p8\",\n        \"application/pkcs8\"\n    ],\n    [\n        \"par\",\n        \"text/plain-bas\"\n    ],\n    [\n        \"part\",\n        \"application/pro_eng\"\n    ],\n    [\n        \"pas\",\n        \"text/pascal\"\n    ],\n    [\n        \"paw\",\n        \"application/vnd.pawaafile\"\n    ],\n    [\n        \"pbd\",\n        \"application/vnd.powerbuilder6\"\n    ],\n    [\n        \"pbm\",\n        \"image/x-portable-bitmap\"\n    ],\n    [\n        \"pcf\",\n        \"application/x-font-pcf\"\n    ],\n    [\n        \"pcl\",\n        [\n            \"application/vnd.hp-pcl\",\n            \"application/x-pcl\"\n        ]\n    ],\n    [\n        \"pclxl\",\n        \"application/vnd.hp-pclxl\"\n    ],\n    [\n        \"pct\",\n        \"image/x-pict\"\n    ],\n    [\n        \"pcurl\",\n        \"application/vnd.curl.pcurl\"\n    ],\n    [\n        \"pcx\",\n        \"image/x-pcx\"\n    ],\n    [\n        \"pdb\",\n        [\n            \"application/vnd.palm\",\n            \"chemical/x-pdb\"\n        ]\n    ],\n    [\n        \"pdf\",\n        \"application/pdf\"\n    ],\n    [\n        \"pfa\",\n        \"application/x-font-type1\"\n    ],\n    [\n        \"pfr\",\n        \"application/font-tdpfr\"\n    ],\n    [\n        \"pfunk\",\n        [\n            \"audio/make\",\n            \"audio/make.my.funk\"\n        ]\n    ],\n    [\n        \"pfx\",\n        \"application/x-pkcs12\"\n    ],\n    [\n        \"pgm\",\n        [\n            \"image/x-portable-graymap\",\n            \"image/x-portable-greymap\"\n        ]\n    ],\n    [\n        \"pgn\",\n        \"application/x-chess-pgn\"\n    ],\n    [\n        \"pgp\",\n        \"application/pgp-signature\"\n    ],\n    [\n        \"pic\",\n        [\n            \"image/pict\",\n            \"image/x-pict\"\n        ]\n    ],\n    [\n        \"pict\",\n        \"image/pict\"\n    ],\n    [\n        \"pkg\",\n        \"application/x-newton-compatible-pkg\"\n    ],\n    [\n        \"pki\",\n        \"application/pkixcmp\"\n    ],\n    [\n        \"pkipath\",\n        \"application/pkix-pkipath\"\n    ],\n    [\n        \"pko\",\n        [\n            \"application/ynd.ms-pkipko\",\n            \"application/vnd.ms-pki.pko\"\n        ]\n    ],\n    [\n        \"pl\",\n        [\n            \"text/plain\",\n            \"text/x-script.perl\"\n        ]\n    ],\n    [\n        \"plb\",\n        \"application/vnd.3gpp.pic-bw-large\"\n    ],\n    [\n        \"plc\",\n        \"application/vnd.mobius.plc\"\n    ],\n    [\n        \"plf\",\n        \"application/vnd.pocketlearn\"\n    ],\n    [\n        \"pls\",\n        \"application/pls+xml\"\n    ],\n    [\n        \"plx\",\n        \"application/x-pixclscript\"\n    ],\n    [\n        \"pm\",\n        [\n            \"text/x-script.perl-module\",\n            \"image/x-xpixmap\"\n        ]\n    ],\n    [\n        \"pm4\",\n        \"application/x-pagemaker\"\n    ],\n    [\n        \"pm5\",\n        \"application/x-pagemaker\"\n    ],\n    [\n        \"pma\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"pmc\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"pml\",\n        [\n            \"application/vnd.ctc-posml\",\n            \"application/x-perfmon\"\n        ]\n    ],\n    [\n        \"pmr\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"pmw\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"png\",\n        \"image/png\"\n    ],\n    [\n        \"pnm\",\n        [\n            \"application/x-portable-anymap\",\n            \"image/x-portable-anymap\"\n        ]\n    ],\n    [\n        \"portpkg\",\n        \"application/vnd.macports.portpkg\"\n    ],\n    [\n        \"pot\",\n        [\n            \"application/vnd.ms-powerpoint\",\n            \"application/mspowerpoint\"\n        ]\n    ],\n    [\n        \"potm\",\n        \"application/vnd.ms-powerpoint.template.macroenabled.12\"\n    ],\n    [\n        \"potx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.template\"\n    ],\n    [\n        \"pov\",\n        \"model/x-pov\"\n    ],\n    [\n        \"ppa\",\n        \"application/vnd.ms-powerpoint\"\n    ],\n    [\n        \"ppam\",\n        \"application/vnd.ms-powerpoint.addin.macroenabled.12\"\n    ],\n    [\n        \"ppd\",\n        \"application/vnd.cups-ppd\"\n    ],\n    [\n        \"ppm\",\n        \"image/x-portable-pixmap\"\n    ],\n    [\n        \"pps\",\n        [\n            \"application/vnd.ms-powerpoint\",\n            \"application/mspowerpoint\"\n        ]\n    ],\n    [\n        \"ppsm\",\n        \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\"\n    ],\n    [\n        \"ppsx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\"\n    ],\n    [\n        \"ppt\",\n        [\n            \"application/vnd.ms-powerpoint\",\n            \"application/mspowerpoint\",\n            \"application/powerpoint\",\n            \"application/x-mspowerpoint\"\n        ]\n    ],\n    [\n        \"pptm\",\n        \"application/vnd.ms-powerpoint.presentation.macroenabled.12\"\n    ],\n    [\n        \"pptx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n    ],\n    [\n        \"ppz\",\n        \"application/mspowerpoint\"\n    ],\n    [\n        \"prc\",\n        \"application/x-mobipocket-ebook\"\n    ],\n    [\n        \"pre\",\n        [\n            \"application/vnd.lotus-freelance\",\n            \"application/x-freelance\"\n        ]\n    ],\n    [\n        \"prf\",\n        \"application/pics-rules\"\n    ],\n    [\n        \"prt\",\n        \"application/pro_eng\"\n    ],\n    [\n        \"ps\",\n        \"application/postscript\"\n    ],\n    [\n        \"psb\",\n        \"application/vnd.3gpp.pic-bw-small\"\n    ],\n    [\n        \"psd\",\n        [\n            \"application/octet-stream\",\n            \"image/vnd.adobe.photoshop\"\n        ]\n    ],\n    [\n        \"psf\",\n        \"application/x-font-linux-psf\"\n    ],\n    [\n        \"pskcxml\",\n        \"application/pskc+xml\"\n    ],\n    [\n        \"ptid\",\n        \"application/vnd.pvi.ptid1\"\n    ],\n    [\n        \"pub\",\n        \"application/x-mspublisher\"\n    ],\n    [\n        \"pvb\",\n        \"application/vnd.3gpp.pic-bw-var\"\n    ],\n    [\n        \"pvu\",\n        \"paleovu/x-pv\"\n    ],\n    [\n        \"pwn\",\n        \"application/vnd.3m.post-it-notes\"\n    ],\n    [\n        \"pwz\",\n        \"application/vnd.ms-powerpoint\"\n    ],\n    [\n        \"py\",\n        \"text/x-script.phyton\"\n    ],\n    [\n        \"pya\",\n        \"audio/vnd.ms-playready.media.pya\"\n    ],\n    [\n        \"pyc\",\n        \"application/x-bytecode.python\"\n    ],\n    [\n        \"pyv\",\n        \"video/vnd.ms-playready.media.pyv\"\n    ],\n    [\n        \"qam\",\n        \"application/vnd.epson.quickanime\"\n    ],\n    [\n        \"qbo\",\n        \"application/vnd.intu.qbo\"\n    ],\n    [\n        \"qcp\",\n        \"audio/vnd.qcelp\"\n    ],\n    [\n        \"qd3\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"qd3d\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"qfx\",\n        \"application/vnd.intu.qfx\"\n    ],\n    [\n        \"qif\",\n        \"image/x-quicktime\"\n    ],\n    [\n        \"qps\",\n        \"application/vnd.publishare-delta-tree\"\n    ],\n    [\n        \"qt\",\n        \"video/quicktime\"\n    ],\n    [\n        \"qtc\",\n        \"video/x-qtc\"\n    ],\n    [\n        \"qti\",\n        \"image/x-quicktime\"\n    ],\n    [\n        \"qtif\",\n        \"image/x-quicktime\"\n    ],\n    [\n        \"qxd\",\n        \"application/vnd.quark.quarkxpress\"\n    ],\n    [\n        \"ra\",\n        [\n            \"audio/x-realaudio\",\n            \"audio/x-pn-realaudio\",\n            \"audio/x-pn-realaudio-plugin\"\n        ]\n    ],\n    [\n        \"ram\",\n        \"audio/x-pn-realaudio\"\n    ],\n    [\n        \"rar\",\n        \"application/x-rar-compressed\"\n    ],\n    [\n        \"ras\",\n        [\n            \"image/cmu-raster\",\n            \"application/x-cmu-raster\",\n            \"image/x-cmu-raster\"\n        ]\n    ],\n    [\n        \"rast\",\n        \"image/cmu-raster\"\n    ],\n    [\n        \"rcprofile\",\n        \"application/vnd.ipunplugged.rcprofile\"\n    ],\n    [\n        \"rdf\",\n        \"application/rdf+xml\"\n    ],\n    [\n        \"rdz\",\n        \"application/vnd.data-vision.rdz\"\n    ],\n    [\n        \"rep\",\n        \"application/vnd.businessobjects\"\n    ],\n    [\n        \"res\",\n        \"application/x-dtbresource+xml\"\n    ],\n    [\n        \"rexx\",\n        \"text/x-script.rexx\"\n    ],\n    [\n        \"rf\",\n        \"image/vnd.rn-realflash\"\n    ],\n    [\n        \"rgb\",\n        \"image/x-rgb\"\n    ],\n    [\n        \"rif\",\n        \"application/reginfo+xml\"\n    ],\n    [\n        \"rip\",\n        \"audio/vnd.rip\"\n    ],\n    [\n        \"rl\",\n        \"application/resource-lists+xml\"\n    ],\n    [\n        \"rlc\",\n        \"image/vnd.fujixerox.edmics-rlc\"\n    ],\n    [\n        \"rld\",\n        \"application/resource-lists-diff+xml\"\n    ],\n    [\n        \"rm\",\n        [\n            \"application/vnd.rn-realmedia\",\n            \"audio/x-pn-realaudio\"\n        ]\n    ],\n    [\n        \"rmi\",\n        \"audio/mid\"\n    ],\n    [\n        \"rmm\",\n        \"audio/x-pn-realaudio\"\n    ],\n    [\n        \"rmp\",\n        [\n            \"audio/x-pn-realaudio-plugin\",\n            \"audio/x-pn-realaudio\"\n        ]\n    ],\n    [\n        \"rms\",\n        \"application/vnd.jcp.javame.midlet-rms\"\n    ],\n    [\n        \"rnc\",\n        \"application/relax-ng-compact-syntax\"\n    ],\n    [\n        \"rng\",\n        [\n            \"application/ringing-tones\",\n            \"application/vnd.nokia.ringing-tone\"\n        ]\n    ],\n    [\n        \"rnx\",\n        \"application/vnd.rn-realplayer\"\n    ],\n    [\n        \"roff\",\n        \"application/x-troff\"\n    ],\n    [\n        \"rp\",\n        \"image/vnd.rn-realpix\"\n    ],\n    [\n        \"rp9\",\n        \"application/vnd.cloanto.rp9\"\n    ],\n    [\n        \"rpm\",\n        \"audio/x-pn-realaudio-plugin\"\n    ],\n    [\n        \"rpss\",\n        \"application/vnd.nokia.radio-presets\"\n    ],\n    [\n        \"rpst\",\n        \"application/vnd.nokia.radio-preset\"\n    ],\n    [\n        \"rq\",\n        \"application/sparql-query\"\n    ],\n    [\n        \"rs\",\n        \"application/rls-services+xml\"\n    ],\n    [\n        \"rsd\",\n        \"application/rsd+xml\"\n    ],\n    [\n        \"rt\",\n        [\n            \"text/richtext\",\n            \"text/vnd.rn-realtext\"\n        ]\n    ],\n    [\n        \"rtf\",\n        [\n            \"application/rtf\",\n            \"text/richtext\",\n            \"application/x-rtf\"\n        ]\n    ],\n    [\n        \"rtx\",\n        [\n            \"text/richtext\",\n            \"application/rtf\"\n        ]\n    ],\n    [\n        \"rv\",\n        \"video/vnd.rn-realvideo\"\n    ],\n    [\n        \"s\",\n        \"text/x-asm\"\n    ],\n    [\n        \"s3m\",\n        \"audio/s3m\"\n    ],\n    [\n        \"saf\",\n        \"application/vnd.yamaha.smaf-audio\"\n    ],\n    [\n        \"saveme\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"sbk\",\n        \"application/x-tbook\"\n    ],\n    [\n        \"sbml\",\n        \"application/sbml+xml\"\n    ],\n    [\n        \"sc\",\n        \"application/vnd.ibm.secure-container\"\n    ],\n    [\n        \"scd\",\n        \"application/x-msschedule\"\n    ],\n    [\n        \"scm\",\n        [\n            \"application/vnd.lotus-screencam\",\n            \"video/x-scm\",\n            \"text/x-script.guile\",\n            \"application/x-lotusscreencam\",\n            \"text/x-script.scheme\"\n        ]\n    ],\n    [\n        \"scq\",\n        \"application/scvp-cv-request\"\n    ],\n    [\n        \"scs\",\n        \"application/scvp-cv-response\"\n    ],\n    [\n        \"sct\",\n        \"text/scriptlet\"\n    ],\n    [\n        \"scurl\",\n        \"text/vnd.curl.scurl\"\n    ],\n    [\n        \"sda\",\n        \"application/vnd.stardivision.draw\"\n    ],\n    [\n        \"sdc\",\n        \"application/vnd.stardivision.calc\"\n    ],\n    [\n        \"sdd\",\n        \"application/vnd.stardivision.impress\"\n    ],\n    [\n        \"sdkm\",\n        \"application/vnd.solent.sdkm+xml\"\n    ],\n    [\n        \"sdml\",\n        \"text/plain\"\n    ],\n    [\n        \"sdp\",\n        [\n            \"application/sdp\",\n            \"application/x-sdp\"\n        ]\n    ],\n    [\n        \"sdr\",\n        \"application/sounder\"\n    ],\n    [\n        \"sdw\",\n        \"application/vnd.stardivision.writer\"\n    ],\n    [\n        \"sea\",\n        [\n            \"application/sea\",\n            \"application/x-sea\"\n        ]\n    ],\n    [\n        \"see\",\n        \"application/vnd.seemail\"\n    ],\n    [\n        \"seed\",\n        \"application/vnd.fdsn.seed\"\n    ],\n    [\n        \"sema\",\n        \"application/vnd.sema\"\n    ],\n    [\n        \"semd\",\n        \"application/vnd.semd\"\n    ],\n    [\n        \"semf\",\n        \"application/vnd.semf\"\n    ],\n    [\n        \"ser\",\n        \"application/java-serialized-object\"\n    ],\n    [\n        \"set\",\n        \"application/set\"\n    ],\n    [\n        \"setpay\",\n        \"application/set-payment-initiation\"\n    ],\n    [\n        \"setreg\",\n        \"application/set-registration-initiation\"\n    ],\n    [\n        \"sfd-hdstx\",\n        \"application/vnd.hydrostatix.sof-data\"\n    ],\n    [\n        \"sfs\",\n        \"application/vnd.spotfire.sfs\"\n    ],\n    [\n        \"sgl\",\n        \"application/vnd.stardivision.writer-global\"\n    ],\n    [\n        \"sgm\",\n        [\n            \"text/sgml\",\n            \"text/x-sgml\"\n        ]\n    ],\n    [\n        \"sgml\",\n        [\n            \"text/sgml\",\n            \"text/x-sgml\"\n        ]\n    ],\n    [\n        \"sh\",\n        [\n            \"application/x-shar\",\n            \"application/x-bsh\",\n            \"application/x-sh\",\n            \"text/x-script.sh\"\n        ]\n    ],\n    [\n        \"shar\",\n        [\n            \"application/x-bsh\",\n            \"application/x-shar\"\n        ]\n    ],\n    [\n        \"shf\",\n        \"application/shf+xml\"\n    ],\n    [\n        \"shtml\",\n        [\n            \"text/html\",\n            \"text/x-server-parsed-html\"\n        ]\n    ],\n    [\n        \"sid\",\n        \"audio/x-psid\"\n    ],\n    [\n        \"sis\",\n        \"application/vnd.symbian.install\"\n    ],\n    [\n        \"sit\",\n        [\n            \"application/x-stuffit\",\n            \"application/x-sit\"\n        ]\n    ],\n    [\n        \"sitx\",\n        \"application/x-stuffitx\"\n    ],\n    [\n        \"skd\",\n        \"application/x-koan\"\n    ],\n    [\n        \"skm\",\n        \"application/x-koan\"\n    ],\n    [\n        \"skp\",\n        [\n            \"application/vnd.koan\",\n            \"application/x-koan\"\n        ]\n    ],\n    [\n        \"skt\",\n        \"application/x-koan\"\n    ],\n    [\n        \"sl\",\n        \"application/x-seelogo\"\n    ],\n    [\n        \"sldm\",\n        \"application/vnd.ms-powerpoint.slide.macroenabled.12\"\n    ],\n    [\n        \"sldx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.slide\"\n    ],\n    [\n        \"slt\",\n        \"application/vnd.epson.salt\"\n    ],\n    [\n        \"sm\",\n        \"application/vnd.stepmania.stepchart\"\n    ],\n    [\n        \"smf\",\n        \"application/vnd.stardivision.math\"\n    ],\n    [\n        \"smi\",\n        [\n            \"application/smil\",\n            \"application/smil+xml\"\n        ]\n    ],\n    [\n        \"smil\",\n        \"application/smil\"\n    ],\n    [\n        \"snd\",\n        [\n            \"audio/basic\",\n            \"audio/x-adpcm\"\n        ]\n    ],\n    [\n        \"snf\",\n        \"application/x-font-snf\"\n    ],\n    [\n        \"sol\",\n        \"application/solids\"\n    ],\n    [\n        \"spc\",\n        [\n            \"text/x-speech\",\n            \"application/x-pkcs7-certificates\"\n        ]\n    ],\n    [\n        \"spf\",\n        \"application/vnd.yamaha.smaf-phrase\"\n    ],\n    [\n        \"spl\",\n        [\n            \"application/futuresplash\",\n            \"application/x-futuresplash\"\n        ]\n    ],\n    [\n        \"spot\",\n        \"text/vnd.in3d.spot\"\n    ],\n    [\n        \"spp\",\n        \"application/scvp-vp-response\"\n    ],\n    [\n        \"spq\",\n        \"application/scvp-vp-request\"\n    ],\n    [\n        \"spr\",\n        \"application/x-sprite\"\n    ],\n    [\n        \"sprite\",\n        \"application/x-sprite\"\n    ],\n    [\n        \"src\",\n        \"application/x-wais-source\"\n    ],\n    [\n        \"sru\",\n        \"application/sru+xml\"\n    ],\n    [\n        \"srx\",\n        \"application/sparql-results+xml\"\n    ],\n    [\n        \"sse\",\n        \"application/vnd.kodak-descriptor\"\n    ],\n    [\n        \"ssf\",\n        \"application/vnd.epson.ssf\"\n    ],\n    [\n        \"ssi\",\n        \"text/x-server-parsed-html\"\n    ],\n    [\n        \"ssm\",\n        \"application/streamingmedia\"\n    ],\n    [\n        \"ssml\",\n        \"application/ssml+xml\"\n    ],\n    [\n        \"sst\",\n        [\n            \"application/vnd.ms-pkicertstore\",\n            \"application/vnd.ms-pki.certstore\"\n        ]\n    ],\n    [\n        \"st\",\n        \"application/vnd.sailingtracker.track\"\n    ],\n    [\n        \"stc\",\n        \"application/vnd.sun.xml.calc.template\"\n    ],\n    [\n        \"std\",\n        \"application/vnd.sun.xml.draw.template\"\n    ],\n    [\n        \"step\",\n        \"application/step\"\n    ],\n    [\n        \"stf\",\n        \"application/vnd.wt.stf\"\n    ],\n    [\n        \"sti\",\n        \"application/vnd.sun.xml.impress.template\"\n    ],\n    [\n        \"stk\",\n        \"application/hyperstudio\"\n    ],\n    [\n        \"stl\",\n        [\n            \"application/vnd.ms-pkistl\",\n            \"application/sla\",\n            \"application/vnd.ms-pki.stl\",\n            \"application/x-navistyle\"\n        ]\n    ],\n    [\n        \"stm\",\n        \"text/html\"\n    ],\n    [\n        \"stp\",\n        \"application/step\"\n    ],\n    [\n        \"str\",\n        \"application/vnd.pg.format\"\n    ],\n    [\n        \"stw\",\n        \"application/vnd.sun.xml.writer.template\"\n    ],\n    [\n        \"sub\",\n        \"image/vnd.dvb.subtitle\"\n    ],\n    [\n        \"sus\",\n        \"application/vnd.sus-calendar\"\n    ],\n    [\n        \"sv4cpio\",\n        \"application/x-sv4cpio\"\n    ],\n    [\n        \"sv4crc\",\n        \"application/x-sv4crc\"\n    ],\n    [\n        \"svc\",\n        \"application/vnd.dvb.service\"\n    ],\n    [\n        \"svd\",\n        \"application/vnd.svd\"\n    ],\n    [\n        \"svf\",\n        [\n            \"image/vnd.dwg\",\n            \"image/x-dwg\"\n        ]\n    ],\n    [\n        \"svg\",\n        \"image/svg+xml\"\n    ],\n    [\n        \"svr\",\n        [\n            \"x-world/x-svr\",\n            \"application/x-world\"\n        ]\n    ],\n    [\n        \"swf\",\n        \"application/x-shockwave-flash\"\n    ],\n    [\n        \"swi\",\n        \"application/vnd.aristanetworks.swi\"\n    ],\n    [\n        \"sxc\",\n        \"application/vnd.sun.xml.calc\"\n    ],\n    [\n        \"sxd\",\n        \"application/vnd.sun.xml.draw\"\n    ],\n    [\n        \"sxg\",\n        \"application/vnd.sun.xml.writer.global\"\n    ],\n    [\n        \"sxi\",\n        \"application/vnd.sun.xml.impress\"\n    ],\n    [\n        \"sxm\",\n        \"application/vnd.sun.xml.math\"\n    ],\n    [\n        \"sxw\",\n        \"application/vnd.sun.xml.writer\"\n    ],\n    [\n        \"t\",\n        [\n            \"text/troff\",\n            \"application/x-troff\"\n        ]\n    ],\n    [\n        \"talk\",\n        \"text/x-speech\"\n    ],\n    [\n        \"tao\",\n        \"application/vnd.tao.intent-module-archive\"\n    ],\n    [\n        \"tar\",\n        \"application/x-tar\"\n    ],\n    [\n        \"tbk\",\n        [\n            \"application/toolbook\",\n            \"application/x-tbook\"\n        ]\n    ],\n    [\n        \"tcap\",\n        \"application/vnd.3gpp2.tcap\"\n    ],\n    [\n        \"tcl\",\n        [\n            \"text/x-script.tcl\",\n            \"application/x-tcl\"\n        ]\n    ],\n    [\n        \"tcsh\",\n        \"text/x-script.tcsh\"\n    ],\n    [\n        \"teacher\",\n        \"application/vnd.smart.teacher\"\n    ],\n    [\n        \"tei\",\n        \"application/tei+xml\"\n    ],\n    [\n        \"tex\",\n        \"application/x-tex\"\n    ],\n    [\n        \"texi\",\n        \"application/x-texinfo\"\n    ],\n    [\n        \"texinfo\",\n        \"application/x-texinfo\"\n    ],\n    [\n        \"text\",\n        [\n            \"application/plain\",\n            \"text/plain\"\n        ]\n    ],\n    [\n        \"tfi\",\n        \"application/thraud+xml\"\n    ],\n    [\n        \"tfm\",\n        \"application/x-tex-tfm\"\n    ],\n    [\n        \"tgz\",\n        [\n            \"application/gnutar\",\n            \"application/x-compressed\"\n        ]\n    ],\n    [\n        \"thmx\",\n        \"application/vnd.ms-officetheme\"\n    ],\n    [\n        \"tif\",\n        [\n            \"image/tiff\",\n            \"image/x-tiff\"\n        ]\n    ],\n    [\n        \"tiff\",\n        [\n            \"image/tiff\",\n            \"image/x-tiff\"\n        ]\n    ],\n    [\n        \"tmo\",\n        \"application/vnd.tmobile-livetv\"\n    ],\n    [\n        \"torrent\",\n        \"application/x-bittorrent\"\n    ],\n    [\n        \"tpl\",\n        \"application/vnd.groove-tool-template\"\n    ],\n    [\n        \"tpt\",\n        \"application/vnd.trid.tpt\"\n    ],\n    [\n        \"tr\",\n        \"application/x-troff\"\n    ],\n    [\n        \"tra\",\n        \"application/vnd.trueapp\"\n    ],\n    [\n        \"trm\",\n        \"application/x-msterminal\"\n    ],\n    [\n        \"tsd\",\n        \"application/timestamped-data\"\n    ],\n    [\n        \"tsi\",\n        \"audio/tsp-audio\"\n    ],\n    [\n        \"tsp\",\n        [\n            \"application/dsptype\",\n            \"audio/tsplayer\"\n        ]\n    ],\n    [\n        \"tsv\",\n        \"text/tab-separated-values\"\n    ],\n    [\n        \"ttf\",\n        \"application/x-font-ttf\"\n    ],\n    [\n        \"ttl\",\n        \"text/turtle\"\n    ],\n    [\n        \"turbot\",\n        \"image/florian\"\n    ],\n    [\n        \"twd\",\n        \"application/vnd.simtech-mindmapper\"\n    ],\n    [\n        \"txd\",\n        \"application/vnd.genomatix.tuxedo\"\n    ],\n    [\n        \"txf\",\n        \"application/vnd.mobius.txf\"\n    ],\n    [\n        \"txt\",\n        \"text/plain\"\n    ],\n    [\n        \"ufd\",\n        \"application/vnd.ufdl\"\n    ],\n    [\n        \"uil\",\n        \"text/x-uil\"\n    ],\n    [\n        \"uls\",\n        \"text/iuls\"\n    ],\n    [\n        \"umj\",\n        \"application/vnd.umajin\"\n    ],\n    [\n        \"uni\",\n        \"text/uri-list\"\n    ],\n    [\n        \"unis\",\n        \"text/uri-list\"\n    ],\n    [\n        \"unityweb\",\n        \"application/vnd.unity\"\n    ],\n    [\n        \"unv\",\n        \"application/i-deas\"\n    ],\n    [\n        \"uoml\",\n        \"application/vnd.uoml+xml\"\n    ],\n    [\n        \"uri\",\n        \"text/uri-list\"\n    ],\n    [\n        \"uris\",\n        \"text/uri-list\"\n    ],\n    [\n        \"ustar\",\n        [\n            \"application/x-ustar\",\n            \"multipart/x-ustar\"\n        ]\n    ],\n    [\n        \"utz\",\n        \"application/vnd.uiq.theme\"\n    ],\n    [\n        \"uu\",\n        [\n            \"application/octet-stream\",\n            \"text/x-uuencode\"\n        ]\n    ],\n    [\n        \"uue\",\n        \"text/x-uuencode\"\n    ],\n    [\n        \"uva\",\n        \"audio/vnd.dece.audio\"\n    ],\n    [\n        \"uvh\",\n        \"video/vnd.dece.hd\"\n    ],\n    [\n        \"uvi\",\n        \"image/vnd.dece.graphic\"\n    ],\n    [\n        \"uvm\",\n        \"video/vnd.dece.mobile\"\n    ],\n    [\n        \"uvp\",\n        \"video/vnd.dece.pd\"\n    ],\n    [\n        \"uvs\",\n        \"video/vnd.dece.sd\"\n    ],\n    [\n        \"uvu\",\n        \"video/vnd.uvvu.mp4\"\n    ],\n    [\n        \"uvv\",\n        \"video/vnd.dece.video\"\n    ],\n    [\n        \"vcd\",\n        \"application/x-cdlink\"\n    ],\n    [\n        \"vcf\",\n        \"text/x-vcard\"\n    ],\n    [\n        \"vcg\",\n        \"application/vnd.groove-vcard\"\n    ],\n    [\n        \"vcs\",\n        \"text/x-vcalendar\"\n    ],\n    [\n        \"vcx\",\n        \"application/vnd.vcx\"\n    ],\n    [\n        \"vda\",\n        \"application/vda\"\n    ],\n    [\n        \"vdo\",\n        \"video/vdo\"\n    ],\n    [\n        \"vew\",\n        \"application/groupwise\"\n    ],\n    [\n        \"vis\",\n        \"application/vnd.visionary\"\n    ],\n    [\n        \"viv\",\n        [\n            \"video/vivo\",\n            \"video/vnd.vivo\"\n        ]\n    ],\n    [\n        \"vivo\",\n        [\n            \"video/vivo\",\n            \"video/vnd.vivo\"\n        ]\n    ],\n    [\n        \"vmd\",\n        \"application/vocaltec-media-desc\"\n    ],\n    [\n        \"vmf\",\n        \"application/vocaltec-media-file\"\n    ],\n    [\n        \"voc\",\n        [\n            \"audio/voc\",\n            \"audio/x-voc\"\n        ]\n    ],\n    [\n        \"vos\",\n        \"video/vosaic\"\n    ],\n    [\n        \"vox\",\n        \"audio/voxware\"\n    ],\n    [\n        \"vqe\",\n        \"audio/x-twinvq-plugin\"\n    ],\n    [\n        \"vqf\",\n        \"audio/x-twinvq\"\n    ],\n    [\n        \"vql\",\n        \"audio/x-twinvq-plugin\"\n    ],\n    [\n        \"vrml\",\n        [\n            \"model/vrml\",\n            \"x-world/x-vrml\",\n            \"application/x-vrml\"\n        ]\n    ],\n    [\n        \"vrt\",\n        \"x-world/x-vrt\"\n    ],\n    [\n        \"vsd\",\n        [\n            \"application/vnd.visio\",\n            \"application/x-visio\"\n        ]\n    ],\n    [\n        \"vsf\",\n        \"application/vnd.vsf\"\n    ],\n    [\n        \"vst\",\n        \"application/x-visio\"\n    ],\n    [\n        \"vsw\",\n        \"application/x-visio\"\n    ],\n    [\n        \"vtu\",\n        \"model/vnd.vtu\"\n    ],\n    [\n        \"vxml\",\n        \"application/voicexml+xml\"\n    ],\n    [\n        \"w60\",\n        \"application/wordperfect6.0\"\n    ],\n    [\n        \"w61\",\n        \"application/wordperfect6.1\"\n    ],\n    [\n        \"w6w\",\n        \"application/msword\"\n    ],\n    [\n        \"wad\",\n        \"application/x-doom\"\n    ],\n    [\n        \"wav\",\n        [\n            \"audio/wav\",\n            \"audio/x-wav\"\n        ]\n    ],\n    [\n        \"wax\",\n        \"audio/x-ms-wax\"\n    ],\n    [\n        \"wb1\",\n        \"application/x-qpro\"\n    ],\n    [\n        \"wbmp\",\n        \"image/vnd.wap.wbmp\"\n    ],\n    [\n        \"wbs\",\n        \"application/vnd.criticaltools.wbs+xml\"\n    ],\n    [\n        \"wbxml\",\n        \"application/vnd.wap.wbxml\"\n    ],\n    [\n        \"wcm\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"wdb\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"web\",\n        \"application/vnd.xara\"\n    ],\n    [\n        \"weba\",\n        \"audio/webm\"\n    ],\n    [\n        \"webm\",\n        \"video/webm\"\n    ],\n    [\n        \"webp\",\n        \"image/webp\"\n    ],\n    [\n        \"wg\",\n        \"application/vnd.pmi.widget\"\n    ],\n    [\n        \"wgt\",\n        \"application/widget\"\n    ],\n    [\n        \"wiz\",\n        \"application/msword\"\n    ],\n    [\n        \"wk1\",\n        \"application/x-123\"\n    ],\n    [\n        \"wks\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"wm\",\n        \"video/x-ms-wm\"\n    ],\n    [\n        \"wma\",\n        \"audio/x-ms-wma\"\n    ],\n    [\n        \"wmd\",\n        \"application/x-ms-wmd\"\n    ],\n    [\n        \"wmf\",\n        [\n            \"windows/metafile\",\n            \"application/x-msmetafile\"\n        ]\n    ],\n    [\n        \"wml\",\n        \"text/vnd.wap.wml\"\n    ],\n    [\n        \"wmlc\",\n        \"application/vnd.wap.wmlc\"\n    ],\n    [\n        \"wmls\",\n        \"text/vnd.wap.wmlscript\"\n    ],\n    [\n        \"wmlsc\",\n        \"application/vnd.wap.wmlscriptc\"\n    ],\n    [\n        \"wmv\",\n        \"video/x-ms-wmv\"\n    ],\n    [\n        \"wmx\",\n        \"video/x-ms-wmx\"\n    ],\n    [\n        \"wmz\",\n        \"application/x-ms-wmz\"\n    ],\n    [\n        \"woff\",\n        \"application/x-font-woff\"\n    ],\n    [\n        \"word\",\n        \"application/msword\"\n    ],\n    [\n        \"wp\",\n        \"application/wordperfect\"\n    ],\n    [\n        \"wp5\",\n        [\n            \"application/wordperfect\",\n            \"application/wordperfect6.0\"\n        ]\n    ],\n    [\n        \"wp6\",\n        \"application/wordperfect\"\n    ],\n    [\n        \"wpd\",\n        [\n            \"application/wordperfect\",\n            \"application/vnd.wordperfect\",\n            \"application/x-wpwin\"\n        ]\n    ],\n    [\n        \"wpl\",\n        \"application/vnd.ms-wpl\"\n    ],\n    [\n        \"wps\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"wq1\",\n        \"application/x-lotus\"\n    ],\n    [\n        \"wqd\",\n        \"application/vnd.wqd\"\n    ],\n    [\n        \"wri\",\n        [\n            \"application/mswrite\",\n            \"application/x-wri\",\n            \"application/x-mswrite\"\n        ]\n    ],\n    [\n        \"wrl\",\n        [\n            \"model/vrml\",\n            \"x-world/x-vrml\",\n            \"application/x-world\"\n        ]\n    ],\n    [\n        \"wrz\",\n        [\n            \"model/vrml\",\n            \"x-world/x-vrml\"\n        ]\n    ],\n    [\n        \"wsc\",\n        \"text/scriplet\"\n    ],\n    [\n        \"wsdl\",\n        \"application/wsdl+xml\"\n    ],\n    [\n        \"wspolicy\",\n        \"application/wspolicy+xml\"\n    ],\n    [\n        \"wsrc\",\n        \"application/x-wais-source\"\n    ],\n    [\n        \"wtb\",\n        \"application/vnd.webturbo\"\n    ],\n    [\n        \"wtk\",\n        \"application/x-wintalk\"\n    ],\n    [\n        \"wvx\",\n        \"video/x-ms-wvx\"\n    ],\n    [\n        \"x-png\",\n        \"image/png\"\n    ],\n    [\n        \"x3d\",\n        \"application/vnd.hzn-3d-crossword\"\n    ],\n    [\n        \"xaf\",\n        \"x-world/x-vrml\"\n    ],\n    [\n        \"xap\",\n        \"application/x-silverlight-app\"\n    ],\n    [\n        \"xar\",\n        \"application/vnd.xara\"\n    ],\n    [\n        \"xbap\",\n        \"application/x-ms-xbap\"\n    ],\n    [\n        \"xbd\",\n        \"application/vnd.fujixerox.docuworks.binder\"\n    ],\n    [\n        \"xbm\",\n        [\n            \"image/xbm\",\n            \"image/x-xbm\",\n            \"image/x-xbitmap\"\n        ]\n    ],\n    [\n        \"xdf\",\n        \"application/xcap-diff+xml\"\n    ],\n    [\n        \"xdm\",\n        \"application/vnd.syncml.dm+xml\"\n    ],\n    [\n        \"xdp\",\n        \"application/vnd.adobe.xdp+xml\"\n    ],\n    [\n        \"xdr\",\n        \"video/x-amt-demorun\"\n    ],\n    [\n        \"xdssc\",\n        \"application/dssc+xml\"\n    ],\n    [\n        \"xdw\",\n        \"application/vnd.fujixerox.docuworks\"\n    ],\n    [\n        \"xenc\",\n        \"application/xenc+xml\"\n    ],\n    [\n        \"xer\",\n        \"application/patch-ops-error+xml\"\n    ],\n    [\n        \"xfdf\",\n        \"application/vnd.adobe.xfdf\"\n    ],\n    [\n        \"xfdl\",\n        \"application/vnd.xfdl\"\n    ],\n    [\n        \"xgz\",\n        \"xgl/drawing\"\n    ],\n    [\n        \"xhtml\",\n        \"application/xhtml+xml\"\n    ],\n    [\n        \"xif\",\n        \"image/vnd.xiff\"\n    ],\n    [\n        \"xl\",\n        \"application/excel\"\n    ],\n    [\n        \"xla\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-msexcel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlam\",\n        \"application/vnd.ms-excel.addin.macroenabled.12\"\n    ],\n    [\n        \"xlb\",\n        [\n            \"application/excel\",\n            \"application/vnd.ms-excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlc\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xld\",\n        [\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlk\",\n        [\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xll\",\n        [\n            \"application/excel\",\n            \"application/vnd.ms-excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlm\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xls\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-msexcel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlsb\",\n        \"application/vnd.ms-excel.sheet.binary.macroenabled.12\"\n    ],\n    [\n        \"xlsm\",\n        \"application/vnd.ms-excel.sheet.macroenabled.12\"\n    ],\n    [\n        \"xlsx\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ],\n    [\n        \"xlt\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xltm\",\n        \"application/vnd.ms-excel.template.macroenabled.12\"\n    ],\n    [\n        \"xltx\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\"\n    ],\n    [\n        \"xlv\",\n        [\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlw\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-msexcel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xm\",\n        \"audio/xm\"\n    ],\n    [\n        \"xml\",\n        [\n            \"application/xml\",\n            \"text/xml\",\n            \"application/atom+xml\",\n            \"application/rss+xml\"\n        ]\n    ],\n    [\n        \"xmz\",\n        \"xgl/movie\"\n    ],\n    [\n        \"xo\",\n        \"application/vnd.olpc-sugar\"\n    ],\n    [\n        \"xof\",\n        \"x-world/x-vrml\"\n    ],\n    [\n        \"xop\",\n        \"application/xop+xml\"\n    ],\n    [\n        \"xpi\",\n        \"application/x-xpinstall\"\n    ],\n    [\n        \"xpix\",\n        \"application/x-vnd.ls-xpix\"\n    ],\n    [\n        \"xpm\",\n        [\n            \"image/xpm\",\n            \"image/x-xpixmap\"\n        ]\n    ],\n    [\n        \"xpr\",\n        \"application/vnd.is-xpr\"\n    ],\n    [\n        \"xps\",\n        \"application/vnd.ms-xpsdocument\"\n    ],\n    [\n        \"xpw\",\n        \"application/vnd.intercon.formnet\"\n    ],\n    [\n        \"xslt\",\n        \"application/xslt+xml\"\n    ],\n    [\n        \"xsm\",\n        \"application/vnd.syncml+xml\"\n    ],\n    [\n        \"xspf\",\n        \"application/xspf+xml\"\n    ],\n    [\n        \"xsr\",\n        \"video/x-amt-showrun\"\n    ],\n    [\n        \"xul\",\n        \"application/vnd.mozilla.xul+xml\"\n    ],\n    [\n        \"xwd\",\n        [\n            \"image/x-xwd\",\n            \"image/x-xwindowdump\"\n        ]\n    ],\n    [\n        \"xyz\",\n        [\n            \"chemical/x-xyz\",\n            \"chemical/x-pdb\"\n        ]\n    ],\n    [\n        \"yang\",\n        \"application/yang\"\n    ],\n    [\n        \"yin\",\n        \"application/yin+xml\"\n    ],\n    [\n        \"z\",\n        [\n            \"application/x-compressed\",\n            \"application/x-compress\"\n        ]\n    ],\n    [\n        \"zaz\",\n        \"application/vnd.zzazz.deck+xml\"\n    ],\n    [\n        \"zip\",\n        [\n            \"application/zip\",\n            \"multipart/x-zip\",\n            \"application/x-zip-compressed\",\n            \"application/x-compressed\"\n        ]\n    ],\n    [\n        \"zir\",\n        \"application/vnd.zul\"\n    ],\n    [\n        \"zmm\",\n        \"application/vnd.handheld-entertainment+xml\"\n    ],\n    [\n        \"zoo\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"zsh\",\n        \"text/x-script.zsh\"\n    ]\n]);\nmodule.exports = {\n    detectMimeType (filename) {\n        if (!filename) {\n            return defaultMimeType;\n        }\n        let parsed = path.parse(filename);\n        let extension = (parsed.ext.substr(1) || parsed.name || \"\").split(\"?\").shift().trim().toLowerCase();\n        let value = defaultMimeType;\n        if (extensions.has(extension)) {\n            value = extensions.get(extension);\n        }\n        if (Array.isArray(value)) {\n            return value[0];\n        }\n        return value;\n    },\n    detectExtension (mimeType) {\n        if (!mimeType) {\n            return defaultExtension;\n        }\n        let parts = (mimeType || \"\").toLowerCase().trim().split(\"/\");\n        let rootType = parts.shift().trim();\n        let subType = parts.join(\"/\").trim();\n        if (mimeTypes.has(rootType + \"/\" + subType)) {\n            let value = mimeTypes.get(rootType + \"/\" + subType);\n            if (Array.isArray(value)) {\n                return value[0];\n            }\n            return value;\n        }\n        switch(rootType){\n            case \"text\":\n                return \"txt\";\n            default:\n                return \"bin\";\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/index.js":
/*!********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-undefined: 0, prefer-spread: 0, no-control-regex: 0 */ \nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst punycode = __webpack_require__(/*! punycode */ \"punycode\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nconst qp = __webpack_require__(/*! ../qp */ \"(rsc)/./node_modules/nodemailer/lib/qp/index.js\");\nconst base64 = __webpack_require__(/*! ../base64 */ \"(rsc)/./node_modules/nodemailer/lib/base64/index.js\");\nconst addressparser = __webpack_require__(/*! ../addressparser */ \"(rsc)/./node_modules/nodemailer/lib/addressparser/index.js\");\nconst nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst LastNewline = __webpack_require__(/*! ./last-newline */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js\");\nconst LeWindows = __webpack_require__(/*! ./le-windows */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\");\nconst LeUnix = __webpack_require__(/*! ./le-unix */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js\");\n/**\n * Creates a new mime tree node. Assumes 'multipart/*' as the content type\n * if it is a branch, anything else counts as leaf. If rootNode is missing from\n * the options, assumes this is the root.\n *\n * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)\n * @param {Object} [options] optional options\n * @param {Object} [options.rootNode] root node for this tree\n * @param {Object} [options.parentNode] immediate parent for this node\n * @param {Object} [options.filename] filename for an attachment node\n * @param {String} [options.baseBoundary] shared part of the unique multipart boundary\n * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers\n * @param {Function} [options.normalizeHeaderKey] method to normalize header keys for custom caseing\n * @param {String} [options.textEncoding] either 'Q' (the default) or 'B'\n */ class MimeNode {\n    constructor(contentType, options){\n        this.nodeCounter = 0;\n        options = options || {};\n        /**\n         * shared part of the unique multipart boundary\n         */ this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString(\"hex\");\n        this.boundaryPrefix = options.boundaryPrefix || \"--_NmP\";\n        this.disableFileAccess = !!options.disableFileAccess;\n        this.disableUrlAccess = !!options.disableUrlAccess;\n        this.normalizeHeaderKey = options.normalizeHeaderKey;\n        /**\n         * If date headers is missing and current node is the root, this value is used instead\n         */ this.date = new Date();\n        /**\n         * Root node for current mime tree\n         */ this.rootNode = options.rootNode || this;\n        /**\n         * If true include Bcc in generated headers (if available)\n         */ this.keepBcc = !!options.keepBcc;\n        /**\n         * If filename is specified but contentType is not (probably an attachment)\n         * detect the content type from filename extension\n         */ if (options.filename) {\n            /**\n             * Filename for this node. Useful with attachments\n             */ this.filename = options.filename;\n            if (!contentType) {\n                contentType = mimeFuncs.detectMimeType(this.filename.split(\".\").pop());\n            }\n        }\n        /**\n         * Indicates which encoding should be used for header strings: \"Q\" or \"B\"\n         */ this.textEncoding = (options.textEncoding || \"\").toString().trim().charAt(0).toUpperCase();\n        /**\n         * Immediate parent for this node (or undefined if not set)\n         */ this.parentNode = options.parentNode;\n        /**\n         * Hostname for default message-id values\n         */ this.hostname = options.hostname;\n        /**\n         * If set to 'win' then uses \\r\\n, if 'linux' then \\n. If not set (or `raw` is used) then newlines are kept as is.\n         */ this.newline = options.newline;\n        /**\n         * An array for possible child nodes\n         */ this.childNodes = [];\n        /**\n         * Used for generating unique boundaries (prepended to the shared base)\n         */ this._nodeId = ++this.rootNode.nodeCounter;\n        /**\n         * A list of header values for this node in the form of [{key:'', value:''}]\n         */ this._headers = [];\n        /**\n         * True if the content only uses ASCII printable characters\n         * @type {Boolean}\n         */ this._isPlainText = false;\n        /**\n         * True if the content is plain text but has longer lines than allowed\n         * @type {Boolean}\n         */ this._hasLongLines = false;\n        /**\n         * If set, use instead this value for envelopes instead of generating one\n         * @type {Boolean}\n         */ this._envelope = false;\n        /**\n         * If set then use this value as the stream content instead of building it\n         * @type {String|Buffer|Stream}\n         */ this._raw = false;\n        /**\n         * Additional transform streams that the message will be piped before\n         * exposing by createReadStream\n         * @type {Array}\n         */ this._transforms = [];\n        /**\n         * Additional process functions that the message will be piped through before\n         * exposing by createReadStream. These functions are run after transforms\n         * @type {Array}\n         */ this._processFuncs = [];\n        /**\n         * If content type is set (or derived from the filename) add it to headers\n         */ if (contentType) {\n            this.setHeader(\"Content-Type\", contentType);\n        }\n    }\n    /////// PUBLIC METHODS\n    /**\n     * Creates and appends a child node.Arguments provided are passed to MimeNode constructor\n     *\n     * @param {String} [contentType] Optional content type\n     * @param {Object} [options] Optional options object\n     * @return {Object} Created node object\n     */ createChild(contentType, options) {\n        if (!options && typeof contentType === \"object\") {\n            options = contentType;\n            contentType = undefined;\n        }\n        let node = new MimeNode(contentType, options);\n        this.appendChild(node);\n        return node;\n    }\n    /**\n     * Appends an existing node to the mime tree. Removes the node from an existing\n     * tree if needed\n     *\n     * @param {Object} childNode node to be appended\n     * @return {Object} Appended node object\n     */ appendChild(childNode) {\n        if (childNode.rootNode !== this.rootNode) {\n            childNode.rootNode = this.rootNode;\n            childNode._nodeId = ++this.rootNode.nodeCounter;\n        }\n        childNode.parentNode = this;\n        this.childNodes.push(childNode);\n        return childNode;\n    }\n    /**\n     * Replaces current node with another node\n     *\n     * @param {Object} node Replacement node\n     * @return {Object} Replacement node\n     */ replace(node) {\n        if (node === this) {\n            return this;\n        }\n        this.parentNode.childNodes.forEach((childNode, i)=>{\n            if (childNode === this) {\n                node.rootNode = this.rootNode;\n                node.parentNode = this.parentNode;\n                node._nodeId = this._nodeId;\n                this.rootNode = this;\n                this.parentNode = undefined;\n                node.parentNode.childNodes[i] = node;\n            }\n        });\n        return node;\n    }\n    /**\n     * Removes current node from the mime tree\n     *\n     * @return {Object} removed node\n     */ remove() {\n        if (!this.parentNode) {\n            return this;\n        }\n        for(let i = this.parentNode.childNodes.length - 1; i >= 0; i--){\n            if (this.parentNode.childNodes[i] === this) {\n                this.parentNode.childNodes.splice(i, 1);\n                this.parentNode = undefined;\n                this.rootNode = this;\n                return this;\n            }\n        }\n    }\n    /**\n     * Sets a header value. If the value for selected key exists, it is overwritten.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */ setHeader(key, value) {\n        let added = false, headerValue;\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === \"object\") {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && \"value\" in key) {\n                this.setHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach((i)=>{\n                    this.setHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach((i)=>{\n                    this.setHeader(i, key[i]);\n                });\n            }\n            return this;\n        }\n        key = this._normalizeHeaderKey(key);\n        headerValue = {\n            key,\n            value\n        };\n        // Check if the value exists and overwrite\n        for(let i = 0, len = this._headers.length; i < len; i++){\n            if (this._headers[i].key === key) {\n                if (!added) {\n                    // replace the first match\n                    this._headers[i] = headerValue;\n                    added = true;\n                } else {\n                    // remove following matches\n                    this._headers.splice(i, 1);\n                    i--;\n                    len--;\n                }\n            }\n        }\n        // match not found, append the value\n        if (!added) {\n            this._headers.push(headerValue);\n        }\n        return this;\n    }\n    /**\n     * Adds a header value. If the value for selected key exists, the value is appended\n     * as a new field and old one is not touched.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */ addHeader(key, value) {\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === \"object\") {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && key.value) {\n                this.addHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach((i)=>{\n                    this.addHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach((i)=>{\n                    this.addHeader(i, key[i]);\n                });\n            }\n            return this;\n        } else if (Array.isArray(value)) {\n            value.forEach((val)=>{\n                this.addHeader(key, val);\n            });\n            return this;\n        }\n        this._headers.push({\n            key: this._normalizeHeaderKey(key),\n            value\n        });\n        return this;\n    }\n    /**\n     * Retrieves the first mathcing value of a selected key\n     *\n     * @param {String} key Key to search for\n     * @retun {String} Value for the key\n     */ getHeader(key) {\n        key = this._normalizeHeaderKey(key);\n        for(let i = 0, len = this._headers.length; i < len; i++){\n            if (this._headers[i].key === key) {\n                return this._headers[i].value;\n            }\n        }\n    }\n    /**\n     * Sets body content for current node. If the value is a string, charset is added automatically\n     * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify\n     * the charset yourself\n     *\n     * @param (String|Buffer) content Body content\n     * @return {Object} current node\n     */ setContent(content) {\n        this.content = content;\n        if (typeof this.content.pipe === \"function\") {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = (err)=>{\n                this.content.removeListener(\"error\", this._contentErrorHandler);\n                this.content = err;\n            };\n            this.content.once(\"error\", this._contentErrorHandler);\n        } else if (typeof this.content === \"string\") {\n            this._isPlainText = mimeFuncs.isPlainText(this.content);\n            if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {\n                // If there are lines longer than 76 symbols/bytes do not use 7bit\n                this._hasLongLines = true;\n            }\n        }\n        return this;\n    }\n    build(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        let stream = this.createReadStream();\n        let buf = [];\n        let buflen = 0;\n        let returned = false;\n        stream.on(\"readable\", ()=>{\n            let chunk;\n            while((chunk = stream.read()) !== null){\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n        });\n        stream.once(\"error\", (err)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(err);\n        });\n        stream.once(\"end\", (chunk)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            if (chunk && chunk.length) {\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n            return callback(null, Buffer.concat(buf, buflen));\n        });\n        return promise;\n    }\n    getTransferEncoding() {\n        let transferEncoding = false;\n        let contentType = (this.getHeader(\"Content-Type\") || \"\").toString().toLowerCase().trim();\n        if (this.content) {\n            transferEncoding = (this.getHeader(\"Content-Transfer-Encoding\") || \"\").toString().toLowerCase().trim();\n            if (!transferEncoding || ![\n                \"base64\",\n                \"quoted-printable\"\n            ].includes(transferEncoding)) {\n                if (/^text\\//i.test(contentType)) {\n                    // If there are no special symbols, no need to modify the text\n                    if (this._isPlainText && !this._hasLongLines) {\n                        transferEncoding = \"7bit\";\n                    } else if (typeof this.content === \"string\" || this.content instanceof Buffer) {\n                        // detect preferred encoding for string value\n                        transferEncoding = this._getTextEncoding(this.content) === \"Q\" ? \"quoted-printable\" : \"base64\";\n                    } else {\n                        // we can not check content for a stream, so either use preferred encoding or fallback to QP\n                        transferEncoding = this.textEncoding === \"B\" ? \"base64\" : \"quoted-printable\";\n                    }\n                } else if (!/^(multipart|message)\\//i.test(contentType)) {\n                    transferEncoding = transferEncoding || \"base64\";\n                }\n            }\n        }\n        return transferEncoding;\n    }\n    /**\n     * Builds the header block for the mime node. Append \\r\\n\\r\\n before writing the content\n     *\n     * @returns {String} Headers\n     */ buildHeaders() {\n        let transferEncoding = this.getTransferEncoding();\n        let headers = [];\n        if (transferEncoding) {\n            this.setHeader(\"Content-Transfer-Encoding\", transferEncoding);\n        }\n        if (this.filename && !this.getHeader(\"Content-Disposition\")) {\n            this.setHeader(\"Content-Disposition\", \"attachment\");\n        }\n        // Ensure mandatory header fields\n        if (this.rootNode === this) {\n            if (!this.getHeader(\"Date\")) {\n                this.setHeader(\"Date\", this.date.toUTCString().replace(/GMT/, \"+0000\"));\n            }\n            // ensure that Message-Id is present\n            this.messageId();\n            if (!this.getHeader(\"MIME-Version\")) {\n                this.setHeader(\"MIME-Version\", \"1.0\");\n            }\n        }\n        this._headers.forEach((header)=>{\n            let key = header.key;\n            let value = header.value;\n            let structured;\n            let param;\n            let options = {};\n            let formattedHeaders = [\n                \"From\",\n                \"Sender\",\n                \"To\",\n                \"Cc\",\n                \"Bcc\",\n                \"Reply-To\",\n                \"Date\",\n                \"References\"\n            ];\n            if (value && typeof value === \"object\" && !formattedHeaders.includes(key)) {\n                Object.keys(value).forEach((key)=>{\n                    if (key !== \"value\") {\n                        options[key] = value[key];\n                    }\n                });\n                value = (value.value || \"\").toString();\n                if (!value.trim()) {\n                    return;\n                }\n            }\n            if (options.prepared) {\n                // header value is\n                if (options.foldLines) {\n                    headers.push(mimeFuncs.foldLines(key + \": \" + value));\n                } else {\n                    headers.push(key + \": \" + value);\n                }\n                return;\n            }\n            switch(header.key){\n                case \"Content-Disposition\":\n                    structured = mimeFuncs.parseHeaderValue(value);\n                    if (this.filename) {\n                        structured.params.filename = this.filename;\n                    }\n                    value = mimeFuncs.buildHeaderValue(structured);\n                    break;\n                case \"Content-Type\":\n                    structured = mimeFuncs.parseHeaderValue(value);\n                    this._handleContentType(structured);\n                    if (structured.value.match(/^text\\/plain\\b/) && typeof this.content === \"string\" && /[\\u0080-\\uFFFF]/.test(this.content)) {\n                        structured.params.charset = \"utf-8\";\n                    }\n                    value = mimeFuncs.buildHeaderValue(structured);\n                    if (this.filename) {\n                        // add support for non-compliant clients like QQ webmail\n                        // we can't build the value with buildHeaderValue as the value is non standard and\n                        // would be converted to parameter continuation encoding that we do not want\n                        param = this._encodeWords(this.filename);\n                        if (param !== this.filename || /[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(param)) {\n                            // include value in quotes if needed\n                            param = '\"' + param + '\"';\n                        }\n                        value += \"; name=\" + param;\n                    }\n                    break;\n                case \"Bcc\":\n                    if (!this.keepBcc) {\n                        // skip BCC values\n                        return;\n                    }\n                    break;\n            }\n            value = this._encodeHeaderValue(key, value);\n            // skip empty lines\n            if (!(value || \"\").toString().trim()) {\n                return;\n            }\n            if (typeof this.normalizeHeaderKey === \"function\") {\n                let normalized = this.normalizeHeaderKey(key, value);\n                if (normalized && typeof normalized === \"string\" && normalized.length) {\n                    key = normalized;\n                }\n            }\n            headers.push(mimeFuncs.foldLines(key + \": \" + value, 76));\n        });\n        return headers.join(\"\\r\\n\");\n    }\n    /**\n     * Streams the rfc2822 message from the current node. If this is a root node,\n     * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\n     *\n     * @return {String} Compiled message\n     */ createReadStream(options) {\n        options = options || {};\n        let stream = new PassThrough(options);\n        let outputStream = stream;\n        let transform;\n        this.stream(stream, options, (err)=>{\n            if (err) {\n                outputStream.emit(\"error\", err);\n                return;\n            }\n            stream.end();\n        });\n        for(let i = 0, len = this._transforms.length; i < len; i++){\n            transform = typeof this._transforms[i] === \"function\" ? this._transforms[i]() : this._transforms[i];\n            outputStream.once(\"error\", (err)=>{\n                transform.emit(\"error\", err);\n            });\n            outputStream = outputStream.pipe(transform);\n        }\n        // ensure terminating newline after possible user transforms\n        transform = new LastNewline();\n        outputStream.once(\"error\", (err)=>{\n            transform.emit(\"error\", err);\n        });\n        outputStream = outputStream.pipe(transform);\n        // dkim and stuff\n        for(let i = 0, len = this._processFuncs.length; i < len; i++){\n            transform = this._processFuncs[i];\n            outputStream = transform(outputStream);\n        }\n        if (this.newline) {\n            const winbreak = [\n                \"win\",\n                \"windows\",\n                \"dos\",\n                \"\\r\\n\"\n            ].includes(this.newline.toString().toLowerCase());\n            const newlineTransform = winbreak ? new LeWindows() : new LeUnix();\n            const stream = outputStream.pipe(newlineTransform);\n            outputStream.on(\"error\", (err)=>stream.emit(\"error\", err));\n            return stream;\n        }\n        return outputStream;\n    }\n    /**\n     * Appends a transform stream object to the transforms list. Final output\n     * is passed through this stream before exposing\n     *\n     * @param {Object} transform Read-Write stream\n     */ transform(transform) {\n        this._transforms.push(transform);\n    }\n    /**\n     * Appends a post process function. The functon is run after transforms and\n     * uses the following syntax\n     *\n     *   processFunc(input) -> outputStream\n     *\n     * @param {Object} processFunc Read-Write stream\n     */ processFunc(processFunc) {\n        this._processFuncs.push(processFunc);\n    }\n    stream(outputStream, options, done) {\n        let transferEncoding = this.getTransferEncoding();\n        let contentStream;\n        let localStream;\n        // protect actual callback against multiple triggering\n        let returned = false;\n        let callback = (err)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            done(err);\n        };\n        // for multipart nodes, push child nodes\n        // for content nodes end the stream\n        let finalize = ()=>{\n            let childId = 0;\n            let processChildNode = ()=>{\n                if (childId >= this.childNodes.length) {\n                    outputStream.write(\"\\r\\n--\" + this.boundary + \"--\\r\\n\");\n                    return callback();\n                }\n                let child = this.childNodes[childId++];\n                outputStream.write((childId > 1 ? \"\\r\\n\" : \"\") + \"--\" + this.boundary + \"\\r\\n\");\n                child.stream(outputStream, options, (err)=>{\n                    if (err) {\n                        return callback(err);\n                    }\n                    setImmediate(processChildNode);\n                });\n            };\n            if (this.multipart) {\n                setImmediate(processChildNode);\n            } else {\n                return callback();\n            }\n        };\n        // pushes node content\n        let sendContent = ()=>{\n            if (this.content) {\n                if (Object.prototype.toString.call(this.content) === \"[object Error]\") {\n                    // content is already errored\n                    return callback(this.content);\n                }\n                if (typeof this.content.pipe === \"function\") {\n                    this.content.removeListener(\"error\", this._contentErrorHandler);\n                    this._contentErrorHandler = (err)=>callback(err);\n                    this.content.once(\"error\", this._contentErrorHandler);\n                }\n                let createStream = ()=>{\n                    if ([\n                        \"quoted-printable\",\n                        \"base64\"\n                    ].includes(transferEncoding)) {\n                        contentStream = new (transferEncoding === \"base64\" ? base64 : qp).Encoder(options);\n                        contentStream.pipe(outputStream, {\n                            end: false\n                        });\n                        contentStream.once(\"end\", finalize);\n                        contentStream.once(\"error\", (err)=>callback(err));\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(contentStream);\n                    } else {\n                        // anything that is not QP or Base54 passes as-is\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(outputStream, {\n                            end: false\n                        });\n                        localStream.once(\"end\", finalize);\n                    }\n                    localStream.once(\"error\", (err)=>callback(err));\n                };\n                if (this.content._resolve) {\n                    let chunks = [];\n                    let chunklen = 0;\n                    let returned = false;\n                    let sourceStream = this._getStream(this.content);\n                    sourceStream.on(\"error\", (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        callback(err);\n                    });\n                    sourceStream.on(\"readable\", ()=>{\n                        let chunk;\n                        while((chunk = sourceStream.read()) !== null){\n                            chunks.push(chunk);\n                            chunklen += chunk.length;\n                        }\n                    });\n                    sourceStream.on(\"end\", ()=>{\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        this.content._resolve = false;\n                        this.content._resolvedValue = Buffer.concat(chunks, chunklen);\n                        setImmediate(createStream);\n                    });\n                } else {\n                    setImmediate(createStream);\n                }\n                return;\n            } else {\n                return setImmediate(finalize);\n            }\n        };\n        if (this._raw) {\n            setImmediate(()=>{\n                if (Object.prototype.toString.call(this._raw) === \"[object Error]\") {\n                    // content is already errored\n                    return callback(this._raw);\n                }\n                // remove default error handler (if set)\n                if (typeof this._raw.pipe === \"function\") {\n                    this._raw.removeListener(\"error\", this._contentErrorHandler);\n                }\n                let raw = this._getStream(this._raw);\n                raw.pipe(outputStream, {\n                    end: false\n                });\n                raw.on(\"error\", (err)=>outputStream.emit(\"error\", err));\n                raw.on(\"end\", finalize);\n            });\n        } else {\n            outputStream.write(this.buildHeaders() + \"\\r\\n\\r\\n\");\n            setImmediate(sendContent);\n        }\n    }\n    /**\n     * Sets envelope to be used instead of the generated one\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */ setEnvelope(envelope) {\n        let list;\n        this._envelope = {\n            from: false,\n            to: []\n        };\n        if (envelope.from) {\n            list = [];\n            this._convertAddresses(this._parseAddresses(envelope.from), list);\n            list = list.filter((address)=>address && address.address);\n            if (list.length && list[0]) {\n                this._envelope.from = list[0].address;\n            }\n        }\n        [\n            \"to\",\n            \"cc\",\n            \"bcc\"\n        ].forEach((key)=>{\n            if (envelope[key]) {\n                this._convertAddresses(this._parseAddresses(envelope[key]), this._envelope.to);\n            }\n        });\n        this._envelope.to = this._envelope.to.map((to)=>to.address).filter((address)=>address);\n        let standardFields = [\n            \"to\",\n            \"cc\",\n            \"bcc\",\n            \"from\"\n        ];\n        Object.keys(envelope).forEach((key)=>{\n            if (!standardFields.includes(key)) {\n                this._envelope[key] = envelope[key];\n            }\n        });\n        return this;\n    }\n    /**\n     * Generates and returns an object with parsed address fields\n     *\n     * @return {Object} Address object\n     */ getAddresses() {\n        let addresses = {};\n        this._headers.forEach((header)=>{\n            let key = header.key.toLowerCase();\n            if ([\n                \"from\",\n                \"sender\",\n                \"reply-to\",\n                \"to\",\n                \"cc\",\n                \"bcc\"\n            ].includes(key)) {\n                if (!Array.isArray(addresses[key])) {\n                    addresses[key] = [];\n                }\n                this._convertAddresses(this._parseAddresses(header.value), addresses[key]);\n            }\n        });\n        return addresses;\n    }\n    /**\n     * Generates and returns SMTP envelope with the sender address and a list of recipients addresses\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */ getEnvelope() {\n        if (this._envelope) {\n            return this._envelope;\n        }\n        let envelope = {\n            from: false,\n            to: []\n        };\n        this._headers.forEach((header)=>{\n            let list = [];\n            if (header.key === \"From\" || !envelope.from && [\n                \"Reply-To\",\n                \"Sender\"\n            ].includes(header.key)) {\n                this._convertAddresses(this._parseAddresses(header.value), list);\n                if (list.length && list[0]) {\n                    envelope.from = list[0].address;\n                }\n            } else if ([\n                \"To\",\n                \"Cc\",\n                \"Bcc\"\n            ].includes(header.key)) {\n                this._convertAddresses(this._parseAddresses(header.value), envelope.to);\n            }\n        });\n        envelope.to = envelope.to.map((to)=>to.address);\n        return envelope;\n    }\n    /**\n     * Returns Message-Id value. If it does not exist, then creates one\n     *\n     * @return {String} Message-Id value\n     */ messageId() {\n        let messageId = this.getHeader(\"Message-ID\");\n        // You really should define your own Message-Id field!\n        if (!messageId) {\n            messageId = this._generateMessageId();\n            this.setHeader(\"Message-ID\", messageId);\n        }\n        return messageId;\n    }\n    /**\n     * Sets pregenerated content that will be used as the output of this node\n     *\n     * @param {String|Buffer|Stream} Raw MIME contents\n     */ setRaw(raw) {\n        this._raw = raw;\n        if (this._raw && typeof this._raw.pipe === \"function\") {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = (err)=>{\n                this._raw.removeListener(\"error\", this._contentErrorHandler);\n                this._raw = err;\n            };\n            this._raw.once(\"error\", this._contentErrorHandler);\n        }\n        return this;\n    }\n    /////// PRIVATE METHODS\n    /**\n     * Detects and returns handle to a stream related with the content.\n     *\n     * @param {Mixed} content Node content\n     * @returns {Object} Stream object\n     */ _getStream(content) {\n        let contentStream;\n        if (content._resolvedValue) {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n            setImmediate(()=>{\n                try {\n                    contentStream.end(content._resolvedValue);\n                } catch (err) {\n                    contentStream.emit(\"error\", err);\n                }\n            });\n            return contentStream;\n        } else if (typeof content.pipe === \"function\") {\n            // assume as stream\n            return content;\n        } else if (content && typeof content.path === \"string\" && !content.href) {\n            if (this.disableFileAccess) {\n                contentStream = new PassThrough();\n                setImmediate(()=>contentStream.emit(\"error\", new Error(\"File access rejected for \" + content.path)));\n                return contentStream;\n            }\n            // read file\n            return fs.createReadStream(content.path);\n        } else if (content && typeof content.href === \"string\") {\n            if (this.disableUrlAccess) {\n                contentStream = new PassThrough();\n                setImmediate(()=>contentStream.emit(\"error\", new Error(\"Url access rejected for \" + content.href)));\n                return contentStream;\n            }\n            // fetch URL\n            return nmfetch(content.href, {\n                headers: content.httpHeaders\n            });\n        } else {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n            setImmediate(()=>{\n                try {\n                    contentStream.end(content || \"\");\n                } catch (err) {\n                    contentStream.emit(\"error\", err);\n                }\n            });\n            return contentStream;\n        }\n    }\n    /**\n     * Parses addresses. Takes in a single address or an array or an\n     * array of address arrays (eg. To: [[first group], [second group],...])\n     *\n     * @param {Mixed} addresses Addresses to be parsed\n     * @return {Array} An array of address objects\n     */ _parseAddresses(addresses) {\n        return [].concat.apply([], [].concat(addresses).map((address)=>{\n            // eslint-disable-line prefer-spread\n            if (address && address.address) {\n                address.address = this._normalizeAddress(address.address);\n                address.name = address.name || \"\";\n                return [\n                    address\n                ];\n            }\n            return addressparser(address);\n        }));\n    }\n    /**\n     * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-\n     *\n     * @param {String} key Key to be normalized\n     * @return {String} key in Camel-Case form\n     */ _normalizeHeaderKey(key) {\n        key = (key || \"\").toString()// no newlines in keys\n        .replace(/\\r?\\n|\\r/g, \" \").trim().toLowerCase()// use uppercase words, except MIME\n        .replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, (c)=>c.toUpperCase())// special case\n        .replace(/^Content-Features$/i, \"Content-features\");\n        return key;\n    }\n    /**\n     * Checks if the content type is multipart and defines boundary if needed.\n     * Doesn't return anything, modifies object argument instead.\n     *\n     * @param {Object} structured Parsed header value for 'Content-Type' key\n     */ _handleContentType(structured) {\n        this.contentType = structured.value.trim().toLowerCase();\n        this.multipart = /^multipart\\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf(\"/\") + 1) : false;\n        if (this.multipart) {\n            this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();\n        } else {\n            this.boundary = false;\n        }\n    }\n    /**\n     * Generates a multipart boundary value\n     *\n     * @return {String} boundary value\n     */ _generateBoundary() {\n        return this.rootNode.boundaryPrefix + \"-\" + this.rootNode.baseBoundary + \"-Part_\" + this._nodeId;\n    }\n    /**\n     * Encodes a header value for use in the generated rfc2822 email.\n     *\n     * @param {String} key Header key\n     * @param {String} value Header value\n     */ _encodeHeaderValue(key, value) {\n        key = this._normalizeHeaderKey(key);\n        switch(key){\n            // Structured headers\n            case \"From\":\n            case \"Sender\":\n            case \"To\":\n            case \"Cc\":\n            case \"Bcc\":\n            case \"Reply-To\":\n                return this._convertAddresses(this._parseAddresses(value));\n            // values enclosed in <>\n            case \"Message-ID\":\n            case \"In-Reply-To\":\n            case \"Content-Id\":\n                value = (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n                if (value.charAt(0) !== \"<\") {\n                    value = \"<\" + value;\n                }\n                if (value.charAt(value.length - 1) !== \">\") {\n                    value = value + \">\";\n                }\n                return value;\n            // space separated list of values enclosed in <>\n            case \"References\":\n                value = [].concat.apply([], [].concat(value || \"\").map((elm)=>{\n                    // eslint-disable-line prefer-spread\n                    elm = (elm || \"\").toString().replace(/\\r?\\n|\\r/g, \" \").trim();\n                    return elm.replace(/<[^>]*>/g, (str)=>str.replace(/\\s/g, \"\")).split(/\\s+/);\n                })).map((elm)=>{\n                    if (elm.charAt(0) !== \"<\") {\n                        elm = \"<\" + elm;\n                    }\n                    if (elm.charAt(elm.length - 1) !== \">\") {\n                        elm = elm + \">\";\n                    }\n                    return elm;\n                });\n                return value.join(\" \").trim();\n            case \"Date\":\n                if (Object.prototype.toString.call(value) === \"[object Date]\") {\n                    return value.toUTCString().replace(/GMT/, \"+0000\");\n                }\n                value = (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n                return this._encodeWords(value);\n            case \"Content-Type\":\n            case \"Content-Disposition\":\n                // if it includes a filename then it is already encoded\n                return (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n            default:\n                value = (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n                // encodeWords only encodes if needed, otherwise the original string is returned\n                return this._encodeWords(value);\n        }\n    }\n    /**\n     * Rebuilds address object using punycode and other adjustments\n     *\n     * @param {Array} addresses An array of address objects\n     * @param {Array} [uniqueList] An array to be populated with addresses\n     * @return {String} address string\n     */ _convertAddresses(addresses, uniqueList) {\n        let values = [];\n        uniqueList = uniqueList || [];\n        [].concat(addresses || []).forEach((address)=>{\n            if (address.address) {\n                address.address = this._normalizeAddress(address.address);\n                if (!address.name) {\n                    values.push(address.address.indexOf(\" \") >= 0 ? `<${address.address}>` : `${address.address}`);\n                } else if (address.name) {\n                    values.push(`${this._encodeAddressName(address.name)} <${address.address}>`);\n                }\n                if (address.address) {\n                    if (!uniqueList.filter((a)=>a.address === address.address).length) {\n                        uniqueList.push(address);\n                    }\n                }\n            } else if (address.group) {\n                let groupListAddresses = (address.group.length ? this._convertAddresses(address.group, uniqueList) : \"\").trim();\n                values.push(`${this._encodeAddressName(address.name)}:${groupListAddresses};`);\n            }\n        });\n        return values.join(\", \");\n    }\n    /**\n     * Normalizes an email address\n     *\n     * @param {Array} address An array of address objects\n     * @return {String} address string\n     */ _normalizeAddress(address) {\n        address = (address || \"\").toString().replace(/[\\x00-\\x1F<>]+/g, \" \") // remove unallowed characters\n        .trim();\n        let lastAt = address.lastIndexOf(\"@\");\n        if (lastAt < 0) {\n            // Bare username\n            return address;\n        }\n        let user = address.substr(0, lastAt);\n        let domain = address.substr(lastAt + 1);\n        // Usernames are not touched and are kept as is even if these include unicode\n        // Domains are punycoded by default\n        // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'\n        // non-unicode domains are left as is\n        let encodedDomain;\n        try {\n            encodedDomain = punycode.toASCII(domain.toLowerCase());\n        } catch (err) {\n        // keep as is?\n        }\n        if (user.indexOf(\" \") >= 0) {\n            if (user.charAt(0) !== '\"') {\n                user = '\"' + user;\n            }\n            if (user.substr(-1) !== '\"') {\n                user = user + '\"';\n            }\n        }\n        return `${user}@${encodedDomain}`;\n    }\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */ _encodeAddressName(name) {\n        if (!/^[\\w ']*$/.test(name)) {\n            if (/^[\\x20-\\x7e]*$/.test(name)) {\n                return '\"' + name.replace(/([\\\\\"])/g, \"\\\\$1\") + '\"';\n            } else {\n                return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);\n            }\n        }\n        return name;\n    }\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */ _encodeWords(value) {\n        // set encodeAll parameter to true even though it is against the recommendation of RFC2047,\n        // by default only words that include non-ascii should be converted into encoded words\n        // but some clients (eg. Zimbra) do not handle it properly and remove surrounding whitespace\n        return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);\n    }\n    /**\n     * Detects best mime encoding for a text value\n     *\n     * @param {String} value Value to check for\n     * @return {String} either 'Q' or 'B'\n     */ _getTextEncoding(value) {\n        value = (value || \"\").toString();\n        let encoding = this.textEncoding;\n        let latinLen;\n        let nonLatinLen;\n        if (!encoding) {\n            // count latin alphabet symbols and 8-bit range symbols + control symbols\n            // if there are more latin characters, then use quoted-printable\n            // encoding, otherwise use base64\n            nonLatinLen = (value.match(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\u0080-\\uFFFF]/g) || []).length; // eslint-disable-line no-control-regex\n            latinLen = (value.match(/[a-z]/gi) || []).length;\n            // if there are more latin symbols than binary/unicode, then prefer Q, otherwise B\n            encoding = nonLatinLen < latinLen ? \"Q\" : \"B\";\n        }\n        return encoding;\n    }\n    /**\n     * Generates a message id\n     *\n     * @return {String} Random Message-ID value\n     */ _generateMessageId() {\n        return \"<\" + [\n            2,\n            2,\n            2,\n            6\n        ].reduce(// crux to generate UUID-like random strings\n        (prev, len)=>prev + \"-\" + crypto.randomBytes(len).toString(\"hex\"), crypto.randomBytes(4).toString(\"hex\")) + \"@\" + // try to use the domain of the FROM address or fallback to server hostname\n        (this.getEnvelope().from || this.hostname || \"localhost\").split(\"@\").pop() + \">\";\n    }\n}\nmodule.exports = MimeNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js":
/*!***************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/last-newline.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\nclass LastNewline extends Transform {\n    constructor(){\n        super();\n        this.lastByte = false;\n    }\n    _transform(chunk, encoding, done) {\n        if (chunk.length) {\n            this.lastByte = chunk[chunk.length - 1];\n        }\n        this.push(chunk);\n        done();\n    }\n    _flush(done) {\n        if (this.lastByte === 0x0a) {\n            return done();\n        }\n        if (this.lastByte === 0x0d) {\n            this.push(Buffer.from(\"\\n\"));\n            return done();\n        }\n        this.push(Buffer.from(\"\\r\\n\"));\n        return done();\n    }\n}\nmodule.exports = LastNewline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xhc3QtbmV3bGluZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVlDLHVEQUEyQjtBQUU3QyxNQUFNQyxvQkFBb0JGO0lBQ3RCRyxhQUFjO1FBQ1YsS0FBSztRQUNMLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBRUFDLFdBQVdDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUU7UUFDOUIsSUFBSUYsTUFBTUcsTUFBTSxFQUFFO1lBQ2QsSUFBSSxDQUFDTCxRQUFRLEdBQUdFLEtBQUssQ0FBQ0EsTUFBTUcsTUFBTSxHQUFHLEVBQUU7UUFDM0M7UUFFQSxJQUFJLENBQUNDLElBQUksQ0FBQ0o7UUFDVkU7SUFDSjtJQUVBRyxPQUFPSCxJQUFJLEVBQUU7UUFDVCxJQUFJLElBQUksQ0FBQ0osUUFBUSxLQUFLLE1BQU07WUFDeEIsT0FBT0k7UUFDWDtRQUNBLElBQUksSUFBSSxDQUFDSixRQUFRLEtBQUssTUFBTTtZQUN4QixJQUFJLENBQUNNLElBQUksQ0FBQ0UsT0FBT0MsSUFBSSxDQUFDO1lBQ3RCLE9BQU9MO1FBQ1g7UUFDQSxJQUFJLENBQUNFLElBQUksQ0FBQ0UsT0FBT0MsSUFBSSxDQUFDO1FBQ3RCLE9BQU9MO0lBQ1g7QUFDSjtBQUVBTSxPQUFPQyxPQUFPLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL21pbWUtbm9kZS9sYXN0LW5ld2xpbmUuanM/YTM5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybTtcblxuY2xhc3MgTGFzdE5ld2xpbmUgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxhc3RCeXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX3RyYW5zZm9ybShjaHVuaywgZW5jb2RpbmcsIGRvbmUpIHtcbiAgICAgICAgaWYgKGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0Qnl0ZSA9IGNodW5rW2NodW5rLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wdXNoKGNodW5rKTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH1cblxuICAgIF9mbHVzaChkb25lKSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RCeXRlID09PSAweDBhKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxhc3RCeXRlID09PSAweDBkKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2goQnVmZmVyLmZyb20oJ1xcbicpKTtcbiAgICAgICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wdXNoKEJ1ZmZlci5mcm9tKCdcXHJcXG4nKSk7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExhc3ROZXdsaW5lO1xuIl0sIm5hbWVzIjpbIlRyYW5zZm9ybSIsInJlcXVpcmUiLCJMYXN0TmV3bGluZSIsImNvbnN0cnVjdG9yIiwibGFzdEJ5dGUiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImRvbmUiLCJsZW5ndGgiLCJwdXNoIiwiX2ZsdXNoIiwiQnVmZmVyIiwiZnJvbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js":
/*!**********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/le-unix.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst Transform = stream.Transform;\n/**\n * Ensures that only <LF> is used for linebreaks\n *\n * @param {Object} options Stream options\n */ class LeWindows extends Transform {\n    constructor(options){\n        super(options);\n        // init Transform\n        this.options = options || {};\n    }\n    /**\n     * Escapes dots\n     */ _transform(chunk, encoding, done) {\n        let buf;\n        let lastPos = 0;\n        for(let i = 0, len = chunk.length; i < len; i++){\n            if (chunk[i] === 0x0d) {\n                // \\n\n                buf = chunk.slice(lastPos, i);\n                lastPos = i + 1;\n                this.push(buf);\n            }\n        }\n        if (lastPos && lastPos < chunk.length) {\n            buf = chunk.slice(lastPos);\n            this.push(buf);\n        } else if (!lastPos) {\n            this.push(chunk);\n        }\n        done();\n    }\n}\nmodule.exports = LeWindows;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXVuaXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxZQUFZRixPQUFPRSxTQUFTO0FBRWxDOzs7O0NBSUMsR0FDRCxNQUFNQyxrQkFBa0JEO0lBQ3BCRSxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLGlCQUFpQjtRQUNqQixJQUFJLENBQUNBLE9BQU8sR0FBR0EsV0FBVyxDQUFDO0lBQy9CO0lBRUE7O0tBRUMsR0FDREMsV0FBV0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRTtRQUM5QixJQUFJQztRQUNKLElBQUlDLFVBQVU7UUFFZCxJQUFLLElBQUlDLElBQUksR0FBR0MsTUFBTU4sTUFBTU8sTUFBTSxFQUFFRixJQUFJQyxLQUFLRCxJQUFLO1lBQzlDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQ25CLEtBQUs7Z0JBQ0xGLE1BQU1ILE1BQU1RLEtBQUssQ0FBQ0osU0FBU0M7Z0JBQzNCRCxVQUFVQyxJQUFJO2dCQUNkLElBQUksQ0FBQ0ksSUFBSSxDQUFDTjtZQUNkO1FBQ0o7UUFDQSxJQUFJQyxXQUFXQSxVQUFVSixNQUFNTyxNQUFNLEVBQUU7WUFDbkNKLE1BQU1ILE1BQU1RLEtBQUssQ0FBQ0o7WUFDbEIsSUFBSSxDQUFDSyxJQUFJLENBQUNOO1FBQ2QsT0FBTyxJQUFJLENBQUNDLFNBQVM7WUFDakIsSUFBSSxDQUFDSyxJQUFJLENBQUNUO1FBQ2Q7UUFDQUU7SUFDSjtBQUNKO0FBRUFRLE9BQU9DLE9BQU8sR0FBR2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXVuaXguanM/OWEwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgVHJhbnNmb3JtID0gc3RyZWFtLlRyYW5zZm9ybTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgb25seSA8TEY+IGlzIHVzZWQgZm9yIGxpbmVicmVha3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBTdHJlYW0gb3B0aW9uc1xuICovXG5jbGFzcyBMZVdpbmRvd3MgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIC8vIGluaXQgVHJhbnNmb3JtXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyBkb3RzXG4gICAgICovXG4gICAgX3RyYW5zZm9ybShjaHVuaywgZW5jb2RpbmcsIGRvbmUpIHtcbiAgICAgICAgbGV0IGJ1ZjtcbiAgICAgICAgbGV0IGxhc3RQb3MgPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGNodW5rW2ldID09PSAweDBkKSB7XG4gICAgICAgICAgICAgICAgLy8gXFxuXG4gICAgICAgICAgICAgICAgYnVmID0gY2h1bmsuc2xpY2UobGFzdFBvcywgaSk7XG4gICAgICAgICAgICAgICAgbGFzdFBvcyA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaChidWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0UG9zICYmIGxhc3RQb3MgPCBjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJ1ZiA9IGNodW5rLnNsaWNlKGxhc3RQb3MpO1xuICAgICAgICAgICAgdGhpcy5wdXNoKGJ1Zik7XG4gICAgICAgIH0gZWxzZSBpZiAoIWxhc3RQb3MpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgZG9uZSgpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMZVdpbmRvd3M7XG4iXSwibmFtZXMiOlsic3RyZWFtIiwicmVxdWlyZSIsIlRyYW5zZm9ybSIsIkxlV2luZG93cyIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIl90cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiZG9uZSIsImJ1ZiIsImxhc3RQb3MiLCJpIiwibGVuIiwibGVuZ3RoIiwic2xpY2UiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/le-windows.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst Transform = stream.Transform;\n/**\n * Ensures that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */ class LeWindows extends Transform {\n    constructor(options){\n        super(options);\n        // init Transform\n        this.options = options || {};\n        this.lastByte = false;\n    }\n    /**\n     * Escapes dots\n     */ _transform(chunk, encoding, done) {\n        let buf;\n        let lastPos = 0;\n        for(let i = 0, len = chunk.length; i < len; i++){\n            if (chunk[i] === 0x0a) {\n                // \\n\n                if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n                    if (i > lastPos) {\n                        buf = chunk.slice(lastPos, i);\n                        this.push(buf);\n                    }\n                    this.push(Buffer.from(\"\\r\\n\"));\n                    lastPos = i + 1;\n                }\n            }\n        }\n        if (lastPos && lastPos < chunk.length) {\n            buf = chunk.slice(lastPos);\n            this.push(buf);\n        } else if (!lastPos) {\n            this.push(chunk);\n        }\n        this.lastByte = chunk[chunk.length - 1];\n        done();\n    }\n}\nmodule.exports = LeWindows;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXdpbmRvd3MuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxZQUFZRixPQUFPRSxTQUFTO0FBRWxDOzs7O0NBSUMsR0FDRCxNQUFNQyxrQkFBa0JEO0lBQ3BCRSxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLGlCQUFpQjtRQUNqQixJQUFJLENBQUNBLE9BQU8sR0FBR0EsV0FBVyxDQUFDO1FBQzNCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBRUE7O0tBRUMsR0FDREMsV0FBV0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRTtRQUM5QixJQUFJQztRQUNKLElBQUlDLFVBQVU7UUFFZCxJQUFLLElBQUlDLElBQUksR0FBR0MsTUFBTU4sTUFBTU8sTUFBTSxFQUFFRixJQUFJQyxLQUFLRCxJQUFLO1lBQzlDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQ25CLEtBQUs7Z0JBQ0wsSUFBSSxLQUFNTCxLQUFLLENBQUNLLElBQUksRUFBRSxLQUFLLFFBQVUsQ0FBQ0EsS0FBSyxJQUFJLENBQUNQLFFBQVEsS0FBSyxNQUFPO29CQUNoRSxJQUFJTyxJQUFJRCxTQUFTO3dCQUNiRCxNQUFNSCxNQUFNUSxLQUFLLENBQUNKLFNBQVNDO3dCQUMzQixJQUFJLENBQUNJLElBQUksQ0FBQ047b0JBQ2Q7b0JBQ0EsSUFBSSxDQUFDTSxJQUFJLENBQUNDLE9BQU9DLElBQUksQ0FBQztvQkFDdEJQLFVBQVVDLElBQUk7Z0JBQ2xCO1lBQ0o7UUFDSjtRQUVBLElBQUlELFdBQVdBLFVBQVVKLE1BQU1PLE1BQU0sRUFBRTtZQUNuQ0osTUFBTUgsTUFBTVEsS0FBSyxDQUFDSjtZQUNsQixJQUFJLENBQUNLLElBQUksQ0FBQ047UUFDZCxPQUFPLElBQUksQ0FBQ0MsU0FBUztZQUNqQixJQUFJLENBQUNLLElBQUksQ0FBQ1Q7UUFDZDtRQUVBLElBQUksQ0FBQ0YsUUFBUSxHQUFHRSxLQUFLLENBQUNBLE1BQU1PLE1BQU0sR0FBRyxFQUFFO1FBQ3ZDTDtJQUNKO0FBQ0o7QUFFQVUsT0FBT0MsT0FBTyxHQUFHbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXdpbmRvd3MuanM/ZGEwMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgVHJhbnNmb3JtID0gc3RyZWFtLlRyYW5zZm9ybTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgb25seSA8Q1I+PExGPiBzZXF1ZW5jZXMgYXJlIHVzZWQgZm9yIGxpbmVicmVha3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBTdHJlYW0gb3B0aW9uc1xuICovXG5jbGFzcyBMZVdpbmRvd3MgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIC8vIGluaXQgVHJhbnNmb3JtXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMubGFzdEJ5dGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIGRvdHNcbiAgICAgKi9cbiAgICBfdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgZG9uZSkge1xuICAgICAgICBsZXQgYnVmO1xuICAgICAgICBsZXQgbGFzdFBvcyA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY2h1bmtbaV0gPT09IDB4MGEpIHtcbiAgICAgICAgICAgICAgICAvLyBcXG5cbiAgICAgICAgICAgICAgICBpZiAoKGkgJiYgY2h1bmtbaSAtIDFdICE9PSAweDBkKSB8fCAoIWkgJiYgdGhpcy5sYXN0Qnl0ZSAhPT0gMHgwZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiBsYXN0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWYgPSBjaHVuay5zbGljZShsYXN0UG9zLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChidWYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChCdWZmZXIuZnJvbSgnXFxyXFxuJykpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0UG9zID0gaSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxhc3RQb3MgJiYgbGFzdFBvcyA8IGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgYnVmID0gY2h1bmsuc2xpY2UobGFzdFBvcyk7XG4gICAgICAgICAgICB0aGlzLnB1c2goYnVmKTtcbiAgICAgICAgfSBlbHNlIGlmICghbGFzdFBvcykge1xuICAgICAgICAgICAgdGhpcy5wdXNoKGNodW5rKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdEJ5dGUgPSBjaHVua1tjaHVuay5sZW5ndGggLSAxXTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMZVdpbmRvd3M7XG4iXSwibmFtZXMiOlsic3RyZWFtIiwicmVxdWlyZSIsIlRyYW5zZm9ybSIsIkxlV2luZG93cyIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImxhc3RCeXRlIiwiX3RyYW5zZm9ybSIsImNodW5rIiwiZW5jb2RpbmciLCJkb25lIiwiYnVmIiwibGFzdFBvcyIsImkiLCJsZW4iLCJsZW5ndGgiLCJzbGljZSIsInB1c2giLCJCdWZmZXIiLCJmcm9tIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/nodemailer.js":
/*!***************************************************!*\
  !*** ./node_modules/nodemailer/lib/nodemailer.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Mailer = __webpack_require__(/*! ./mailer */ \"(rsc)/./node_modules/nodemailer/lib/mailer/index.js\");\nconst shared = __webpack_require__(/*! ./shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst SMTPPool = __webpack_require__(/*! ./smtp-pool */ \"(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js\");\nconst SMTPTransport = __webpack_require__(/*! ./smtp-transport */ \"(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js\");\nconst SendmailTransport = __webpack_require__(/*! ./sendmail-transport */ \"(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js\");\nconst StreamTransport = __webpack_require__(/*! ./stream-transport */ \"(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js\");\nconst JSONTransport = __webpack_require__(/*! ./json-transport */ \"(rsc)/./node_modules/nodemailer/lib/json-transport/index.js\");\nconst SESTransport = __webpack_require__(/*! ./ses-transport */ \"(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js\");\nconst nmfetch = __webpack_require__(/*! ./fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst packageData = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst ETHEREAL_API = (process.env.ETHEREAL_API || \"https://api.nodemailer.com\").replace(/\\/+$/, \"\");\nconst ETHEREAL_WEB = (process.env.ETHEREAL_WEB || \"https://ethereal.email\").replace(/\\/+$/, \"\");\nconst ETHEREAL_CACHE = [\n    \"true\",\n    \"yes\",\n    \"y\",\n    \"1\"\n].includes((process.env.ETHEREAL_CACHE || \"yes\").toString().trim().toLowerCase());\nlet testAccount = false;\nmodule.exports.createTransport = function(transporter, defaults) {\n    let urlConfig;\n    let options;\n    let mailer;\n    if (// provided transporter is a configuration object, not transporter plugin\n    typeof transporter === \"object\" && typeof transporter.send !== \"function\" || // provided transporter looks like a connection url\n    typeof transporter === \"string\" && /^(smtps?|direct):/i.test(transporter)) {\n        if (urlConfig = typeof transporter === \"string\" ? transporter : transporter.url) {\n            // parse a configuration URL into configuration options\n            options = shared.parseConnectionUrl(urlConfig);\n        } else {\n            options = transporter;\n        }\n        if (options.pool) {\n            transporter = new SMTPPool(options);\n        } else if (options.sendmail) {\n            transporter = new SendmailTransport(options);\n        } else if (options.streamTransport) {\n            transporter = new StreamTransport(options);\n        } else if (options.jsonTransport) {\n            transporter = new JSONTransport(options);\n        } else if (options.SES) {\n            transporter = new SESTransport(options);\n        } else {\n            transporter = new SMTPTransport(options);\n        }\n    }\n    mailer = new Mailer(transporter, options, defaults);\n    return mailer;\n};\nmodule.exports.createTestAccount = function(apiUrl, callback) {\n    let promise;\n    if (!callback && typeof apiUrl === \"function\") {\n        callback = apiUrl;\n        apiUrl = false;\n    }\n    if (!callback) {\n        promise = new Promise((resolve, reject)=>{\n            callback = shared.callbackPromise(resolve, reject);\n        });\n    }\n    if (ETHEREAL_CACHE && testAccount) {\n        setImmediate(()=>callback(null, testAccount));\n        return promise;\n    }\n    apiUrl = apiUrl || ETHEREAL_API;\n    let chunks = [];\n    let chunklen = 0;\n    let req = nmfetch(apiUrl + \"/user\", {\n        contentType: \"application/json\",\n        method: \"POST\",\n        body: Buffer.from(JSON.stringify({\n            requestor: packageData.name,\n            version: packageData.version\n        }))\n    });\n    req.on(\"readable\", ()=>{\n        let chunk;\n        while((chunk = req.read()) !== null){\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n    req.once(\"error\", (err)=>callback(err));\n    req.once(\"end\", ()=>{\n        let res = Buffer.concat(chunks, chunklen);\n        let data;\n        let err;\n        try {\n            data = JSON.parse(res.toString());\n        } catch (E) {\n            err = E;\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (data.status !== \"success\" || data.error) {\n            return callback(new Error(data.error || \"Request failed\"));\n        }\n        delete data.status;\n        testAccount = data;\n        callback(null, testAccount);\n    });\n    return promise;\n};\nmodule.exports.getTestMessageUrl = function(info) {\n    if (!info || !info.response) {\n        return false;\n    }\n    let infoProps = new Map();\n    info.response.replace(/\\[([^\\]]+)\\]$/, (m, props)=>{\n        props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, (m, key, value)=>{\n            infoProps.set(key, value);\n        });\n    });\n    if (infoProps.has(\"STATUS\") && infoProps.has(\"MSGID\")) {\n        return (testAccount.web || ETHEREAL_WEB) + \"/message/\" + infoProps.get(\"MSGID\");\n    }\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/nodemailer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/qp/index.js":
/*!*************************************************!*\
  !*** ./node_modules/nodemailer/lib/qp/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n/**\n * Encodes a Buffer into a Quoted-Printable encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} Quoted-Printable encoded string\n */ function encode(buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer, \"utf-8\");\n    }\n    // usable characters that do not need encoding\n    let ranges = [\n        // https://tools.ietf.org/html/rfc2045#section-6.7\n        [\n            0x09\n        ],\n        [\n            0x0a\n        ],\n        [\n            0x0d\n        ],\n        [\n            0x20,\n            0x3c\n        ],\n        [\n            0x3e,\n            0x7e\n        ] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n    ];\n    let result = \"\";\n    let ord;\n    for(let i = 0, len = buffer.length; i < len; i++){\n        ord = buffer[i];\n        // if the char is in allowed range, then keep as is, unless it is a WS in the end of a line\n        if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {\n            result += String.fromCharCode(ord);\n            continue;\n        }\n        result += \"=\" + (ord < 0x10 ? \"0\" : \"\") + ord.toString(16).toUpperCase();\n    }\n    return result;\n}\n/**\n * Adds soft line breaks to a Quoted-Printable string\n *\n * @param {String} str Quoted-Printable encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped Quoted-Printable encoded string\n */ function wrap(str, lineLength) {\n    str = (str || \"\").toString();\n    lineLength = lineLength || 76;\n    if (str.length <= lineLength) {\n        return str;\n    }\n    let pos = 0;\n    let len = str.length;\n    let match, code, line;\n    let lineMargin = Math.floor(lineLength / 3);\n    let result = \"\";\n    // insert soft linebreaks where needed\n    while(pos < len){\n        line = str.substr(pos, lineLength);\n        if (match = line.match(/\\r\\n/)) {\n            line = line.substr(0, match.index + match[0].length);\n            result += line;\n            pos += line.length;\n            continue;\n        }\n        if (line.substr(-1) === \"\\n\") {\n            // nothing to change here\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (match = line.substr(-lineMargin).match(/\\n.*?$/)) {\n            // truncate to nearest line break\n            line = line.substr(0, line.length - (match[0].length - 1));\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \\t.,!?][^ \\t.,!?]*$/))) {\n            // truncate to nearest space\n            line = line.substr(0, line.length - (match[0].length - 1));\n        } else if (line.match(/[=][\\da-f]{0,2}$/i)) {\n            // push incomplete encoding sequences to the next line\n            if (match = line.match(/[=][\\da-f]{0,1}$/i)) {\n                line = line.substr(0, line.length - match[0].length);\n            }\n            // ensure that utf-8 sequences are not split\n            while(line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\\da-f]{2}$/gi))){\n                code = parseInt(match[0].substr(1, 2), 16);\n                if (code < 128) {\n                    break;\n                }\n                line = line.substr(0, line.length - 3);\n                if (code >= 0xc0) {\n                    break;\n                }\n            }\n        }\n        if (pos + line.length < len && line.substr(-1) !== \"\\n\") {\n            if (line.length === lineLength && line.match(/[=][\\da-f]{2}$/i)) {\n                line = line.substr(0, line.length - 3);\n            } else if (line.length === lineLength) {\n                line = line.substr(0, line.length - 1);\n            }\n            pos += line.length;\n            line += \"=\\r\\n\";\n        } else {\n            pos += line.length;\n        }\n        result += line;\n    }\n    return result;\n}\n/**\n * Helper function to check if a number is inside provided ranges\n *\n * @param {Number} nr Number to check for\n * @param {Array} ranges An Array of allowed values\n * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise\n */ function checkRanges(nr, ranges) {\n    for(let i = ranges.length - 1; i >= 0; i--){\n        if (!ranges[i].length) {\n            continue;\n        }\n        if (ranges[i].length === 1 && nr === ranges[i][0]) {\n            return true;\n        }\n        if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Creates a transform stream for encoding data to Quoted-Printable encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */ class Encoder extends Transform {\n    constructor(options){\n        super();\n        // init Transform\n        this.options = options || {};\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n        this._curLine = \"\";\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n    _transform(chunk, encoding, done) {\n        let qp;\n        if (encoding !== \"buffer\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n        this.inputBytes += chunk.length;\n        if (this.options.lineLength) {\n            qp = this._curLine + encode(chunk);\n            qp = wrap(qp, this.options.lineLength);\n            qp = qp.replace(/(^|\\n)([^\\n]*)$/, (match, lineBreak, lastLine)=>{\n                this._curLine = lastLine;\n                return lineBreak;\n            });\n            if (qp) {\n                this.outputBytes += qp.length;\n                this.push(qp);\n            }\n        } else {\n            qp = encode(chunk);\n            this.outputBytes += qp.length;\n            this.push(qp, \"ascii\");\n        }\n        done();\n    }\n    _flush(done) {\n        if (this._curLine) {\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, \"ascii\");\n        }\n        done();\n    }\n}\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/qp/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/nodemailer/lib/sendmail-transport/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst spawn = (__webpack_require__(/*! child_process */ \"child_process\").spawn);\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */ class SendmailTransport {\n    constructor(options){\n        options = options || {};\n        // use a reference to spawn for mocking purposes\n        this._spawn = spawn;\n        this.options = options || {};\n        this.name = \"Sendmail\";\n        this.version = packageData.version;\n        this.path = \"sendmail\";\n        this.args = false;\n        this.winbreak = false;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"sendmail\"\n        });\n        if (options) {\n            if (typeof options === \"string\") {\n                this.path = options;\n            } else if (typeof options === \"object\") {\n                if (options.path) {\n                    this.path = options.path;\n                }\n                if (Array.isArray(options.args)) {\n                    this.args = options.args;\n                }\n                this.winbreak = [\n                    \"win\",\n                    \"windows\",\n                    \"dos\",\n                    \"\\r\\n\"\n                ].includes((options.newline || \"\").toString().toLowerCase());\n            }\n        }\n    }\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let args;\n        let sendmail;\n        let returned;\n        const hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some((addr)=>/^-/.test(addr));\n        if (hasInvalidAddresses) {\n            return done(new Error(\"Can not send mail. Invalid envelope addresses.\"));\n        }\n        if (this.args) {\n            // force -i to keep single dots\n            args = [\n                \"-i\"\n            ].concat(this.args).concat(envelope.to);\n        } else {\n            args = [\n                \"-i\"\n            ].concat(envelope.from ? [\n                \"-f\",\n                envelope.from\n            ] : []).concat(envelope.to);\n        }\n        let callback = (err)=>{\n            if (returned) {\n                // ignore any additional responses, already done\n                return;\n            }\n            returned = true;\n            if (typeof done === \"function\") {\n                if (err) {\n                    return done(err);\n                } else {\n                    return done(null, {\n                        envelope: mail.data.envelope || mail.message.getEnvelope(),\n                        messageId,\n                        response: \"Messages queued for delivery\"\n                    });\n                }\n            }\n        };\n        try {\n            sendmail = this._spawn(this.path, args);\n        } catch (E) {\n            this.logger.error({\n                err: E,\n                tnx: \"spawn\",\n                messageId\n            }, \"Error occurred while spawning sendmail. %s\", E.message);\n            return callback(E);\n        }\n        if (sendmail) {\n            sendmail.on(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"spawn\",\n                    messageId\n                }, \"Error occurred when sending message %s. %s\", messageId, err.message);\n                callback(err);\n            });\n            sendmail.once(\"exit\", (code)=>{\n                if (!code) {\n                    return callback();\n                }\n                let err;\n                if (code === 127) {\n                    err = new Error(\"Sendmail command not found, process exited with code \" + code);\n                } else {\n                    err = new Error(\"Sendmail exited with code \" + code);\n                }\n                this.logger.error({\n                    err,\n                    tnx: \"stdin\",\n                    messageId\n                }, \"Error sending message %s to sendmail. %s\", messageId, err.message);\n                callback(err);\n            });\n            sendmail.once(\"close\", callback);\n            sendmail.stdin.on(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"stdin\",\n                    messageId\n                }, \"Error occurred when piping message %s to sendmail. %s\", messageId, err.message);\n                callback(err);\n            });\n            let recipients = [].concat(envelope.to || []);\n            if (recipients.length > 3) {\n                recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n            }\n            this.logger.info({\n                tnx: \"send\",\n                messageId\n            }, \"Sending message %s to <%s>\", messageId, recipients.join(\", \"));\n            let sourceStream = mail.message.createReadStream();\n            sourceStream.once(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"stdin\",\n                    messageId\n                }, \"Error occurred when generating message %s. %s\", messageId, err.message);\n                sendmail.kill(\"SIGINT\"); // do not deliver the message\n                callback(err);\n            });\n            sourceStream.pipe(sendmail.stdin);\n        } else {\n            return callback(new Error(\"sendmail was not found\"));\n        }\n    }\n}\nmodule.exports = SendmailTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/ses-transport/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst LeWindows = __webpack_require__(/*! ../mime-node/le-windows */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\");\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */ class SESTransport extends EventEmitter {\n    constructor(options){\n        super();\n        options = options || {};\n        this.options = options || {};\n        this.ses = this.options.SES;\n        this.name = \"SESTransport\";\n        this.version = packageData.version;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"ses-transport\"\n        });\n        // parallel sending connections\n        this.maxConnections = Number(this.options.maxConnections) || Infinity;\n        this.connections = 0;\n        // max messages per second\n        this.sendingRate = Number(this.options.sendingRate) || Infinity;\n        this.sendingRateTTL = null;\n        this.rateInterval = 1000; // milliseconds\n        this.rateMessages = [];\n        this.pending = [];\n        this.idling = true;\n        setImmediate(()=>{\n            if (this.idling) {\n                this.emit(\"idle\");\n            }\n        });\n    }\n    /**\n     * Schedules a sending of a message\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, callback) {\n        if (this.connections >= this.maxConnections) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n        if (!this._checkSendingRate()) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n        this._send(mail, (...args)=>{\n            setImmediate(()=>callback(...args));\n            this._sent();\n        });\n    }\n    _checkRatedQueue() {\n        if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n            return;\n        }\n        if (!this.pending.length) {\n            if (!this.idling) {\n                this.idling = true;\n                this.emit(\"idle\");\n            }\n            return;\n        }\n        let next = this.pending.shift();\n        this._send(next.mail, (...args)=>{\n            setImmediate(()=>next.callback(...args));\n            this._sent();\n        });\n    }\n    _checkSendingRate() {\n        clearTimeout(this.sendingRateTTL);\n        let now = Date.now();\n        let oldest = false;\n        // delete older messages\n        for(let i = this.rateMessages.length - 1; i >= 0; i--){\n            if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n                oldest = this.rateMessages[i].ts;\n            }\n            if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n                this.rateMessages.splice(i, 1);\n            }\n        }\n        if (this.rateMessages.length < this.sendingRate) {\n            return true;\n        }\n        let delay = Math.max(oldest + 1001, now + 20);\n        this.sendingRateTTL = setTimeout(()=>this._checkRatedQueue(), now - delay);\n        try {\n            this.sendingRateTTL.unref();\n        } catch (E) {\n        // Ignore. Happens on envs with non-node timer implementation\n        }\n        return false;\n    }\n    _sent() {\n        this.connections--;\n        this._checkRatedQueue();\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */ isIdle() {\n        return this.idling;\n    }\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ _send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n        this.connections++;\n        this.rateMessages.push(statObject);\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId\n        }, \"Sending message %s to <%s>\", messageId, recipients.join(\", \"));\n        let getRawMessage = (next)=>{\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === \"string\") {\n                mail.data._dkim.skipFields += \":date:message-id\";\n            } else {\n                mail.data._dkim.skipFields = \"date:message-id\";\n            }\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n            stream.on(\"readable\", ()=>{\n                let chunk;\n                while((chunk = stream.read()) !== null){\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n            sourceStream.once(\"error\", (err)=>stream.emit(\"error\", err));\n            stream.once(\"error\", (err)=>{\n                next(err);\n            });\n            stream.once(\"end\", ()=>next(null, Buffer.concat(chunks, chunklen)));\n        };\n        setImmediate(()=>getRawMessage((err, raw)=>{\n                if (err) {\n                    this.logger.error({\n                        err,\n                        tnx: \"send\",\n                        messageId\n                    }, \"Failed creating message for %s. %s\", messageId, err.message);\n                    statObject.pending = false;\n                    return callback(err);\n                }\n                let sesMessage = {\n                    RawMessage: {\n                        // required\n                        Data: raw // required\n                    },\n                    Source: envelope.from,\n                    Destinations: envelope.to\n                };\n                Object.keys(mail.data.ses || {}).forEach((key)=>{\n                    sesMessage[key] = mail.data.ses[key];\n                });\n                let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n                let aws = this.ses.aws || {};\n                let getRegion = (cb)=>{\n                    if (ses.config && typeof ses.config.region === \"function\") {\n                        // promise\n                        return ses.config.region().then((region)=>cb(null, region)).catch((err)=>cb(err));\n                    }\n                    return cb(null, ses.config && ses.config.region || \"us-east-1\");\n                };\n                getRegion((err, region)=>{\n                    if (err || !region) {\n                        region = \"us-east-1\";\n                    }\n                    let sendPromise;\n                    if (typeof ses.send === \"function\" && aws.SendRawEmailCommand) {\n                        // v3 API\n                        sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n                    } else {\n                        // v2 API\n                        sendPromise = ses.sendRawEmail(sesMessage).promise();\n                    }\n                    sendPromise.then((data)=>{\n                        if (region === \"us-east-1\") {\n                            region = \"email\";\n                        }\n                        statObject.pending = false;\n                        callback(null, {\n                            envelope: {\n                                from: envelope.from,\n                                to: envelope.to\n                            },\n                            messageId: \"<\" + data.MessageId + (!/@/.test(data.MessageId) ? \"@\" + region + \".amazonses.com\" : \"\") + \">\",\n                            response: data.MessageId,\n                            raw\n                        });\n                    }).catch((err)=>{\n                        this.logger.error({\n                            err,\n                            tnx: \"send\"\n                        }, \"Send error for %s: %s\", messageId, err.message);\n                        statObject.pending = false;\n                        callback(err);\n                    });\n                });\n            }));\n    }\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */ verify(callback) {\n        let promise;\n        let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n        let aws = this.ses.aws || {};\n        const sesMessage = {\n            RawMessage: {\n                // required\n                Data: \"From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid\"\n            },\n            Source: \"invalid@invalid\",\n            Destinations: [\n                \"invalid@invalid\"\n            ]\n        };\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        const cb = (err)=>{\n            if (err && (err.code || err.Code) !== \"InvalidParameterValue\") {\n                return callback(err);\n            }\n            return callback(null, true);\n        };\n        if (typeof ses.send === \"function\" && aws.SendRawEmailCommand) {\n            // v3 API\n            sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n            ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n        } else {\n            // v2 API\n            ses.sendRawEmail(sesMessage, cb);\n        }\n        return promise;\n    }\n}\nmodule.exports = SESTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/shared/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/shared/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-console: 0 */ \nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst DNS_TTL = 5 * 60 * 1000;\nlet networkInterfaces;\ntry {\n    networkInterfaces = os.networkInterfaces();\n} catch (err) {\n// fails on some systems\n}\nmodule.exports.networkInterfaces = networkInterfaces;\nconst isFamilySupported = (family, allowInternal)=>{\n    let networkInterfaces = module.exports.networkInterfaces;\n    if (!networkInterfaces) {\n        // hope for the best\n        return true;\n    }\n    const familySupported = // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6\n    Object.keys(networkInterfaces).map((key)=>networkInterfaces[key])// crux that replaces .flat() as it is not supported in older Node versions (v10 and older)\n    .reduce((acc, val)=>acc.concat(val), []).filter((i)=>!i.internal || allowInternal).filter((i)=>i.family === \"IPv\" + family || i.family === family).length > 0;\n    return familySupported;\n};\nconst resolver = (family, hostname, options, callback)=>{\n    options = options || {};\n    const familySupported = isFamilySupported(family, options.allowInternalNetworkInterfaces);\n    if (!familySupported) {\n        return callback(null, []);\n    }\n    const resolver = dns.Resolver ? new dns.Resolver(options) : dns;\n    resolver[\"resolve\" + family](hostname, (err, addresses)=>{\n        if (err) {\n            switch(err.code){\n                case dns.NODATA:\n                case dns.NOTFOUND:\n                case dns.NOTIMP:\n                case dns.SERVFAIL:\n                case dns.CONNREFUSED:\n                case dns.REFUSED:\n                case \"EAI_AGAIN\":\n                    return callback(null, []);\n            }\n            return callback(err);\n        }\n        return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));\n    });\n};\nconst dnsCache = module.exports.dnsCache = new Map();\nconst formatDNSValue = (value, extra)=>{\n    if (!value) {\n        return Object.assign({}, extra || {});\n    }\n    return Object.assign({\n        servername: value.servername,\n        host: !value.addresses || !value.addresses.length ? null : value.addresses.length === 1 ? value.addresses[0] : value.addresses[Math.floor(Math.random() * value.addresses.length)]\n    }, extra || {});\n};\nmodule.exports.resolveHostname = (options, callback)=>{\n    options = options || {};\n    if (!options.host && options.servername) {\n        options.host = options.servername;\n    }\n    if (!options.host || net.isIP(options.host)) {\n        // nothing to do here\n        let value = {\n            addresses: [\n                options.host\n            ],\n            servername: options.servername || false\n        };\n        return callback(null, formatDNSValue(value, {\n            cached: false\n        }));\n    }\n    let cached;\n    if (dnsCache.has(options.host)) {\n        cached = dnsCache.get(options.host);\n        if (!cached.expires || cached.expires >= Date.now()) {\n            return callback(null, formatDNSValue(cached.value, {\n                cached: true\n            }));\n        }\n    }\n    resolver(4, options.host, options, (err, addresses)=>{\n        if (err) {\n            if (cached) {\n                // ignore error, use expired value\n                return callback(null, formatDNSValue(cached.value, {\n                    cached: true,\n                    error: err\n                }));\n            }\n            return callback(err);\n        }\n        if (addresses && addresses.length) {\n            let value = {\n                addresses,\n                servername: options.servername || options.host\n            };\n            dnsCache.set(options.host, {\n                value,\n                expires: Date.now() + (options.dnsTtl || DNS_TTL)\n            });\n            return callback(null, formatDNSValue(value, {\n                cached: false\n            }));\n        }\n        resolver(6, options.host, options, (err, addresses)=>{\n            if (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(null, formatDNSValue(cached.value, {\n                        cached: true,\n                        error: err\n                    }));\n                }\n                return callback(err);\n            }\n            if (addresses && addresses.length) {\n                let value = {\n                    addresses,\n                    servername: options.servername || options.host\n                };\n                dnsCache.set(options.host, {\n                    value,\n                    expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                });\n                return callback(null, formatDNSValue(value, {\n                    cached: false\n                }));\n            }\n            try {\n                dns.lookup(options.host, {\n                    all: true\n                }, (err, addresses)=>{\n                    if (err) {\n                        if (cached) {\n                            // ignore error, use expired value\n                            return callback(null, formatDNSValue(cached.value, {\n                                cached: true,\n                                error: err\n                            }));\n                        }\n                        return callback(err);\n                    }\n                    let address = addresses ? addresses.filter((addr)=>isFamilySupported(addr.family)).map((addr)=>addr.address).shift() : false;\n                    if (addresses && addresses.length && !address) {\n                        // there are addresses but none can be used\n                        console.warn(`Failed to resolve IPv${addresses[0].family} addresses with current network`);\n                    }\n                    if (!address && cached) {\n                        // nothing was found, fallback to cached value\n                        return callback(null, formatDNSValue(cached.value, {\n                            cached: true\n                        }));\n                    }\n                    let value = {\n                        addresses: address ? [\n                            address\n                        ] : [\n                            options.host\n                        ],\n                        servername: options.servername || options.host\n                    };\n                    dnsCache.set(options.host, {\n                        value,\n                        expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                    });\n                    return callback(null, formatDNSValue(value, {\n                        cached: false\n                    }));\n                });\n            } catch (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(null, formatDNSValue(cached.value, {\n                        cached: true,\n                        error: err\n                    }));\n                }\n                return callback(err);\n            }\n        });\n    });\n};\n/**\n * Parses connection url to a structured configuration object\n *\n * @param {String} str Connection url\n * @return {Object} Configuration object\n */ module.exports.parseConnectionUrl = (str)=>{\n    str = str || \"\";\n    let options = {};\n    [\n        urllib.parse(str, true)\n    ].forEach((url)=>{\n        let auth;\n        switch(url.protocol){\n            case \"smtp:\":\n                options.secure = false;\n                break;\n            case \"smtps:\":\n                options.secure = true;\n                break;\n            case \"direct:\":\n                options.direct = true;\n                break;\n        }\n        if (!isNaN(url.port) && Number(url.port)) {\n            options.port = Number(url.port);\n        }\n        if (url.hostname) {\n            options.host = url.hostname;\n        }\n        if (url.auth) {\n            auth = url.auth.split(\":\");\n            if (!options.auth) {\n                options.auth = {};\n            }\n            options.auth.user = auth.shift();\n            options.auth.pass = auth.join(\":\");\n        }\n        Object.keys(url.query || {}).forEach((key)=>{\n            let obj = options;\n            let lKey = key;\n            let value = url.query[key];\n            if (!isNaN(value)) {\n                value = Number(value);\n            }\n            switch(value){\n                case \"true\":\n                    value = true;\n                    break;\n                case \"false\":\n                    value = false;\n                    break;\n            }\n            // tls is nested object\n            if (key.indexOf(\"tls.\") === 0) {\n                lKey = key.substr(4);\n                if (!options.tls) {\n                    options.tls = {};\n                }\n                obj = options.tls;\n            } else if (key.indexOf(\".\") >= 0) {\n                // ignore nested properties besides tls\n                return;\n            }\n            if (!(lKey in obj)) {\n                obj[lKey] = value;\n            }\n        });\n    });\n    return options;\n};\nmodule.exports._logFunc = (logger, level, defaults, data, message, ...args)=>{\n    let entry = {};\n    Object.keys(defaults || {}).forEach((key)=>{\n        if (key !== \"level\") {\n            entry[key] = defaults[key];\n        }\n    });\n    Object.keys(data || {}).forEach((key)=>{\n        if (key !== \"level\") {\n            entry[key] = data[key];\n        }\n    });\n    logger[level](entry, message, ...args);\n};\n/**\n * Returns a bunyan-compatible logger interface. Uses either provided logger or\n * creates a default console logger\n *\n * @param {Object} [options] Options object that might include 'logger' value\n * @return {Object} bunyan compatible logger\n */ module.exports.getLogger = (options, defaults)=>{\n    options = options || {};\n    let response = {};\n    let levels = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\",\n        \"fatal\"\n    ];\n    if (!options.logger) {\n        // use vanity logger\n        levels.forEach((level)=>{\n            response[level] = ()=>false;\n        });\n        return response;\n    }\n    let logger = options.logger;\n    if (options.logger === true) {\n        // create console logger\n        logger = createDefaultLogger(levels);\n    }\n    levels.forEach((level)=>{\n        response[level] = (data, message, ...args)=>{\n            module.exports._logFunc(logger, level, defaults, data, message, ...args);\n        };\n    });\n    return response;\n};\n/**\n * Wrapper for creating a callback that either resolves or rejects a promise\n * based on input\n *\n * @param {Function} resolve Function to run if callback is called\n * @param {Function} reject Function to run if callback ends with an error\n */ module.exports.callbackPromise = (resolve, reject)=>function() {\n        let args = Array.from(arguments);\n        let err = args.shift();\n        if (err) {\n            reject(err);\n        } else {\n            resolve(...args);\n        }\n    };\n/**\n * Resolves a String or a Buffer value for content value. Useful if the value\n * is a Stream or a file or an URL. If the value is a Stream, overwrites\n * the stream object with the resolved value (you can't stream a value twice).\n *\n * This is useful when you want to create a plugin that needs a content value,\n * for example the `html` or `text` value as a String or a Buffer but not as\n * a file path or an URL.\n *\n * @param {Object} data An object or an Array you want to resolve an element for\n * @param {String|Number} key Property name or an Array index\n * @param {Function} callback Callback function with (err, value)\n */ module.exports.resolveContent = (data, key, callback)=>{\n    let promise;\n    if (!callback) {\n        promise = new Promise((resolve, reject)=>{\n            callback = module.exports.callbackPromise(resolve, reject);\n        });\n    }\n    let content = data && data[key] && data[key].content || data[key];\n    let contentStream;\n    let encoding = (typeof data[key] === \"object\" && data[key].encoding || \"utf8\").toString().toLowerCase().replace(/[-_\\s]/g, \"\");\n    if (!content) {\n        return callback(null, content);\n    }\n    if (typeof content === \"object\") {\n        if (typeof content.pipe === \"function\") {\n            return resolveStream(content, (err, value)=>{\n                if (err) {\n                    return callback(err);\n                }\n                // we can't stream twice the same content, so we need\n                // to replace the stream object with the streaming result\n                if (data[key].content) {\n                    data[key].content = value;\n                } else {\n                    data[key] = value;\n                }\n                callback(null, value);\n            });\n        } else if (/^https?:\\/\\//i.test(content.path || content.href)) {\n            contentStream = nmfetch(content.path || content.href);\n            return resolveStream(contentStream, callback);\n        } else if (/^data:/i.test(content.path || content.href)) {\n            let parts = (content.path || content.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n            if (!parts) {\n                return callback(null, Buffer.from(0));\n            }\n            return callback(null, /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], \"base64\") : Buffer.from(decodeURIComponent(parts[2])));\n        } else if (content.path) {\n            return resolveStream(fs.createReadStream(content.path), callback);\n        }\n    }\n    if (typeof data[key].content === \"string\" && ![\n        \"utf8\",\n        \"usascii\",\n        \"ascii\"\n    ].includes(encoding)) {\n        content = Buffer.from(data[key].content, encoding);\n    }\n    // default action, return as is\n    setImmediate(()=>callback(null, content));\n    return promise;\n};\n/**\n * Copies properties from source objects to target objects\n */ module.exports.assign = function() {\n    let args = Array.from(arguments);\n    let target = args.shift() || {};\n    args.forEach((source)=>{\n        Object.keys(source || {}).forEach((key)=>{\n            if ([\n                \"tls\",\n                \"auth\"\n            ].includes(key) && source[key] && typeof source[key] === \"object\") {\n                // tls and auth are special keys that need to be enumerated separately\n                // other objects are passed as is\n                if (!target[key]) {\n                    // ensure that target has this key\n                    target[key] = {};\n                }\n                Object.keys(source[key]).forEach((subKey)=>{\n                    target[key][subKey] = source[key][subKey];\n                });\n            } else {\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n};\nmodule.exports.encodeXText = (str)=>{\n    // ! 0x21\n    // + 0x2B\n    // = 0x3D\n    // ~ 0x7E\n    if (!/[^\\x21-\\x2A\\x2C-\\x3C\\x3E-\\x7E]/.test(str)) {\n        return str;\n    }\n    let buf = Buffer.from(str);\n    let result = \"\";\n    for(let i = 0, len = buf.length; i < len; i++){\n        let c = buf[i];\n        if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {\n            result += \"+\" + (c < 0x10 ? \"0\" : \"\") + c.toString(16).toUpperCase();\n        } else {\n            result += String.fromCharCode(c);\n        }\n    }\n    return result;\n};\n/**\n * Streams a stream value into a Buffer\n *\n * @param {Object} stream Readable stream\n * @param {Function} callback Callback function with (err, value)\n */ function resolveStream(stream, callback) {\n    let responded = false;\n    let chunks = [];\n    let chunklen = 0;\n    stream.on(\"error\", (err)=>{\n        if (responded) {\n            return;\n        }\n        responded = true;\n        callback(err);\n    });\n    stream.on(\"readable\", ()=>{\n        let chunk;\n        while((chunk = stream.read()) !== null){\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n    stream.on(\"end\", ()=>{\n        if (responded) {\n            return;\n        }\n        responded = true;\n        let value;\n        try {\n            value = Buffer.concat(chunks, chunklen);\n        } catch (E) {\n            return callback(E);\n        }\n        callback(null, value);\n    });\n}\n/**\n * Generates a bunyan-like logger that prints to console\n *\n * @returns {Object} Bunyan logger instance\n */ function createDefaultLogger(levels) {\n    let levelMaxLen = 0;\n    let levelNames = new Map();\n    levels.forEach((level)=>{\n        if (level.length > levelMaxLen) {\n            levelMaxLen = level.length;\n        }\n    });\n    levels.forEach((level)=>{\n        let levelName = level.toUpperCase();\n        if (levelName.length < levelMaxLen) {\n            levelName += \" \".repeat(levelMaxLen - levelName.length);\n        }\n        levelNames.set(level, levelName);\n    });\n    let print = (level, entry, message, ...args)=>{\n        let prefix = \"\";\n        if (entry) {\n            if (entry.tnx === \"server\") {\n                prefix = \"S: \";\n            } else if (entry.tnx === \"client\") {\n                prefix = \"C: \";\n            }\n            if (entry.sid) {\n                prefix = \"[\" + entry.sid + \"] \" + prefix;\n            }\n            if (entry.cid) {\n                prefix = \"[#\" + entry.cid + \"] \" + prefix;\n            }\n        }\n        message = util.format(message, ...args);\n        message.split(/\\r?\\n/).forEach((line)=>{\n            console.log(\"[%s] %s %s\", new Date().toISOString().substr(0, 19).replace(/T/, \" \"), levelNames.get(level), prefix + line);\n        });\n    };\n    let logger = {};\n    levels.forEach((level)=>{\n        logger[level] = print.bind(null, level);\n    });\n    return logger;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/shared/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js":
/*!********************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/data-stream.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst Transform = stream.Transform;\n/**\n * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>\n * Also makes sure that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */ class DataStream extends Transform {\n    constructor(options){\n        super(options);\n        // init Transform\n        this.options = options || {};\n        this._curLine = \"\";\n        this.inByteCount = 0;\n        this.outByteCount = 0;\n        this.lastByte = false;\n    }\n    /**\n     * Escapes dots\n     */ _transform(chunk, encoding, done) {\n        let chunks = [];\n        let chunklen = 0;\n        let i, len, lastPos = 0;\n        let buf;\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n        if (typeof chunk === \"string\") {\n            chunk = Buffer.from(chunk);\n        }\n        this.inByteCount += chunk.length;\n        for(i = 0, len = chunk.length; i < len; i++){\n            if (chunk[i] === 0x2e) {\n                // .\n                if (i && chunk[i - 1] === 0x0a || !i && (!this.lastByte || this.lastByte === 0x0a)) {\n                    buf = chunk.slice(lastPos, i + 1);\n                    chunks.push(buf);\n                    chunks.push(Buffer.from(\".\"));\n                    chunklen += buf.length + 1;\n                    lastPos = i + 1;\n                }\n            } else if (chunk[i] === 0x0a) {\n                // .\n                if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n                    if (i > lastPos) {\n                        buf = chunk.slice(lastPos, i);\n                        chunks.push(buf);\n                        chunklen += buf.length + 2;\n                    } else {\n                        chunklen += 2;\n                    }\n                    chunks.push(Buffer.from(\"\\r\\n\"));\n                    lastPos = i + 1;\n                }\n            }\n        }\n        if (chunklen) {\n            // add last piece\n            if (lastPos < chunk.length) {\n                buf = chunk.slice(lastPos);\n                chunks.push(buf);\n                chunklen += buf.length;\n            }\n            this.outByteCount += chunklen;\n            this.push(Buffer.concat(chunks, chunklen));\n        } else {\n            this.outByteCount += chunk.length;\n            this.push(chunk);\n        }\n        this.lastByte = chunk[chunk.length - 1];\n        done();\n    }\n    /**\n     * Finalizes the stream with a dot on a single line\n     */ _flush(done) {\n        let buf;\n        if (this.lastByte === 0x0a) {\n            buf = Buffer.from(\".\\r\\n\");\n        } else if (this.lastByte === 0x0d) {\n            buf = Buffer.from(\"\\n.\\r\\n\");\n        } else {\n            buf = Buffer.from(\"\\r\\n.\\r\\n\");\n        }\n        this.outByteCount += buf.length;\n        this.push(buf);\n        done();\n    }\n}\nmodule.exports = DataStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvc210cC1jb25uZWN0aW9uL2RhdGEtc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsWUFBWUYsT0FBT0UsU0FBUztBQUVsQzs7Ozs7Q0FLQyxHQUNELE1BQU1DLG1CQUFtQkQ7SUFDckJFLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04saUJBQWlCO1FBQ2pCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFDM0IsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFFaEIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxZQUFZLEdBQUc7UUFDcEIsSUFBSSxDQUFDQyxRQUFRLEdBQUc7SUFDcEI7SUFFQTs7S0FFQyxHQUNEQyxXQUFXQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFO1FBQzlCLElBQUlDLFNBQVMsRUFBRTtRQUNmLElBQUlDLFdBQVc7UUFDZixJQUFJQyxHQUNBQyxLQUNBQyxVQUFVO1FBQ2QsSUFBSUM7UUFFSixJQUFJLENBQUNSLFNBQVMsQ0FBQ0EsTUFBTVMsTUFBTSxFQUFFO1lBQ3pCLE9BQU9QO1FBQ1g7UUFFQSxJQUFJLE9BQU9GLFVBQVUsVUFBVTtZQUMzQkEsUUFBUVUsT0FBT0MsSUFBSSxDQUFDWDtRQUN4QjtRQUVBLElBQUksQ0FBQ0osV0FBVyxJQUFJSSxNQUFNUyxNQUFNO1FBRWhDLElBQUtKLElBQUksR0FBR0MsTUFBTU4sTUFBTVMsTUFBTSxFQUFFSixJQUFJQyxLQUFLRCxJQUFLO1lBQzFDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQ25CLElBQUk7Z0JBQ0osSUFBSSxLQUFNTCxLQUFLLENBQUNLLElBQUksRUFBRSxLQUFLLFFBQVUsQ0FBQ0EsS0FBTSxFQUFDLElBQUksQ0FBQ1AsUUFBUSxJQUFJLElBQUksQ0FBQ0EsUUFBUSxLQUFLLElBQUcsR0FBSztvQkFDcEZVLE1BQU1SLE1BQU1ZLEtBQUssQ0FBQ0wsU0FBU0YsSUFBSTtvQkFDL0JGLE9BQU9VLElBQUksQ0FBQ0w7b0JBQ1pMLE9BQU9VLElBQUksQ0FBQ0gsT0FBT0MsSUFBSSxDQUFDO29CQUN4QlAsWUFBWUksSUFBSUMsTUFBTSxHQUFHO29CQUN6QkYsVUFBVUYsSUFBSTtnQkFDbEI7WUFDSixPQUFPLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQzFCLElBQUk7Z0JBQ0osSUFBSSxLQUFNTCxLQUFLLENBQUNLLElBQUksRUFBRSxLQUFLLFFBQVUsQ0FBQ0EsS0FBSyxJQUFJLENBQUNQLFFBQVEsS0FBSyxNQUFPO29CQUNoRSxJQUFJTyxJQUFJRSxTQUFTO3dCQUNiQyxNQUFNUixNQUFNWSxLQUFLLENBQUNMLFNBQVNGO3dCQUMzQkYsT0FBT1UsSUFBSSxDQUFDTDt3QkFDWkosWUFBWUksSUFBSUMsTUFBTSxHQUFHO29CQUM3QixPQUFPO3dCQUNITCxZQUFZO29CQUNoQjtvQkFDQUQsT0FBT1UsSUFBSSxDQUFDSCxPQUFPQyxJQUFJLENBQUM7b0JBQ3hCSixVQUFVRixJQUFJO2dCQUNsQjtZQUNKO1FBQ0o7UUFFQSxJQUFJRCxVQUFVO1lBQ1YsaUJBQWlCO1lBQ2pCLElBQUlHLFVBQVVQLE1BQU1TLE1BQU0sRUFBRTtnQkFDeEJELE1BQU1SLE1BQU1ZLEtBQUssQ0FBQ0w7Z0JBQ2xCSixPQUFPVSxJQUFJLENBQUNMO2dCQUNaSixZQUFZSSxJQUFJQyxNQUFNO1lBQzFCO1lBRUEsSUFBSSxDQUFDWixZQUFZLElBQUlPO1lBQ3JCLElBQUksQ0FBQ1MsSUFBSSxDQUFDSCxPQUFPSSxNQUFNLENBQUNYLFFBQVFDO1FBQ3BDLE9BQU87WUFDSCxJQUFJLENBQUNQLFlBQVksSUFBSUcsTUFBTVMsTUFBTTtZQUNqQyxJQUFJLENBQUNJLElBQUksQ0FBQ2I7UUFDZDtRQUVBLElBQUksQ0FBQ0YsUUFBUSxHQUFHRSxLQUFLLENBQUNBLE1BQU1TLE1BQU0sR0FBRyxFQUFFO1FBQ3ZDUDtJQUNKO0lBRUE7O0tBRUMsR0FDRGEsT0FBT2IsSUFBSSxFQUFFO1FBQ1QsSUFBSU07UUFDSixJQUFJLElBQUksQ0FBQ1YsUUFBUSxLQUFLLE1BQU07WUFDeEJVLE1BQU1FLE9BQU9DLElBQUksQ0FBQztRQUN0QixPQUFPLElBQUksSUFBSSxDQUFDYixRQUFRLEtBQUssTUFBTTtZQUMvQlUsTUFBTUUsT0FBT0MsSUFBSSxDQUFDO1FBQ3RCLE9BQU87WUFDSEgsTUFBTUUsT0FBT0MsSUFBSSxDQUFDO1FBQ3RCO1FBQ0EsSUFBSSxDQUFDZCxZQUFZLElBQUlXLElBQUlDLE1BQU07UUFDL0IsSUFBSSxDQUFDSSxJQUFJLENBQUNMO1FBQ1ZOO0lBQ0o7QUFDSjtBQUVBYyxPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub2RlbWFpbGVyL2xpYi9zbXRwLWNvbm5lY3Rpb24vZGF0YS1zdHJlYW0uanM/MDMzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgVHJhbnNmb3JtID0gc3RyZWFtLlRyYW5zZm9ybTtcblxuLyoqXG4gKiBFc2NhcGVzIGRvdHMgaW4gdGhlIGJlZ2lubmluZyBvZiBsaW5lcy4gRW5kcyB0aGUgc3RyZWFtIHdpdGggPENSPjxMRj4uPENSPjxMRj5cbiAqIEFsc28gbWFrZXMgc3VyZSB0aGF0IG9ubHkgPENSPjxMRj4gc2VxdWVuY2VzIGFyZSB1c2VkIGZvciBsaW5lYnJlYWtzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgU3RyZWFtIG9wdGlvbnNcbiAqL1xuY2xhc3MgRGF0YVN0cmVhbSBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgLy8gaW5pdCBUcmFuc2Zvcm1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdGhpcy5fY3VyTGluZSA9ICcnO1xuXG4gICAgICAgIHRoaXMuaW5CeXRlQ291bnQgPSAwO1xuICAgICAgICB0aGlzLm91dEJ5dGVDb3VudCA9IDA7XG4gICAgICAgIHRoaXMubGFzdEJ5dGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIGRvdHNcbiAgICAgKi9cbiAgICBfdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgZG9uZSkge1xuICAgICAgICBsZXQgY2h1bmtzID0gW107XG4gICAgICAgIGxldCBjaHVua2xlbiA9IDA7XG4gICAgICAgIGxldCBpLFxuICAgICAgICAgICAgbGVuLFxuICAgICAgICAgICAgbGFzdFBvcyA9IDA7XG4gICAgICAgIGxldCBidWY7XG5cbiAgICAgICAgaWYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmspO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbkJ5dGVDb3VudCArPSBjaHVuay5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gY2h1bmsubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjaHVua1tpXSA9PT0gMHgyZSkge1xuICAgICAgICAgICAgICAgIC8vIC5cbiAgICAgICAgICAgICAgICBpZiAoKGkgJiYgY2h1bmtbaSAtIDFdID09PSAweDBhKSB8fCAoIWkgJiYgKCF0aGlzLmxhc3RCeXRlIHx8IHRoaXMubGFzdEJ5dGUgPT09IDB4MGEpKSkge1xuICAgICAgICAgICAgICAgICAgICBidWYgPSBjaHVuay5zbGljZShsYXN0UG9zLCBpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKGJ1Zik7XG4gICAgICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKEJ1ZmZlci5mcm9tKCcuJykpO1xuICAgICAgICAgICAgICAgICAgICBjaHVua2xlbiArPSBidWYubGVuZ3RoICsgMTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFBvcyA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtbaV0gPT09IDB4MGEpIHtcbiAgICAgICAgICAgICAgICAvLyAuXG4gICAgICAgICAgICAgICAgaWYgKChpICYmIGNodW5rW2kgLSAxXSAhPT0gMHgwZCkgfHwgKCFpICYmIHRoaXMubGFzdEJ5dGUgIT09IDB4MGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gbGFzdFBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmID0gY2h1bmsuc2xpY2UobGFzdFBvcywgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVua3MucHVzaChidWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtsZW4gKz0gYnVmLmxlbmd0aCArIDI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVua2xlbiArPSAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKEJ1ZmZlci5mcm9tKCdcXHJcXG4nKSk7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQb3MgPSBpICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2h1bmtsZW4pIHtcbiAgICAgICAgICAgIC8vIGFkZCBsYXN0IHBpZWNlXG4gICAgICAgICAgICBpZiAobGFzdFBvcyA8IGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGJ1ZiA9IGNodW5rLnNsaWNlKGxhc3RQb3MpO1xuICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKGJ1Zik7XG4gICAgICAgICAgICAgICAgY2h1bmtsZW4gKz0gYnVmLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5vdXRCeXRlQ291bnQgKz0gY2h1bmtsZW47XG4gICAgICAgICAgICB0aGlzLnB1c2goQnVmZmVyLmNvbmNhdChjaHVua3MsIGNodW5rbGVuKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm91dEJ5dGVDb3VudCArPSBjaHVuay5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnB1c2goY2h1bmspO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXN0Qnl0ZSA9IGNodW5rW2NodW5rLmxlbmd0aCAtIDFdO1xuICAgICAgICBkb25lKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluYWxpemVzIHRoZSBzdHJlYW0gd2l0aCBhIGRvdCBvbiBhIHNpbmdsZSBsaW5lXG4gICAgICovXG4gICAgX2ZsdXNoKGRvbmUpIHtcbiAgICAgICAgbGV0IGJ1ZjtcbiAgICAgICAgaWYgKHRoaXMubGFzdEJ5dGUgPT09IDB4MGEpIHtcbiAgICAgICAgICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKCcuXFxyXFxuJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5sYXN0Qnl0ZSA9PT0gMHgwZCkge1xuICAgICAgICAgICAgYnVmID0gQnVmZmVyLmZyb20oJ1xcbi5cXHJcXG4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKCdcXHJcXG4uXFxyXFxuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdXRCeXRlQ291bnQgKz0gYnVmLmxlbmd0aDtcbiAgICAgICAgdGhpcy5wdXNoKGJ1Zik7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVN0cmVhbTtcbiJdLCJuYW1lcyI6WyJzdHJlYW0iLCJyZXF1aXJlIiwiVHJhbnNmb3JtIiwiRGF0YVN0cmVhbSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIl9jdXJMaW5lIiwiaW5CeXRlQ291bnQiLCJvdXRCeXRlQ291bnQiLCJsYXN0Qnl0ZSIsIl90cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiZG9uZSIsImNodW5rcyIsImNodW5rbGVuIiwiaSIsImxlbiIsImxhc3RQb3MiLCJidWYiLCJsZW5ndGgiLCJCdWZmZXIiLCJmcm9tIiwic2xpY2UiLCJwdXNoIiwiY29uY2F0IiwiX2ZsdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js":
/*!**************************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Minimal HTTP/S proxy client\n */ const net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst urllib = __webpack_require__(/*! url */ \"url\");\n/**\n * Establishes proxied connection to destinationPort\n *\n * httpProxyClient(\"http://localhost:3128/\", 80, \"google.com\", function(err, socket){\n *     socket.write(\"GET / HTTP/1.0\\r\\n\\r\\n\");\n * });\n *\n * @param {String} proxyUrl proxy configuration, etg \"http://proxy.host:3128/\"\n * @param {Number} destinationPort Port to open in destination host\n * @param {String} destinationHost Destination hostname\n * @param {Function} callback Callback to run with the rocket object once connection is established\n */ function httpProxyClient(proxyUrl, destinationPort, destinationHost, callback) {\n    let proxy = urllib.parse(proxyUrl);\n    // create a socket connection to the proxy server\n    let options;\n    let connect;\n    let socket;\n    options = {\n        host: proxy.hostname,\n        port: Number(proxy.port) ? Number(proxy.port) : proxy.protocol === \"https:\" ? 443 : 80\n    };\n    if (proxy.protocol === \"https:\") {\n        // we can use untrusted proxies as long as we verify actual SMTP certificates\n        options.rejectUnauthorized = false;\n        connect = tls.connect.bind(tls);\n    } else {\n        connect = net.connect.bind(net);\n    }\n    // Error harness for initial connection. Once connection is established, the responsibility\n    // to handle errors is passed to whoever uses this socket\n    let finished = false;\n    let tempSocketErr = (err)=>{\n        if (finished) {\n            return;\n        }\n        finished = true;\n        try {\n            socket.destroy();\n        } catch (E) {\n        // ignore\n        }\n        callback(err);\n    };\n    let timeoutErr = ()=>{\n        let err = new Error(\"Proxy socket timed out\");\n        err.code = \"ETIMEDOUT\";\n        tempSocketErr(err);\n    };\n    socket = connect(options, ()=>{\n        if (finished) {\n            return;\n        }\n        let reqHeaders = {\n            Host: destinationHost + \":\" + destinationPort,\n            Connection: \"close\"\n        };\n        if (proxy.auth) {\n            reqHeaders[\"Proxy-Authorization\"] = \"Basic \" + Buffer.from(proxy.auth).toString(\"base64\");\n        }\n        socket.write(// HTTP method\n        \"CONNECT \" + destinationHost + \":\" + destinationPort + \" HTTP/1.1\\r\\n\" + // HTTP request headers\n        Object.keys(reqHeaders).map((key)=>key + \": \" + reqHeaders[key]).join(\"\\r\\n\") + // End request\n        \"\\r\\n\\r\\n\");\n        let headers = \"\";\n        let onSocketData = (chunk)=>{\n            let match;\n            let remainder;\n            if (finished) {\n                return;\n            }\n            headers += chunk.toString(\"binary\");\n            if (match = headers.match(/\\r\\n\\r\\n/)) {\n                socket.removeListener(\"data\", onSocketData);\n                remainder = headers.substr(match.index + match[0].length);\n                headers = headers.substr(0, match.index);\n                if (remainder) {\n                    socket.unshift(Buffer.from(remainder, \"binary\"));\n                }\n                // proxy connection is now established\n                finished = true;\n                // check response code\n                match = headers.match(/^HTTP\\/\\d+\\.\\d+ (\\d+)/i);\n                if (!match || (match[1] || \"\").charAt(0) !== \"2\") {\n                    try {\n                        socket.destroy();\n                    } catch (E) {\n                    // ignore\n                    }\n                    return callback(new Error(\"Invalid response from proxy\" + (match && \": \" + match[1] || \"\")));\n                }\n                socket.removeListener(\"error\", tempSocketErr);\n                socket.removeListener(\"timeout\", timeoutErr);\n                socket.setTimeout(0);\n                return callback(null, socket);\n            }\n        };\n        socket.on(\"data\", onSocketData);\n    });\n    socket.setTimeout(httpProxyClient.timeout || 30 * 1000);\n    socket.on(\"timeout\", timeoutErr);\n    socket.once(\"error\", tempSocketErr);\n}\nmodule.exports = httpProxyClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst packageInfo = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst DataStream = __webpack_require__(/*! ./data-stream */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n// default timeout values in ms\nconst CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\nconst SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\nconst GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\nconst DNS_TIMEOUT = 30 * 1000; // how much to wait for resolveHostname\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 587 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **dnsTimeout** - Time to wait in ms for the DNS requests to be resolved (defaults to 30 seconds)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */ class SMTPConnection extends EventEmitter {\n    constructor(options){\n        super(options);\n        this.id = crypto.randomBytes(8).toString(\"base64\").replace(/\\W/g, \"\");\n        this.stage = \"init\";\n        this.options = options || {};\n        this.secureConnection = !!this.options.secure;\n        this.alreadySecured = !!this.options.secured;\n        this.port = Number(this.options.port) || (this.secureConnection ? 465 : 587);\n        this.host = this.options.host || \"localhost\";\n        this.allowInternalNetworkInterfaces = this.options.allowInternalNetworkInterfaces || false;\n        if (typeof this.options.secure === \"undefined\" && this.port === 465) {\n            // if secure option is not set but port is 465, then default to secure\n            this.secureConnection = true;\n        }\n        this.name = this.options.name || this._getHostname();\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"smtp-connection\",\n            sid: this.id\n        });\n        this.customAuth = new Map();\n        Object.keys(this.options.customAuth || {}).forEach((key)=>{\n            let mapKey = (key || \"\").toString().trim().toUpperCase();\n            if (!mapKey) {\n                return;\n            }\n            this.customAuth.set(mapKey, this.options.customAuth[key]);\n        });\n        /**\n         * Expose version nr, just for the reference\n         * @type {String}\n         */ this.version = packageInfo.version;\n        /**\n         * If true, then the user is authenticated\n         * @type {Boolean}\n         */ this.authenticated = false;\n        /**\n         * If set to true, this instance is no longer active\n         * @private\n         */ this.destroyed = false;\n        /**\n         * Defines if the current connection is secure or not. If not,\n         * STARTTLS can be used if available\n         * @private\n         */ this.secure = !!this.secureConnection;\n        /**\n         * Store incomplete messages coming from the server\n         * @private\n         */ this._remainder = \"\";\n        /**\n         * Unprocessed responses from the server\n         * @type {Array}\n         */ this._responseQueue = [];\n        this.lastServerResponse = false;\n        /**\n         * The socket connecting to the server\n         * @publick\n         */ this._socket = false;\n        /**\n         * Lists supported auth mechanisms\n         * @private\n         */ this._supportedAuth = [];\n        /**\n         * Set to true, if EHLO response includes \"AUTH\".\n         * If false then authentication is not tried\n         */ this.allowsAuth = false;\n        /**\n         * Includes current envelope (from, to)\n         * @private\n         */ this._envelope = false;\n        /**\n         * Lists supported extensions\n         * @private\n         */ this._supportedExtensions = [];\n        /**\n         * Defines the maximum allowed size for a single message\n         * @private\n         */ this._maxAllowedSize = 0;\n        /**\n         * Function queue to run if a data chunk comes from the server\n         * @private\n         */ this._responseActions = [];\n        this._recipientQueue = [];\n        /**\n         * Timeout variable for waiting the greeting\n         * @private\n         */ this._greetingTimeout = false;\n        /**\n         * Timeout variable for waiting the connection to start\n         * @private\n         */ this._connectionTimeout = false;\n        /**\n         * If the socket is deemed already closed\n         * @private\n         */ this._destroyed = false;\n        /**\n         * If the socket is already being closed\n         * @private\n         */ this._closing = false;\n        /**\n         * Callbacks for socket's listeners\n         */ this._onSocketData = (chunk)=>this._onData(chunk);\n        this._onSocketError = (error)=>this._onError(error, \"ESOCKET\", false, \"CONN\");\n        this._onSocketClose = ()=>this._onClose();\n        this._onSocketEnd = ()=>this._onEnd();\n        this._onSocketTimeout = ()=>this._onTimeout();\n    }\n    /**\n     * Creates a connection to a SMTP server and sets up connection\n     * listener\n     */ connect(connectCallback) {\n        if (typeof connectCallback === \"function\") {\n            this.once(\"connect\", ()=>{\n                this.logger.debug({\n                    tnx: \"smtp\"\n                }, \"SMTP handshake finished\");\n                connectCallback();\n            });\n            const isDestroyedMessage = this._isDestroyedMessage(\"connect\");\n            if (isDestroyedMessage) {\n                return connectCallback(this._formatError(isDestroyedMessage, \"ECONNECTION\", false, \"CONN\"));\n            }\n        }\n        let opts = {\n            port: this.port,\n            host: this.host,\n            allowInternalNetworkInterfaces: this.allowInternalNetworkInterfaces,\n            timeout: this.options.dnsTimeout || DNS_TIMEOUT\n        };\n        if (this.options.localAddress) {\n            opts.localAddress = this.options.localAddress;\n        }\n        let setupConnectionHandlers = ()=>{\n            this._connectionTimeout = setTimeout(()=>{\n                this._onError(\"Connection timeout\", \"ETIMEDOUT\", false, \"CONN\");\n            }, this.options.connectionTimeout || CONNECTION_TIMEOUT);\n            this._socket.on(\"error\", this._onSocketError);\n        };\n        if (this.options.connection) {\n            // connection is already opened\n            this._socket = this.options.connection;\n            if (this.secureConnection && !this.alreadySecured) {\n                setImmediate(()=>this._upgradeConnection((err)=>{\n                        if (err) {\n                            this._onError(new Error(\"Error initiating TLS - \" + (err.message || err)), \"ETLS\", false, \"CONN\");\n                            return;\n                        }\n                        this._onConnect();\n                    }));\n            } else {\n                setImmediate(()=>this._onConnect());\n            }\n            return;\n        } else if (this.options.socket) {\n            // socket object is set up but not yet connected\n            this._socket = this.options.socket;\n            return shared.resolveHostname(opts, (err, resolved)=>{\n                if (err) {\n                    return setImmediate(()=>this._onError(err, \"EDNS\", false, \"CONN\"));\n                }\n                this.logger.debug({\n                    tnx: \"dns\",\n                    source: opts.host,\n                    resolved: resolved.host,\n                    cached: !!resolved.cached\n                }, \"Resolved %s as %s [cache %s]\", opts.host, resolved.host, resolved.cached ? \"hit\" : \"miss\");\n                Object.keys(resolved).forEach((key)=>{\n                    if (key.charAt(0) !== \"_\" && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket.connect(this.port, this.host, ()=>{\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(()=>this._onError(E, \"ECONNECTION\", false, \"CONN\"));\n                }\n            });\n        } else if (this.secureConnection) {\n            // connect using tls\n            if (this.options.tls) {\n                Object.keys(this.options.tls).forEach((key)=>{\n                    opts[key] = this.options.tls[key];\n                });\n            }\n            return shared.resolveHostname(opts, (err, resolved)=>{\n                if (err) {\n                    return setImmediate(()=>this._onError(err, \"EDNS\", false, \"CONN\"));\n                }\n                this.logger.debug({\n                    tnx: \"dns\",\n                    source: opts.host,\n                    resolved: resolved.host,\n                    cached: !!resolved.cached\n                }, \"Resolved %s as %s [cache %s]\", opts.host, resolved.host, resolved.cached ? \"hit\" : \"miss\");\n                Object.keys(resolved).forEach((key)=>{\n                    if (key.charAt(0) !== \"_\" && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = tls.connect(opts, ()=>{\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(()=>this._onError(E, \"ECONNECTION\", false, \"CONN\"));\n                }\n            });\n        } else {\n            // connect using plaintext\n            return shared.resolveHostname(opts, (err, resolved)=>{\n                if (err) {\n                    return setImmediate(()=>this._onError(err, \"EDNS\", false, \"CONN\"));\n                }\n                this.logger.debug({\n                    tnx: \"dns\",\n                    source: opts.host,\n                    resolved: resolved.host,\n                    cached: !!resolved.cached\n                }, \"Resolved %s as %s [cache %s]\", opts.host, resolved.host, resolved.cached ? \"hit\" : \"miss\");\n                Object.keys(resolved).forEach((key)=>{\n                    if (key.charAt(0) !== \"_\" && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = net.connect(opts, ()=>{\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(()=>this._onError(E, \"ECONNECTION\", false, \"CONN\"));\n                }\n            });\n        }\n    }\n    /**\n     * Sends QUIT\n     */ quit() {\n        this._sendCommand(\"QUIT\");\n        this._responseActions.push(this.close);\n    }\n    /**\n     * Closes the connection to the server\n     */ close() {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n        this._responseActions = [];\n        // allow to run this function only once\n        if (this._closing) {\n            return;\n        }\n        this._closing = true;\n        let closeMethod = \"end\";\n        if (this.stage === \"init\") {\n            // Close the socket immediately when connection timed out\n            closeMethod = \"destroy\";\n        }\n        this.logger.debug({\n            tnx: \"smtp\"\n        }, 'Closing connection to the server using \"%s\"', closeMethod);\n        let socket = this._socket && this._socket.socket || this._socket;\n        if (socket && !socket.destroyed) {\n            try {\n                this._socket[closeMethod]();\n            } catch (E) {\n            // just ignore\n            }\n        }\n        this._destroy();\n    }\n    /**\n     * Authenticate user\n     */ login(authData, callback) {\n        const isDestroyedMessage = this._isDestroyedMessage(\"login\");\n        if (isDestroyedMessage) {\n            return callback(this._formatError(isDestroyedMessage, \"ECONNECTION\", false, \"API\"));\n        }\n        this._auth = authData || {};\n        // Select SASL authentication method\n        this._authMethod = (this._auth.method || \"\").toString().trim().toUpperCase() || false;\n        if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {\n            this._authMethod = \"XOAUTH2\";\n        } else if (!this._authMethod || this._authMethod === \"XOAUTH2\" && !this._auth.oauth2) {\n            // use first supported\n            this._authMethod = (this._supportedAuth[0] || \"PLAIN\").toUpperCase().trim();\n        }\n        if (this._authMethod !== \"XOAUTH2\" && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {\n            if (this._auth.user && this._auth.pass || this.customAuth.has(this._authMethod)) {\n                this._auth.credentials = {\n                    user: this._auth.user,\n                    pass: this._auth.pass,\n                    options: this._auth.options\n                };\n            } else {\n                return callback(this._formatError('Missing credentials for \"' + this._authMethod + '\"', \"EAUTH\", false, \"API\"));\n            }\n        }\n        if (this.customAuth.has(this._authMethod)) {\n            let handler = this.customAuth.get(this._authMethod);\n            let lastResponse;\n            let returned = false;\n            let resolve = ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                this.logger.info({\n                    tnx: \"smtp\",\n                    username: this._auth.user,\n                    action: \"authenticated\",\n                    method: this._authMethod\n                }, \"User %s authenticated\", JSON.stringify(this._auth.user));\n                this.authenticated = true;\n                callback(null, true);\n            };\n            let reject = (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                callback(this._formatError(err, \"EAUTH\", lastResponse, \"AUTH \" + this._authMethod));\n            };\n            let handlerResponse = handler({\n                auth: this._auth,\n                method: this._authMethod,\n                extensions: [].concat(this._supportedExtensions),\n                authMethods: [].concat(this._supportedAuth),\n                maxAllowedSize: this._maxAllowedSize || false,\n                sendCommand: (cmd, done)=>{\n                    let promise;\n                    if (!done) {\n                        promise = new Promise((resolve, reject)=>{\n                            done = shared.callbackPromise(resolve, reject);\n                        });\n                    }\n                    this._responseActions.push((str)=>{\n                        lastResponse = str;\n                        let codes = str.match(/^(\\d+)(?:\\s(\\d+\\.\\d+\\.\\d+))?\\s/);\n                        let data = {\n                            command: cmd,\n                            response: str\n                        };\n                        if (codes) {\n                            data.status = Number(codes[1]) || 0;\n                            if (codes[2]) {\n                                data.code = codes[2];\n                            }\n                            data.text = str.substr(codes[0].length);\n                        } else {\n                            data.text = str;\n                            data.status = 0; // just in case we need to perform numeric comparisons\n                        }\n                        done(null, data);\n                    });\n                    setImmediate(()=>this._sendCommand(cmd));\n                    return promise;\n                },\n                resolve,\n                reject\n            });\n            if (handlerResponse && typeof handlerResponse.catch === \"function\") {\n                // a promise was returned\n                handlerResponse.then(resolve).catch(reject);\n            }\n            return;\n        }\n        switch(this._authMethod){\n            case \"XOAUTH2\":\n                this._handleXOauth2Token(false, callback);\n                return;\n            case \"LOGIN\":\n                this._responseActions.push((str)=>{\n                    this._actionAUTH_LOGIN_USER(str, callback);\n                });\n                this._sendCommand(\"AUTH LOGIN\");\n                return;\n            case \"PLAIN\":\n                this._responseActions.push((str)=>{\n                    this._actionAUTHComplete(str, callback);\n                });\n                this._sendCommand(\"AUTH PLAIN \" + Buffer.from(//this._auth.user+'\\u0000'+\n                \"\\x00\" + // skip authorization identity as it causes problems with some servers\n                this._auth.credentials.user + \"\\x00\" + this._auth.credentials.pass, \"utf-8\").toString(\"base64\"), // log entry without passwords\n                \"AUTH PLAIN \" + Buffer.from(//this._auth.user+'\\u0000'+\n                \"\\x00\" + // skip authorization identity as it causes problems with some servers\n                this._auth.credentials.user + \"\\x00\" + \"/* secret */\", \"utf-8\").toString(\"base64\"));\n                return;\n            case \"CRAM-MD5\":\n                this._responseActions.push((str)=>{\n                    this._actionAUTH_CRAM_MD5(str, callback);\n                });\n                this._sendCommand(\"AUTH CRAM-MD5\");\n                return;\n        }\n        return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', \"EAUTH\", false, \"API\"));\n    }\n    /**\n     * Sends a message\n     *\n     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n     * @param {Object} message String, Buffer or a Stream\n     * @param {Function} callback Callback to return once sending is completed\n     */ send(envelope, message, done) {\n        if (!message) {\n            return done(this._formatError(\"Empty message\", \"EMESSAGE\", false, \"API\"));\n        }\n        const isDestroyedMessage = this._isDestroyedMessage(\"send message\");\n        if (isDestroyedMessage) {\n            return done(this._formatError(isDestroyedMessage, \"ECONNECTION\", false, \"API\"));\n        }\n        // reject larger messages than allowed\n        if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n            return setImmediate(()=>{\n                done(this._formatError(\"Message size larger than allowed \" + this._maxAllowedSize, \"EMESSAGE\", false, \"MAIL FROM\"));\n            });\n        }\n        // ensure that callback is only called once\n        let returned = false;\n        let callback = function() {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            done(...arguments);\n        };\n        if (typeof message.on === \"function\") {\n            message.on(\"error\", (err)=>callback(this._formatError(err, \"ESTREAM\", false, \"API\")));\n        }\n        let startTime = Date.now();\n        this._setEnvelope(envelope, (err, info)=>{\n            if (err) {\n                return callback(err);\n            }\n            let envelopeTime = Date.now();\n            let stream = this._createSendStream((err, str)=>{\n                if (err) {\n                    return callback(err);\n                }\n                info.envelopeTime = envelopeTime - startTime;\n                info.messageTime = Date.now() - envelopeTime;\n                info.messageSize = stream.outByteCount;\n                info.response = str;\n                return callback(null, info);\n            });\n            if (typeof message.pipe === \"function\") {\n                message.pipe(stream);\n            } else {\n                stream.write(message);\n                stream.end();\n            }\n        });\n    }\n    /**\n     * Resets connection state\n     *\n     * @param {Function} callback Callback to return once connection is reset\n     */ reset(callback) {\n        this._sendCommand(\"RSET\");\n        this._responseActions.push((str)=>{\n            if (str.charAt(0) !== \"2\") {\n                return callback(this._formatError(\"Could not reset session state. response=\" + str, \"EPROTOCOL\", str, \"RSET\"));\n            }\n            this._envelope = false;\n            return callback(null, true);\n        });\n    }\n    /**\n     * Connection listener that is run when the connection to\n     * the server is opened\n     *\n     * @event\n     */ _onConnect() {\n        clearTimeout(this._connectionTimeout);\n        this.logger.info({\n            tnx: \"network\",\n            localAddress: this._socket.localAddress,\n            localPort: this._socket.localPort,\n            remoteAddress: this._socket.remoteAddress,\n            remotePort: this._socket.remotePort\n        }, \"%s established to %s:%s\", this.secure ? \"Secure connection\" : \"Connection\", this._socket.remoteAddress, this._socket.remotePort);\n        if (this._destroyed) {\n            // Connection was established after we already had canceled it\n            this.close();\n            return;\n        }\n        this.stage = \"connected\";\n        // clear existing listeners for the socket\n        this._socket.removeListener(\"data\", this._onSocketData);\n        this._socket.removeListener(\"timeout\", this._onSocketTimeout);\n        this._socket.removeListener(\"close\", this._onSocketClose);\n        this._socket.removeListener(\"end\", this._onSocketEnd);\n        this._socket.on(\"data\", this._onSocketData);\n        this._socket.once(\"close\", this._onSocketClose);\n        this._socket.once(\"end\", this._onSocketEnd);\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n        this._socket.on(\"timeout\", this._onSocketTimeout);\n        this._greetingTimeout = setTimeout(()=>{\n            // if still waiting for greeting, give up\n            if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {\n                this._onError(\"Greeting never received\", \"ETIMEDOUT\", false, \"CONN\");\n            }\n        }, this.options.greetingTimeout || GREETING_TIMEOUT);\n        this._responseActions.push(this._actionGreeting);\n        // we have a 'data' listener set up so resume socket if it was paused\n        this._socket.resume();\n    }\n    /**\n     * 'data' listener for data coming from the server\n     *\n     * @event\n     * @param {Buffer} chunk Data chunk coming from the server\n     */ _onData(chunk) {\n        if (this._destroyed || !chunk || !chunk.length) {\n            return;\n        }\n        let data = (chunk || \"\").toString(\"binary\");\n        let lines = (this._remainder + data).split(/\\r?\\n/);\n        let lastline;\n        this._remainder = lines.pop();\n        for(let i = 0, len = lines.length; i < len; i++){\n            if (this._responseQueue.length) {\n                lastline = this._responseQueue[this._responseQueue.length - 1];\n                if (/^\\d+-/.test(lastline.split(\"\\n\").pop())) {\n                    this._responseQueue[this._responseQueue.length - 1] += \"\\n\" + lines[i];\n                    continue;\n                }\n            }\n            this._responseQueue.push(lines[i]);\n        }\n        if (this._responseQueue.length) {\n            lastline = this._responseQueue[this._responseQueue.length - 1];\n            if (/^\\d+-/.test(lastline.split(\"\\n\").pop())) {\n                return;\n            }\n        }\n        this._processResponse();\n    }\n    /**\n     * 'error' listener for the socket\n     *\n     * @event\n     * @param {Error} err Error object\n     * @param {String} type Error name\n     */ _onError(err, type, data, command) {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n        if (this._destroyed) {\n            // just ignore, already closed\n            // this might happen when a socket is canceled because of reached timeout\n            // but the socket timeout error itself receives only after\n            return;\n        }\n        err = this._formatError(err, type, data, command);\n        this.logger.error(data, err.message);\n        this.emit(\"error\", err);\n        this.close();\n    }\n    _formatError(message, type, response, command) {\n        let err;\n        if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n            err = message;\n        } else {\n            err = new Error(message);\n        }\n        if (type && type !== \"Error\") {\n            err.code = type;\n        }\n        if (response) {\n            err.response = response;\n            err.message += \": \" + response;\n        }\n        let responseCode = typeof response === \"string\" && Number((response.match(/^\\d+/) || [])[0]) || false;\n        if (responseCode) {\n            err.responseCode = responseCode;\n        }\n        if (command) {\n            err.command = command;\n        }\n        return err;\n    }\n    /**\n     * 'close' listener for the socket\n     *\n     * @event\n     */ _onClose() {\n        let serverResponse = false;\n        if (this._remainder && this._remainder.trim()) {\n            if (this.options.debug || this.options.transactionLog) {\n                this.logger.debug({\n                    tnx: \"server\"\n                }, this._remainder.replace(/\\r?\\n$/, \"\"));\n            }\n            this.lastServerResponse = serverResponse = this._remainder.trim();\n        }\n        this.logger.info({\n            tnx: \"network\"\n        }, \"Connection closed\");\n        if (this.upgrading && !this._destroyed) {\n            return this._onError(new Error(\"Connection closed unexpectedly\"), \"ETLS\", serverResponse, \"CONN\");\n        } else if (![\n            this._actionGreeting,\n            this.close\n        ].includes(this._responseActions[0]) && !this._destroyed) {\n            return this._onError(new Error(\"Connection closed unexpectedly\"), \"ECONNECTION\", serverResponse, \"CONN\");\n        } else if (/^[45]\\d{2}\\b/.test(serverResponse)) {\n            return this._onError(new Error(\"Connection closed unexpectedly\"), \"ECONNECTION\", serverResponse, \"CONN\");\n        }\n        this._destroy();\n    }\n    /**\n     * 'end' listener for the socket\n     *\n     * @event\n     */ _onEnd() {\n        if (this._socket && !this._socket.destroyed) {\n            this._socket.destroy();\n        }\n    }\n    /**\n     * 'timeout' listener for the socket\n     *\n     * @event\n     */ _onTimeout() {\n        return this._onError(new Error(\"Timeout\"), \"ETIMEDOUT\", false, \"CONN\");\n    }\n    /**\n     * Destroys the client, emits 'end'\n     */ _destroy() {\n        if (this._destroyed) {\n            return;\n        }\n        this._destroyed = true;\n        this.emit(\"end\");\n    }\n    /**\n     * Upgrades the connection to TLS\n     *\n     * @param {Function} callback Callback function to run when the connection\n     *        has been secured\n     */ _upgradeConnection(callback) {\n        // do not remove all listeners or it breaks node v0.10 as there's\n        // apparently a 'finish' event set that would be cleared as well\n        // we can safely keep 'error', 'end', 'close' etc. events\n        this._socket.removeListener(\"data\", this._onSocketData); // incoming data is going to be gibberish from this point onwards\n        this._socket.removeListener(\"timeout\", this._onSocketTimeout); // timeout will be re-set for the new socket object\n        let socketPlain = this._socket;\n        let opts = {\n            socket: this._socket,\n            host: this.host\n        };\n        Object.keys(this.options.tls || {}).forEach((key)=>{\n            opts[key] = this.options.tls[key];\n        });\n        this.upgrading = true;\n        // tls.connect is not an asynchronous function however it may still throw errors and requires to be wrapped with try/catch\n        try {\n            this._socket = tls.connect(opts, ()=>{\n                this.secure = true;\n                this.upgrading = false;\n                this._socket.on(\"data\", this._onSocketData);\n                socketPlain.removeListener(\"close\", this._onSocketClose);\n                socketPlain.removeListener(\"end\", this._onSocketEnd);\n                return callback(null, true);\n            });\n        } catch (err) {\n            return callback(err);\n        }\n        this._socket.on(\"error\", this._onSocketError);\n        this._socket.once(\"close\", this._onSocketClose);\n        this._socket.once(\"end\", this._onSocketEnd);\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n        this._socket.on(\"timeout\", this._onSocketTimeout);\n        // resume in case the socket was paused\n        socketPlain.resume();\n    }\n    /**\n     * Processes queued responses from the server\n     *\n     * @param {Boolean} force If true, ignores _processing flag\n     */ _processResponse() {\n        if (!this._responseQueue.length) {\n            return false;\n        }\n        let str = this.lastServerResponse = (this._responseQueue.shift() || \"\").toString();\n        if (/^\\d+-/.test(str.split(\"\\n\").pop())) {\n            // keep waiting for the final part of multiline response\n            return;\n        }\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug({\n                tnx: \"server\"\n            }, str.replace(/\\r?\\n$/, \"\"));\n        }\n        if (!str.trim()) {\n            // skip unexpected empty lines\n            setImmediate(()=>this._processResponse());\n        }\n        let action = this._responseActions.shift();\n        if (typeof action === \"function\") {\n            action.call(this, str);\n            setImmediate(()=>this._processResponse());\n        } else {\n            return this._onError(new Error(\"Unexpected Response\"), \"EPROTOCOL\", str, \"CONN\");\n        }\n    }\n    /**\n     * Send a command to the server, append \\r\\n\n     *\n     * @param {String} str String to be sent to the server\n     * @param {String} logStr Optional string to be used for logging instead of the actual string\n     */ _sendCommand(str, logStr) {\n        if (this._destroyed) {\n            // Connection already closed, can't send any more data\n            return;\n        }\n        if (this._socket.destroyed) {\n            return this.close();\n        }\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug({\n                tnx: \"client\"\n            }, (logStr || str || \"\").toString().replace(/\\r?\\n$/, \"\"));\n        }\n        this._socket.write(Buffer.from(str + \"\\r\\n\", \"utf-8\"));\n    }\n    /**\n     * Initiates a new message by submitting envelope data, starting with\n     * MAIL FROM: command\n     *\n     * @param {Object} envelope Envelope object in the form of\n     *        {from:'...', to:['...']}\n     *        or\n     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n     */ _setEnvelope(envelope, callback) {\n        let args = [];\n        let useSmtpUtf8 = false;\n        this._envelope = envelope || {};\n        this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || \"\").toString().trim();\n        this._envelope.to = [].concat(this._envelope.to || []).map((to)=>(to && to.address || to || \"\").toString().trim());\n        if (!this._envelope.to.length) {\n            return callback(this._formatError(\"No recipients defined\", \"EENVELOPE\", false, \"API\"));\n        }\n        if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n            return callback(this._formatError(\"Invalid sender \" + JSON.stringify(this._envelope.from), \"EENVELOPE\", false, \"API\"));\n        }\n        // check if the sender address uses only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n            useSmtpUtf8 = true;\n        }\n        for(let i = 0, len = this._envelope.to.length; i < len; i++){\n            if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n                return callback(this._formatError(\"Invalid recipient \" + JSON.stringify(this._envelope.to[i]), \"EENVELOPE\", false, \"API\"));\n            }\n            // check if the recipients addresses use only ASCII characters,\n            // otherwise require usage of SMTPUTF8 extension\n            if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n                useSmtpUtf8 = true;\n            }\n        }\n        // clone the recipients array for latter manipulation\n        this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n        this._envelope.rejected = [];\n        this._envelope.rejectedErrors = [];\n        this._envelope.accepted = [];\n        if (this._envelope.dsn) {\n            try {\n                this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n            } catch (err) {\n                return callback(this._formatError(\"Invalid DSN \" + err.message, \"EENVELOPE\", false, \"API\"));\n            }\n        }\n        this._responseActions.push((str)=>{\n            this._actionMAIL(str, callback);\n        });\n        // If the server supports SMTPUTF8 and the envelope includes an internationalized\n        // email address then append SMTPUTF8 keyword to the MAIL FROM command\n        if (useSmtpUtf8 && this._supportedExtensions.includes(\"SMTPUTF8\")) {\n            args.push(\"SMTPUTF8\");\n            this._usingSmtpUtf8 = true;\n        }\n        // If the server supports 8BITMIME and the message might contain non-ascii bytes\n        // then append the 8BITMIME keyword to the MAIL FROM command\n        if (this._envelope.use8BitMime && this._supportedExtensions.includes(\"8BITMIME\")) {\n            args.push(\"BODY=8BITMIME\");\n            this._using8BitMime = true;\n        }\n        if (this._envelope.size && this._supportedExtensions.includes(\"SIZE\")) {\n            args.push(\"SIZE=\" + this._envelope.size);\n        }\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the MAIL FROM command\n        if (this._envelope.dsn && this._supportedExtensions.includes(\"DSN\")) {\n            if (this._envelope.dsn.ret) {\n                args.push(\"RET=\" + shared.encodeXText(this._envelope.dsn.ret));\n            }\n            if (this._envelope.dsn.envid) {\n                args.push(\"ENVID=\" + shared.encodeXText(this._envelope.dsn.envid));\n            }\n        }\n        this._sendCommand(\"MAIL FROM:<\" + this._envelope.from + \">\" + (args.length ? \" \" + args.join(\" \") : \"\"));\n    }\n    _setDsnEnvelope(params) {\n        let ret = (params.ret || params.return || \"\").toString().toUpperCase() || null;\n        if (ret) {\n            switch(ret){\n                case \"HDRS\":\n                case \"HEADERS\":\n                    ret = \"HDRS\";\n                    break;\n                case \"FULL\":\n                case \"BODY\":\n                    ret = \"FULL\";\n                    break;\n            }\n        }\n        if (ret && ![\n            \"FULL\",\n            \"HDRS\"\n        ].includes(ret)) {\n            throw new Error(\"ret: \" + JSON.stringify(ret));\n        }\n        let envid = (params.envid || params.id || \"\").toString() || null;\n        let notify = params.notify || null;\n        if (notify) {\n            if (typeof notify === \"string\") {\n                notify = notify.split(\",\");\n            }\n            notify = notify.map((n)=>n.trim().toUpperCase());\n            let validNotify = [\n                \"NEVER\",\n                \"SUCCESS\",\n                \"FAILURE\",\n                \"DELAY\"\n            ];\n            let invaliNotify = notify.filter((n)=>!validNotify.includes(n));\n            if (invaliNotify.length || notify.length > 1 && notify.includes(\"NEVER\")) {\n                throw new Error(\"notify: \" + JSON.stringify(notify.join(\",\")));\n            }\n            notify = notify.join(\",\");\n        }\n        let orcpt = (params.recipient || params.orcpt || \"\").toString() || null;\n        if (orcpt && orcpt.indexOf(\";\") < 0) {\n            orcpt = \"rfc822;\" + orcpt;\n        }\n        return {\n            ret,\n            envid,\n            notify,\n            orcpt\n        };\n    }\n    _getDsnRcptToArgs() {\n        let args = [];\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the RCPT TO command\n        if (this._envelope.dsn && this._supportedExtensions.includes(\"DSN\")) {\n            if (this._envelope.dsn.notify) {\n                args.push(\"NOTIFY=\" + shared.encodeXText(this._envelope.dsn.notify));\n            }\n            if (this._envelope.dsn.orcpt) {\n                args.push(\"ORCPT=\" + shared.encodeXText(this._envelope.dsn.orcpt));\n            }\n        }\n        return args.length ? \" \" + args.join(\" \") : \"\";\n    }\n    _createSendStream(callback) {\n        let dataStream = new DataStream();\n        let logStream;\n        if (this.options.lmtp) {\n            this._envelope.accepted.forEach((recipient, i)=>{\n                let final = i === this._envelope.accepted.length - 1;\n                this._responseActions.push((str)=>{\n                    this._actionLMTPStream(recipient, final, str, callback);\n                });\n            });\n        } else {\n            this._responseActions.push((str)=>{\n                this._actionSMTPStream(str, callback);\n            });\n        }\n        dataStream.pipe(this._socket, {\n            end: false\n        });\n        if (this.options.debug) {\n            logStream = new PassThrough();\n            logStream.on(\"readable\", ()=>{\n                let chunk;\n                while(chunk = logStream.read()){\n                    this.logger.debug({\n                        tnx: \"message\"\n                    }, chunk.toString(\"binary\").replace(/\\r?\\n$/, \"\"));\n                }\n            });\n            dataStream.pipe(logStream);\n        }\n        dataStream.once(\"end\", ()=>{\n            this.logger.info({\n                tnx: \"message\",\n                inByteCount: dataStream.inByteCount,\n                outByteCount: dataStream.outByteCount\n            }, \"<%s bytes encoded mime message (source size %s bytes)>\", dataStream.outByteCount, dataStream.inByteCount);\n        });\n        return dataStream;\n    }\n    /** ACTIONS **/ /**\n     * Will be run after the connection is created and the server sends\n     * a greeting. If the incoming message starts with 220 initiate\n     * SMTP session by sending EHLO command\n     *\n     * @param {String} str Message from the server\n     */ _actionGreeting(str) {\n        clearTimeout(this._greetingTimeout);\n        if (str.substr(0, 3) !== \"220\") {\n            this._onError(new Error(\"Invalid greeting. response=\" + str), \"EPROTOCOL\", str, \"CONN\");\n            return;\n        }\n        if (this.options.lmtp) {\n            this._responseActions.push(this._actionLHLO);\n            this._sendCommand(\"LHLO \" + this.name);\n        } else {\n            this._responseActions.push(this._actionEHLO);\n            this._sendCommand(\"EHLO \" + this.name);\n        }\n    }\n    /**\n     * Handles server response for LHLO command. If it yielded in\n     * error, emit 'error', otherwise treat this as an EHLO response\n     *\n     * @param {String} str Message from the server\n     */ _actionLHLO(str) {\n        if (str.charAt(0) !== \"2\") {\n            this._onError(new Error(\"Invalid LHLO. response=\" + str), \"EPROTOCOL\", str, \"LHLO\");\n            return;\n        }\n        this._actionEHLO(str);\n    }\n    /**\n     * Handles server response for EHLO command. If it yielded in\n     * error, try HELO instead, otherwise initiate TLS negotiation\n     * if STARTTLS is supported by the server or move into the\n     * authentication phase.\n     *\n     * @param {String} str Message from the server\n     */ _actionEHLO(str) {\n        let match;\n        if (str.substr(0, 3) === \"421\") {\n            this._onError(new Error(\"Server terminates connection. response=\" + str), \"ECONNECTION\", str, \"EHLO\");\n            return;\n        }\n        if (str.charAt(0) !== \"2\") {\n            if (this.options.requireTLS) {\n                this._onError(new Error(\"EHLO failed but HELO does not support required STARTTLS. response=\" + str), \"ECONNECTION\", str, \"EHLO\");\n                return;\n            }\n            // Try HELO instead\n            this._responseActions.push(this._actionHELO);\n            this._sendCommand(\"HELO \" + this.name);\n            return;\n        }\n        this._ehloLines = str.split(/\\r?\\n/).map((line)=>line.replace(/^\\d+[ -]/, \"\").trim()).filter((line)=>line).slice(1);\n        // Detect if the server supports STARTTLS\n        if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\\b/im.test(str) || this.options.requireTLS)) {\n            this._sendCommand(\"STARTTLS\");\n            this._responseActions.push(this._actionSTARTTLS);\n            return;\n        }\n        // Detect if the server supports SMTPUTF8\n        if (/[ -]SMTPUTF8\\b/im.test(str)) {\n            this._supportedExtensions.push(\"SMTPUTF8\");\n        }\n        // Detect if the server supports DSN\n        if (/[ -]DSN\\b/im.test(str)) {\n            this._supportedExtensions.push(\"DSN\");\n        }\n        // Detect if the server supports 8BITMIME\n        if (/[ -]8BITMIME\\b/im.test(str)) {\n            this._supportedExtensions.push(\"8BITMIME\");\n        }\n        // Detect if the server supports PIPELINING\n        if (/[ -]PIPELINING\\b/im.test(str)) {\n            this._supportedExtensions.push(\"PIPELINING\");\n        }\n        // Detect if the server supports AUTH\n        if (/[ -]AUTH\\b/i.test(str)) {\n            this.allowsAuth = true;\n        }\n        // Detect if the server supports PLAIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n            this._supportedAuth.push(\"PLAIN\");\n        }\n        // Detect if the server supports LOGIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n            this._supportedAuth.push(\"LOGIN\");\n        }\n        // Detect if the server supports CRAM-MD5 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n            this._supportedAuth.push(\"CRAM-MD5\");\n        }\n        // Detect if the server supports XOAUTH2 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n            this._supportedAuth.push(\"XOAUTH2\");\n        }\n        // Detect if the server supports SIZE extensions (and the max allowed size)\n        if (match = str.match(/[ -]SIZE(?:[ \\t]+(\\d+))?/im)) {\n            this._supportedExtensions.push(\"SIZE\");\n            this._maxAllowedSize = Number(match[1]) || 0;\n        }\n        this.emit(\"connect\");\n    }\n    /**\n     * Handles server response for HELO command. If it yielded in\n     * error, emit 'error', otherwise move into the authentication phase.\n     *\n     * @param {String} str Message from the server\n     */ _actionHELO(str) {\n        if (str.charAt(0) !== \"2\") {\n            this._onError(new Error(\"Invalid HELO. response=\" + str), \"EPROTOCOL\", str, \"HELO\");\n            return;\n        }\n        // assume that authentication is enabled (most probably is not though)\n        this.allowsAuth = true;\n        this.emit(\"connect\");\n    }\n    /**\n     * Handles server response for STARTTLS command. If there's an error\n     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n     * succeedes restart the EHLO\n     *\n     * @param {String} str Message from the server\n     */ _actionSTARTTLS(str) {\n        if (str.charAt(0) !== \"2\") {\n            if (this.options.opportunisticTLS) {\n                this.logger.info({\n                    tnx: \"smtp\"\n                }, \"Failed STARTTLS upgrade, continuing unencrypted\");\n                return this.emit(\"connect\");\n            }\n            this._onError(new Error(\"Error upgrading connection with STARTTLS\"), \"ETLS\", str, \"STARTTLS\");\n            return;\n        }\n        this._upgradeConnection((err, secured)=>{\n            if (err) {\n                this._onError(new Error(\"Error initiating TLS - \" + (err.message || err)), \"ETLS\", false, \"STARTTLS\");\n                return;\n            }\n            this.logger.info({\n                tnx: \"smtp\"\n            }, \"Connection upgraded with STARTTLS\");\n            if (secured) {\n                // restart session\n                if (this.options.lmtp) {\n                    this._responseActions.push(this._actionLHLO);\n                    this._sendCommand(\"LHLO \" + this.name);\n                } else {\n                    this._responseActions.push(this._actionEHLO);\n                    this._sendCommand(\"EHLO \" + this.name);\n                }\n            } else {\n                this.emit(\"connect\");\n            }\n        });\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n     * response needs to be base64 encoded username. We do not need\n     * exact match but settle with 334 response in general as some\n     * hosts invalidly use a longer message than VXNlcm5hbWU6\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_LOGIN_USER(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 VXNlcm5hbWU6'\n            callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', \"EAUTH\", str, \"AUTH LOGIN\"));\n            return;\n        }\n        this._responseActions.push((str)=>{\n            this._actionAUTH_LOGIN_PASS(str, callback);\n        });\n        this._sendCommand(Buffer.from(this._auth.credentials.user + \"\", \"utf-8\").toString(\"base64\"));\n    }\n    /**\n     * Handle the response for AUTH CRAM-MD5 command. We are expecting\n     * '334 <challenge string>'. Data to be sent as response needs to be\n     * base64 decoded challenge string, MD5 hashed using the password as\n     * a HMAC key, prefixed by the username and a space, and finally all\n     * base64 encoded again.\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_CRAM_MD5(str, callback) {\n        let challengeMatch = str.match(/^334\\s+(.+)$/);\n        let challengeString = \"\";\n        if (!challengeMatch) {\n            return callback(this._formatError(\"Invalid login sequence while waiting for server challenge string\", \"EAUTH\", str, \"AUTH CRAM-MD5\"));\n        } else {\n            challengeString = challengeMatch[1];\n        }\n        // Decode from base64\n        let base64decoded = Buffer.from(challengeString, \"base64\").toString(\"ascii\"), hmacMD5 = crypto.createHmac(\"md5\", this._auth.credentials.pass);\n        hmacMD5.update(base64decoded);\n        let prepended = this._auth.credentials.user + \" \" + hmacMD5.digest(\"hex\");\n        this._responseActions.push((str)=>{\n            this._actionAUTH_CRAM_MD5_PASS(str, callback);\n        });\n        this._sendCommand(Buffer.from(prepended).toString(\"base64\"), // hidden hash for logs\n        Buffer.from(this._auth.credentials.user + \" /* secret */\").toString(\"base64\"));\n    }\n    /**\n     * Handles the response to CRAM-MD5 authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_CRAM_MD5_PASS(str, callback) {\n        if (!str.match(/^235\\s+/)) {\n            return callback(this._formatError('Invalid login sequence while waiting for \"235\"', \"EAUTH\", str, \"AUTH CRAM-MD5\"));\n        }\n        this.logger.info({\n            tnx: \"smtp\",\n            username: this._auth.user,\n            action: \"authenticated\",\n            method: this._authMethod\n        }, \"User %s authenticated\", JSON.stringify(this._auth.user));\n        this.authenticated = true;\n        callback(null, true);\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n     * response needs to be base64 encoded password.\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_LOGIN_PASS(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 UGFzc3dvcmQ6'\n            return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', \"EAUTH\", str, \"AUTH LOGIN\"));\n        }\n        this._responseActions.push((str)=>{\n            this._actionAUTHComplete(str, callback);\n        });\n        this._sendCommand(Buffer.from((this._auth.credentials.pass || \"\").toString(), \"utf-8\").toString(\"base64\"), // Hidden pass for logs\n        Buffer.from(\"/* secret */\", \"utf-8\").toString(\"base64\"));\n    }\n    /**\n     * Handles the response for authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTHComplete(str, isRetry, callback) {\n        if (!callback && typeof isRetry === \"function\") {\n            callback = isRetry;\n            isRetry = false;\n        }\n        if (str.substr(0, 3) === \"334\") {\n            this._responseActions.push((str)=>{\n                if (isRetry || this._authMethod !== \"XOAUTH2\") {\n                    this._actionAUTHComplete(str, true, callback);\n                } else {\n                    // fetch a new OAuth2 access token\n                    setImmediate(()=>this._handleXOauth2Token(true, callback));\n                }\n            });\n            this._sendCommand(\"\");\n            return;\n        }\n        if (str.charAt(0) !== \"2\") {\n            this.logger.info({\n                tnx: \"smtp\",\n                username: this._auth.user,\n                action: \"authfail\",\n                method: this._authMethod\n            }, \"User %s failed to authenticate\", JSON.stringify(this._auth.user));\n            return callback(this._formatError(\"Invalid login\", \"EAUTH\", str, \"AUTH \" + this._authMethod));\n        }\n        this.logger.info({\n            tnx: \"smtp\",\n            username: this._auth.user,\n            action: \"authenticated\",\n            method: this._authMethod\n        }, \"User %s authenticated\", JSON.stringify(this._auth.user));\n        this.authenticated = true;\n        callback(null, true);\n    }\n    /**\n     * Handle response for a MAIL FROM: command\n     *\n     * @param {String} str Message from the server\n     */ _actionMAIL(str, callback) {\n        let message, curRecipient;\n        if (Number(str.charAt(0)) !== 2) {\n            if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n                message = \"Internationalized mailbox name not allowed\";\n            } else {\n                message = \"Mail command failed\";\n            }\n            return callback(this._formatError(message, \"EENVELOPE\", str, \"MAIL FROM\"));\n        }\n        if (!this._envelope.rcptQueue.length) {\n            return callback(this._formatError(\"Can't send mail - no recipients defined\", \"EENVELOPE\", false, \"API\"));\n        } else {\n            this._recipientQueue = [];\n            if (this._supportedExtensions.includes(\"PIPELINING\")) {\n                while(this._envelope.rcptQueue.length){\n                    curRecipient = this._envelope.rcptQueue.shift();\n                    this._recipientQueue.push(curRecipient);\n                    this._responseActions.push((str)=>{\n                        this._actionRCPT(str, callback);\n                    });\n                    this._sendCommand(\"RCPT TO:<\" + curRecipient + \">\" + this._getDsnRcptToArgs());\n                }\n            } else {\n                curRecipient = this._envelope.rcptQueue.shift();\n                this._recipientQueue.push(curRecipient);\n                this._responseActions.push((str)=>{\n                    this._actionRCPT(str, callback);\n                });\n                this._sendCommand(\"RCPT TO:<\" + curRecipient + \">\" + this._getDsnRcptToArgs());\n            }\n        }\n    }\n    /**\n     * Handle response for a RCPT TO: command\n     *\n     * @param {String} str Message from the server\n     */ _actionRCPT(str, callback) {\n        let message, err, curRecipient = this._recipientQueue.shift();\n        if (Number(str.charAt(0)) !== 2) {\n            // this is a soft error\n            if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n                message = \"Internationalized mailbox name not allowed\";\n            } else {\n                message = \"Recipient command failed\";\n            }\n            this._envelope.rejected.push(curRecipient);\n            // store error for the failed recipient\n            err = this._formatError(message, \"EENVELOPE\", str, \"RCPT TO\");\n            err.recipient = curRecipient;\n            this._envelope.rejectedErrors.push(err);\n        } else {\n            this._envelope.accepted.push(curRecipient);\n        }\n        if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n            if (this._envelope.rejected.length < this._envelope.to.length) {\n                this._responseActions.push((str)=>{\n                    this._actionDATA(str, callback);\n                });\n                this._sendCommand(\"DATA\");\n            } else {\n                err = this._formatError(\"Can't send mail - all recipients were rejected\", \"EENVELOPE\", str, \"RCPT TO\");\n                err.rejected = this._envelope.rejected;\n                err.rejectedErrors = this._envelope.rejectedErrors;\n                return callback(err);\n            }\n        } else if (this._envelope.rcptQueue.length) {\n            curRecipient = this._envelope.rcptQueue.shift();\n            this._recipientQueue.push(curRecipient);\n            this._responseActions.push((str)=>{\n                this._actionRCPT(str, callback);\n            });\n            this._sendCommand(\"RCPT TO:<\" + curRecipient + \">\" + this._getDsnRcptToArgs());\n        }\n    }\n    /**\n     * Handle response for a DATA command\n     *\n     * @param {String} str Message from the server\n     */ _actionDATA(str, callback) {\n        // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n        // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n        if (!/^[23]/.test(str)) {\n            return callback(this._formatError(\"Data command failed\", \"EENVELOPE\", str, \"DATA\"));\n        }\n        let response = {\n            accepted: this._envelope.accepted,\n            rejected: this._envelope.rejected\n        };\n        if (this._ehloLines && this._ehloLines.length) {\n            response.ehlo = this._ehloLines;\n        }\n        if (this._envelope.rejectedErrors.length) {\n            response.rejectedErrors = this._envelope.rejectedErrors;\n        }\n        callback(null, response);\n    }\n    /**\n     * Handle response for a DATA stream when using SMTP\n     * We expect a single response that defines if the sending succeeded or failed\n     *\n     * @param {String} str Message from the server\n     */ _actionSMTPStream(str, callback) {\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            return callback(this._formatError(\"Message failed\", \"EMESSAGE\", str, \"DATA\"));\n        } else {\n            // Message sent succesfully\n            return callback(null, str);\n        }\n    }\n    /**\n     * Handle response for a DATA stream\n     * We expect a separate response for every recipient. All recipients can either\n     * succeed or fail separately\n     *\n     * @param {String} recipient The recipient this response applies to\n     * @param {Boolean} final Is this the final recipient?\n     * @param {String} str Message from the server\n     */ _actionLMTPStream(recipient, final, str, callback) {\n        let err;\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            err = this._formatError(\"Message failed for recipient \" + recipient, \"EMESSAGE\", str, \"DATA\");\n            err.recipient = recipient;\n            this._envelope.rejected.push(recipient);\n            this._envelope.rejectedErrors.push(err);\n            for(let i = 0, len = this._envelope.accepted.length; i < len; i++){\n                if (this._envelope.accepted[i] === recipient) {\n                    this._envelope.accepted.splice(i, 1);\n                }\n            }\n        }\n        if (final) {\n            return callback(null, str);\n        }\n    }\n    _handleXOauth2Token(isRetry, callback) {\n        this._auth.oauth2.getToken(isRetry, (err, accessToken)=>{\n            if (err) {\n                this.logger.info({\n                    tnx: \"smtp\",\n                    username: this._auth.user,\n                    action: \"authfail\",\n                    method: this._authMethod\n                }, \"User %s failed to authenticate\", JSON.stringify(this._auth.user));\n                return callback(this._formatError(err, \"EAUTH\", false, \"AUTH XOAUTH2\"));\n            }\n            this._responseActions.push((str)=>{\n                this._actionAUTHComplete(str, isRetry, callback);\n            });\n            this._sendCommand(\"AUTH XOAUTH2 \" + this._auth.oauth2.buildXOAuth2Token(accessToken), //  Hidden for logs\n            \"AUTH XOAUTH2 \" + this._auth.oauth2.buildXOAuth2Token(\"/* secret */\"));\n        });\n    }\n    /**\n     *\n     * @param {string} command\n     * @private\n     */ _isDestroyedMessage(command) {\n        if (this._destroyed) {\n            return \"Cannot \" + command + \" - smtp connection is already destroyed.\";\n        }\n        if (this._socket) {\n            if (this._socket.destroyed) {\n                return \"Cannot \" + command + \" - smtp connection socket is already destroyed.\";\n            }\n            if (!this._socket.writable) {\n                return \"Cannot \" + command + \" - smtp connection socket is already half-closed.\";\n            }\n        }\n    }\n    _getHostname() {\n        // defaul hostname is machine hostname or [IP]\n        let defaultHostname;\n        try {\n            defaultHostname = os.hostname() || \"\";\n        } catch (err) {\n            // fails on windows 7\n            defaultHostname = \"localhost\";\n        }\n        // ignore if not FQDN\n        if (!defaultHostname || defaultHostname.indexOf(\".\") < 0) {\n            defaultHostname = \"[127.0.0.1]\";\n        }\n        // IP should be enclosed in []\n        if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n            defaultHostname = \"[\" + defaultHostname + \"]\";\n        }\n        return defaultHostname;\n    }\n}\nmodule.exports = SMTPConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js":
/*!********************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-pool/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst PoolResource = __webpack_require__(/*! ./pool-resource */ \"(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js\");\nconst SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nconst wellKnown = __webpack_require__(/*! ../well-known */ \"(rsc)/./node_modules/nodemailer/lib/well-known/index.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */ class SMTPPool extends EventEmitter {\n    constructor(options){\n        super();\n        options = options || {};\n        if (typeof options === \"string\") {\n            options = {\n                url: options\n            };\n        }\n        let urlData;\n        let service = options.service;\n        if (typeof options.getSocket === \"function\") {\n            this.getSocket = options.getSocket;\n        }\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n        this.options = shared.assign(false, options, urlData, service && wellKnown(service) // wellknown options\n        );\n        this.options.maxConnections = this.options.maxConnections || 5;\n        this.options.maxMessages = this.options.maxMessages || 100;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"smtp-pool\"\n        });\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n        this.name = \"SMTP (pool)\";\n        this.version = packageData.version + \"[client:\" + connection.version + \"]\";\n        this._rateLimit = {\n            counter: 0,\n            timeout: null,\n            waiting: [],\n            checkpoint: false,\n            delta: Number(this.options.rateDelta) || 1000,\n            limit: Number(this.options.rateLimit) || 0\n        };\n        this._closed = false;\n        this._queue = [];\n        this._connections = [];\n        this._connectionCounter = 0;\n        this.idling = true;\n        setImmediate(()=>{\n            if (this.idling) {\n                this.emit(\"idle\");\n            }\n        });\n    }\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */ getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(()=>callback(null, false));\n    }\n    /**\n     * Queues an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */ send(mail, callback) {\n        if (this._closed) {\n            return false;\n        }\n        this._queue.push({\n            mail,\n            requeueAttempts: 0,\n            callback\n        });\n        if (this.idling && this._queue.length >= this.options.maxConnections) {\n            this.idling = false;\n        }\n        setImmediate(()=>this._processMessages());\n        return true;\n    }\n    /**\n     * Closes all connections in the pool. If there is a message being sent, the connection\n     * is closed later\n     */ close() {\n        let connection;\n        let len = this._connections.length;\n        this._closed = true;\n        // clear rate limit timer if it exists\n        clearTimeout(this._rateLimit.timeout);\n        if (!len && !this._queue.length) {\n            return;\n        }\n        // remove all available connections\n        for(let i = len - 1; i >= 0; i--){\n            if (this._connections[i] && this._connections[i].available) {\n                connection = this._connections[i];\n                connection.close();\n                this.logger.info({\n                    tnx: \"connection\",\n                    cid: connection.id,\n                    action: \"removed\"\n                }, \"Connection #%s removed\", connection.id);\n            }\n        }\n        if (len && !this._connections.length) {\n            this.logger.debug({\n                tnx: \"connection\"\n            }, \"All connections removed\");\n        }\n        if (!this._queue.length) {\n            return;\n        }\n        // make sure that entire queue would be cleaned\n        let invokeCallbacks = ()=>{\n            if (!this._queue.length) {\n                this.logger.debug({\n                    tnx: \"connection\"\n                }, \"Pending queue entries cleared\");\n                return;\n            }\n            let entry = this._queue.shift();\n            if (entry && typeof entry.callback === \"function\") {\n                try {\n                    entry.callback(new Error(\"Connection pool was closed\"));\n                } catch (E) {\n                    this.logger.error({\n                        err: E,\n                        tnx: \"callback\",\n                        cid: connection.id\n                    }, \"Callback error for #%s: %s\", connection.id, E.message);\n                }\n            }\n            setImmediate(invokeCallbacks);\n        };\n        setImmediate(invokeCallbacks);\n    }\n    /**\n     * Check the queue and available connections. If there is a message to be sent and there is\n     * an available connection, then use this connection to send the mail\n     */ _processMessages() {\n        let connection;\n        let i, len;\n        // do nothing if already closed\n        if (this._closed) {\n            return;\n        }\n        // do nothing if queue is empty\n        if (!this._queue.length) {\n            if (!this.idling) {\n                // no pending jobs\n                this.idling = true;\n                this.emit(\"idle\");\n            }\n            return;\n        }\n        // find first available connection\n        for(i = 0, len = this._connections.length; i < len; i++){\n            if (this._connections[i].available) {\n                connection = this._connections[i];\n                break;\n            }\n        }\n        if (!connection && this._connections.length < this.options.maxConnections) {\n            connection = this._createConnection();\n        }\n        if (!connection) {\n            // no more free connection slots available\n            this.idling = false;\n            return;\n        }\n        // check if there is free space in the processing queue\n        if (!this.idling && this._queue.length < this.options.maxConnections) {\n            this.idling = true;\n            this.emit(\"idle\");\n        }\n        let entry = connection.queueEntry = this._queue.shift();\n        entry.messageId = (connection.queueEntry.mail.message.getHeader(\"message-id\") || \"\").replace(/[<>\\s]/g, \"\");\n        connection.available = false;\n        this.logger.debug({\n            tnx: \"pool\",\n            cid: connection.id,\n            messageId: entry.messageId,\n            action: \"assign\"\n        }, \"Assigned message <%s> to #%s (%s)\", entry.messageId, connection.id, connection.messages + 1);\n        if (this._rateLimit.limit) {\n            this._rateLimit.counter++;\n            if (!this._rateLimit.checkpoint) {\n                this._rateLimit.checkpoint = Date.now();\n            }\n        }\n        connection.send(entry.mail, (err, info)=>{\n            // only process callback if current handler is not changed\n            if (entry === connection.queueEntry) {\n                try {\n                    entry.callback(err, info);\n                } catch (E) {\n                    this.logger.error({\n                        err: E,\n                        tnx: \"callback\",\n                        cid: connection.id\n                    }, \"Callback error for #%s: %s\", connection.id, E.message);\n                }\n                connection.queueEntry = false;\n            }\n        });\n    }\n    /**\n     * Creates a new pool resource\n     */ _createConnection() {\n        let connection = new PoolResource(this);\n        connection.id = ++this._connectionCounter;\n        this.logger.info({\n            tnx: \"pool\",\n            cid: connection.id,\n            action: \"conection\"\n        }, \"Created new pool resource #%s\", connection.id);\n        // resource comes available\n        connection.on(\"available\", ()=>{\n            this.logger.debug({\n                tnx: \"connection\",\n                cid: connection.id,\n                action: \"available\"\n            }, \"Connection #%s became available\", connection.id);\n            if (this._closed) {\n                // if already closed run close() that will remove this connections from connections list\n                this.close();\n            } else {\n                // check if there's anything else to send\n                this._processMessages();\n            }\n        });\n        // resource is terminated with an error\n        connection.once(\"error\", (err)=>{\n            if (err.code !== \"EMAXLIMIT\") {\n                this.logger.error({\n                    err,\n                    tnx: \"pool\",\n                    cid: connection.id\n                }, \"Pool Error for #%s: %s\", connection.id, err.message);\n            } else {\n                this.logger.debug({\n                    tnx: \"pool\",\n                    cid: connection.id,\n                    action: \"maxlimit\"\n                }, \"Max messages limit exchausted for #%s\", connection.id);\n            }\n            if (connection.queueEntry) {\n                try {\n                    connection.queueEntry.callback(err);\n                } catch (E) {\n                    this.logger.error({\n                        err: E,\n                        tnx: \"callback\",\n                        cid: connection.id\n                    }, \"Callback error for #%s: %s\", connection.id, E.message);\n                }\n                connection.queueEntry = false;\n            }\n            // remove the erroneus connection from connections list\n            this._removeConnection(connection);\n            this._continueProcessing();\n        });\n        connection.once(\"close\", ()=>{\n            this.logger.info({\n                tnx: \"connection\",\n                cid: connection.id,\n                action: \"closed\"\n            }, \"Connection #%s was closed\", connection.id);\n            this._removeConnection(connection);\n            if (connection.queueEntry) {\n                // If the connection closed when sending, add the message to the queue again\n                // if max number of requeues is not reached yet\n                // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n                // in the next event loop\n                setTimeout(()=>{\n                    if (connection.queueEntry) {\n                        if (this._shouldRequeuOnConnectionClose(connection.queueEntry)) {\n                            this._requeueEntryOnConnectionClose(connection);\n                        } else {\n                            this._failDeliveryOnConnectionClose(connection);\n                        }\n                    }\n                    this._continueProcessing();\n                }, 50);\n            } else {\n                this._continueProcessing();\n            }\n        });\n        this._connections.push(connection);\n        return connection;\n    }\n    _shouldRequeuOnConnectionClose(queueEntry) {\n        if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {\n            return true;\n        }\n        return queueEntry.requeueAttempts < this.options.maxRequeues;\n    }\n    _failDeliveryOnConnectionClose(connection) {\n        if (connection.queueEntry && connection.queueEntry.callback) {\n            try {\n                connection.queueEntry.callback(new Error(\"Reached maximum number of retries after connection was closed\"));\n            } catch (E) {\n                this.logger.error({\n                    err: E,\n                    tnx: \"callback\",\n                    messageId: connection.queueEntry.messageId,\n                    cid: connection.id\n                }, \"Callback error for #%s: %s\", connection.id, E.message);\n            }\n            connection.queueEntry = false;\n        }\n    }\n    _requeueEntryOnConnectionClose(connection) {\n        connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;\n        this.logger.debug({\n            tnx: \"pool\",\n            cid: connection.id,\n            messageId: connection.queueEntry.messageId,\n            action: \"requeue\"\n        }, \"Re-queued message <%s> for #%s. Attempt: #%s\", connection.queueEntry.messageId, connection.id, connection.queueEntry.requeueAttempts);\n        this._queue.unshift(connection.queueEntry);\n        connection.queueEntry = false;\n    }\n    /**\n     * Continue to process message if the pool hasn't closed\n     */ _continueProcessing() {\n        if (this._closed) {\n            this.close();\n        } else {\n            setTimeout(()=>this._processMessages(), 100);\n        }\n    }\n    /**\n     * Remove resource from pool\n     *\n     * @param {Object} connection The PoolResource to remove\n     */ _removeConnection(connection) {\n        let index = this._connections.indexOf(connection);\n        if (index !== -1) {\n            this._connections.splice(index, 1);\n        }\n    }\n    /**\n     * Checks if connections have hit current rate limit and if so, queues the availability callback\n     *\n     * @param {Function} callback Callback function to run once rate limiter has been cleared\n     */ _checkRateLimit(callback) {\n        if (!this._rateLimit.limit) {\n            return callback();\n        }\n        let now = Date.now();\n        if (this._rateLimit.counter < this._rateLimit.limit) {\n            return callback();\n        }\n        this._rateLimit.waiting.push(callback);\n        if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n            return this._clearRateLimit();\n        } else if (!this._rateLimit.timeout) {\n            this._rateLimit.timeout = setTimeout(()=>this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n            this._rateLimit.checkpoint = now;\n        }\n    }\n    /**\n     * Clears current rate limit limitation and runs paused callback\n     */ _clearRateLimit() {\n        clearTimeout(this._rateLimit.timeout);\n        this._rateLimit.timeout = null;\n        this._rateLimit.counter = 0;\n        this._rateLimit.checkpoint = false;\n        // resume all paused connections\n        while(this._rateLimit.waiting.length){\n            let cb = this._rateLimit.waiting.shift();\n            setImmediate(cb);\n        }\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */ isIdle() {\n        return this.idling;\n    }\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */ verify(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        let auth = new PoolResource(this).auth;\n        this.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            let connection = new SMTPConnection(options);\n            let returned = false;\n            connection.once(\"error\", (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n            connection.once(\"end\", ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error(\"Connection closed\"));\n            });\n            let finalize = ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n            connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n                        finalize();\n                    });\n                } else if (!auth && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error(\"Authentication info was not provided\");\n                    err.code = \"NoAuth\";\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n        return promise;\n    }\n}\n// expose to the world\nmodule.exports = SMTPPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvc210cC1wb29sL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsZUFBZUMsbUJBQU9BLENBQUM7QUFDN0IsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUM7QUFDN0IsTUFBTUUsaUJBQWlCRixtQkFBT0EsQ0FBQztBQUMvQixNQUFNRyxZQUFZSCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNSSxTQUFTSixtQkFBT0EsQ0FBQztBQUN2QixNQUFNSyxjQUFjTCxtQkFBT0EsQ0FBQztBQUU1Qjs7Ozs7Q0FLQyxHQUNELE1BQU1NLGlCQUFpQlA7SUFDbkJRLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLO1FBRUxBLFVBQVVBLFdBQVcsQ0FBQztRQUN0QixJQUFJLE9BQU9BLFlBQVksVUFBVTtZQUM3QkEsVUFBVTtnQkFDTkMsS0FBS0Q7WUFDVDtRQUNKO1FBRUEsSUFBSUU7UUFDSixJQUFJQyxVQUFVSCxRQUFRRyxPQUFPO1FBRTdCLElBQUksT0FBT0gsUUFBUUksU0FBUyxLQUFLLFlBQVk7WUFDekMsSUFBSSxDQUFDQSxTQUFTLEdBQUdKLFFBQVFJLFNBQVM7UUFDdEM7UUFFQSxJQUFJSixRQUFRQyxHQUFHLEVBQUU7WUFDYkMsVUFBVU4sT0FBT1Msa0JBQWtCLENBQUNMLFFBQVFDLEdBQUc7WUFDL0NFLFVBQVVBLFdBQVdELFFBQVFDLE9BQU87UUFDeEM7UUFFQSxJQUFJLENBQUNILE9BQU8sR0FBR0osT0FBT1UsTUFBTSxDQUN4QixPQUNBTixTQUNBRSxTQUNBQyxXQUFXUixVQUFVUSxTQUFTLG9CQUFvQjs7UUFHdEQsSUFBSSxDQUFDSCxPQUFPLENBQUNPLGNBQWMsR0FBRyxJQUFJLENBQUNQLE9BQU8sQ0FBQ08sY0FBYyxJQUFJO1FBQzdELElBQUksQ0FBQ1AsT0FBTyxDQUFDUSxXQUFXLEdBQUcsSUFBSSxDQUFDUixPQUFPLENBQUNRLFdBQVcsSUFBSTtRQUV2RCxJQUFJLENBQUNDLE1B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LE1BQU0sSUFBSUgsTUFBTTtvQkFDcEJHLElBQUlZLElBQUksR0FBRztvQkFFWG1DLFdBQVc7b0JBQ1gzRixXQUFXMkIsS0FBSztvQkFDaEIsT0FBT1AsU0FBU3dCO2dCQUNwQixPQUFPO29CQUNIZ0Q7Z0JBQ0o7WUFDSjtRQUNKO1FBRUEsT0FBT2xCO0lBQ1g7QUFDSjtBQUVBLHNCQUFzQjtBQUN0QndCLE9BQU9DLE9BQU8sR0FBR2pIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL3NtdHAtcG9vbC9pbmRleC5qcz80OGQ1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBQb29sUmVzb3VyY2UgPSByZXF1aXJlKCcuL3Bvb2wtcmVzb3VyY2UnKTtcbmNvbnN0IFNNVFBDb25uZWN0aW9uID0gcmVxdWlyZSgnLi4vc210cC1jb25uZWN0aW9uJyk7XG5jb25zdCB3ZWxsS25vd24gPSByZXF1aXJlKCcuLi93ZWxsLWtub3duJyk7XG5jb25zdCBzaGFyZWQgPSByZXF1aXJlKCcuLi9zaGFyZWQnKTtcbmNvbnN0IHBhY2thZ2VEYXRhID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIFNNVFAgcG9vbCB0cmFuc3BvcnQgb2JqZWN0IGZvciBOb2RlbWFpbGVyXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBTTVRQIENvbm5lY3Rpb24gb3B0aW9uc1xuICovXG5jbGFzcyBTTVRQUG9vbCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHVybDogb3B0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB1cmxEYXRhO1xuICAgICAgICBsZXQgc2VydmljZSA9IG9wdGlvbnMuc2VydmljZTtcblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZ2V0U29ja2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLmdldFNvY2tldCA9IG9wdGlvbnMuZ2V0U29ja2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudXJsKSB7XG4gICAgICAgICAgICB1cmxEYXRhID0gc2hhcmVkLnBhcnNlQ29ubmVjdGlvblVybChvcHRpb25zLnVybCk7XG4gICAgICAgICAgICBzZXJ2aWNlID0gc2VydmljZSB8fCB1cmxEYXRhLnNlcnZpY2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBzaGFyZWQuYXNzaWduKFxuICAgICAgICAgICAgZmFsc2UsIC8vIGNyZWF0ZSBuZXcgb2JqZWN0XG4gICAgICAgICAgICBvcHRpb25zLCAvLyByZWd1bGFyIG9wdGlvbnNcbiAgICAgICAgICAgIHVybERhdGEsIC8vIHVybCBvcHRpb25zXG4gICAgICAgICAgICBzZXJ2aWNlICYmIHdlbGxLbm93bihzZXJ2aWNlKSAvLyB3ZWxsa25vd24gb3B0aW9uc1xuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXhDb25uZWN0aW9ucyA9IHRoaXMub3B0aW9ucy5tYXhDb25uZWN0aW9ucyB8fCA1O1xuICAgICAgICB0aGlzLm9wdGlvbnMubWF4TWVzc2FnZXMgPSB0aGlzLm9wdGlvbnMubWF4TWVzc2FnZXMgfHwgMTAwO1xuXG4gICAgICAgIHRoaXMubG9nZ2VyID0gc2hhcmVkLmdldExvZ2dlcih0aGlzLm9wdGlvbnMsIHtcbiAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcy5vcHRpb25zLmNvbXBvbmVudCB8fCAnc210cC1wb29sJ1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyB0ZW1wb3Jhcnkgb2JqZWN0XG4gICAgICAgIGxldCBjb25uZWN0aW9uID0gbmV3IFNNVFBDb25uZWN0aW9uKHRoaXMub3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1NNVFAgKHBvb2wpJztcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gcGFja2FnZURhdGEudmVyc2lvbiArICdbY2xpZW50OicgKyBjb25uZWN0aW9uLnZlcnNpb24gKyAnXSc7XG5cbiAgICAgICAgdGhpcy5fcmF0ZUxpbWl0ID0ge1xuICAgICAgICAgICAgY291bnRlcjogMCxcbiAgICAgICAgICAgIHRpbWVvdXQ6IG51bGwsXG4gICAgICAgICAgICB3YWl0aW5nOiBbXSxcbiAgICAgICAgICAgIGNoZWNrcG9pbnQ6IGZhbHNlLFxuICAgICAgICAgICAgZGVsdGE6IE51bWJlcih0aGlzLm9wdGlvbnMucmF0ZURlbHRhKSB8fCAxMDAwLFxuICAgICAgICAgICAgbGltaXQ6IE51bWJlcih0aGlzLm9wdGlvbnMucmF0ZUxpbWl0KSB8fCAwXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgICAgICB0aGlzLl9jb25uZWN0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLl9jb25uZWN0aW9uQ291bnRlciA9IDA7XG5cbiAgICAgICAgdGhpcy5pZGxpbmcgPSB0cnVlO1xuXG4gICAgICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pZGxpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2lkbGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGxhY2Vob2xkZXIgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIHByb3h5IHNvY2tldHMuIFRoaXMgbWV0aG9kIGltbWVkaWF0ZWxseSByZXR1cm5zXG4gICAgICogd2l0aG91dCBhIHNvY2tldFxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQ29ubmVjdGlvbiBvcHRpb25zXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcnVuIHdpdGggdGhlIHNvY2tldCBrZXlzXG4gICAgICovXG4gICAgZ2V0U29ja2V0KG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIHJldHVybiBpbW1lZGlhdGVsbHlcbiAgICAgICAgcmV0dXJuIHNldEltbWVkaWF0ZSgoKSA9PiBjYWxsYmFjayhudWxsLCBmYWxzZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFF1ZXVlcyBhbiBlLW1haWwgdG8gYmUgc2VudCB1c2luZyB0aGUgc2VsZWN0ZWQgc2V0dGluZ3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYWlsIE1haWwgb2JqZWN0XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBzZW5kKG1haWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgICAgbWFpbCxcbiAgICAgICAgICAgIHJlcXVldWVBdHRlbXB0czogMCxcbiAgICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmlkbGluZyAmJiB0aGlzLl9xdWV1ZS5sZW5ndGggPj0gdGhpcy5vcHRpb25zLm1heENvbm5lY3Rpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmlkbGluZyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHRoaXMuX3Byb2Nlc3NNZXNzYWdlcygpKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZXMgYWxsIGNvbm5lY3Rpb25zIGluIHRoZSBwb29sLiBJZiB0aGVyZSBpcyBhIG1lc3NhZ2UgYmVpbmcgc2VudCwgdGhlIGNvbm5lY3Rpb25cbiAgICAgKiBpcyBjbG9zZWQgbGF0ZXJcbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgbGV0IGNvbm5lY3Rpb247XG4gICAgICAgIGxldCBsZW4gPSB0aGlzLl9jb25uZWN0aW9ucy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX2Nsb3NlZCA9IHRydWU7XG5cbiAgICAgICAgLy8gY2xlYXIgcmF0ZSBsaW1pdCB0aW1lciBpZiBpdCBleGlzdHNcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3JhdGVMaW1pdC50aW1lb3V0KTtcblxuICAgICAgICBpZiAoIWxlbiAmJiAhdGhpcy5fcXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZW1vdmUgYWxsIGF2YWlsYWJsZSBjb25uZWN0aW9uc1xuICAgICAgICBmb3IgKGxldCBpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb25uZWN0aW9uc1tpXSAmJiB0aGlzLl9jb25uZWN0aW9uc1tpXS5hdmFpbGFibGUpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRueDogJ2Nvbm5lY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lkOiBjb25uZWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAncmVtb3ZlZCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ0Nvbm5lY3Rpb24gIyVzIHJlbW92ZWQnLFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmlkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZW4gJiYgIXRoaXMuX2Nvbm5lY3Rpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0bng6ICdjb25uZWN0aW9uJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ0FsbCBjb25uZWN0aW9ucyByZW1vdmVkJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fcXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCBlbnRpcmUgcXVldWUgd291bGQgYmUgY2xlYW5lZFxuICAgICAgICBsZXQgaW52b2tlQ2FsbGJhY2tzID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9xdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG54OiAnY29ubmVjdGlvbidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ1BlbmRpbmcgcXVldWUgZW50cmllcyBjbGVhcmVkJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy5fcXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChlbnRyeSAmJiB0eXBlb2YgZW50cnkuY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBlbnRyeS5jYWxsYmFjayhuZXcgRXJyb3IoJ0Nvbm5lY3Rpb24gcG9vbCB3YXMgY2xvc2VkJykpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyOiBFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRueDogJ2NhbGxiYWNrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaWQ6IGNvbm5lY3Rpb24uaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ2FsbGJhY2sgZXJyb3IgZm9yICMlczogJXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEUubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldEltbWVkaWF0ZShpbnZva2VDYWxsYmFja3MpO1xuICAgICAgICB9O1xuICAgICAgICBzZXRJbW1lZGlhdGUoaW52b2tlQ2FsbGJhY2tzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgcXVldWUgYW5kIGF2YWlsYWJsZSBjb25uZWN0aW9ucy4gSWYgdGhlcmUgaXMgYSBtZXNzYWdlIHRvIGJlIHNlbnQgYW5kIHRoZXJlIGlzXG4gICAgICogYW4gYXZhaWxhYmxlIGNvbm5lY3Rpb24sIHRoZW4gdXNlIHRoaXMgY29ubmVjdGlvbiB0byBzZW5kIHRoZSBtYWlsXG4gICAgICovXG4gICAgX3Byb2Nlc3NNZXNzYWdlcygpIHtcbiAgICAgICAgbGV0IGNvbm5lY3Rpb247XG4gICAgICAgIGxldCBpLCBsZW47XG5cbiAgICAgICAgLy8gZG8gbm90aGluZyBpZiBhbHJlYWR5IGNsb3NlZFxuICAgICAgICBpZiAodGhpcy5fY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkbyBub3RoaW5nIGlmIHF1ZXVlIGlzIGVtcHR5XG4gICAgICAgIGlmICghdGhpcy5fcXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaWRsaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gcGVuZGluZyBqb2JzXG4gICAgICAgICAgICAgICAgdGhpcy5pZGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaWRsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmluZCBmaXJzdCBhdmFpbGFibGUgY29ubmVjdGlvblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSB0aGlzLl9jb25uZWN0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3Rpb25zW2ldLmF2YWlsYWJsZSkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24gPSB0aGlzLl9jb25uZWN0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29ubmVjdGlvbiAmJiB0aGlzLl9jb25uZWN0aW9ucy5sZW5ndGggPCB0aGlzLm9wdGlvbnMubWF4Q29ubmVjdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSB0aGlzLl9jcmVhdGVDb25uZWN0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIG5vIG1vcmUgZnJlZSBjb25uZWN0aW9uIHNsb3RzIGF2YWlsYWJsZVxuICAgICAgICAgICAgdGhpcy5pZGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGZyZWUgc3BhY2UgaW4gdGhlIHByb2Nlc3NpbmcgcXVldWVcbiAgICAgICAgaWYgKCF0aGlzLmlkbGluZyAmJiB0aGlzLl9xdWV1ZS5sZW5ndGggPCB0aGlzLm9wdGlvbnMubWF4Q29ubmVjdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuaWRsaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnaWRsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVudHJ5ID0gKGNvbm5lY3Rpb24ucXVldWVFbnRyeSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCkpO1xuICAgICAgICBlbnRyeS5tZXNzYWdlSWQgPSAoY29ubmVjdGlvbi5xdWV1ZUVudHJ5Lm1haWwubWVzc2FnZS5nZXRIZWFkZXIoJ21lc3NhZ2UtaWQnKSB8fCAnJykucmVwbGFjZSgvWzw+XFxzXS9nLCAnJyk7XG5cbiAgICAgICAgY29ubmVjdGlvbi5hdmFpbGFibGUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0bng6ICdwb29sJyxcbiAgICAgICAgICAgICAgICBjaWQ6IGNvbm5lY3Rpb24uaWQsXG4gICAgICAgICAgICAgICAgbWVzc2FnZUlkOiBlbnRyeS5tZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnYXNzaWduJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdBc3NpZ25lZCBtZXNzYWdlIDwlcz4gdG8gIyVzICglcyknLFxuICAgICAgICAgICAgZW50cnkubWVzc2FnZUlkLFxuICAgICAgICAgICAgY29ubmVjdGlvbi5pZCxcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ubWVzc2FnZXMgKyAxXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JhdGVMaW1pdC5saW1pdCkge1xuICAgICAgICAgICAgdGhpcy5fcmF0ZUxpbWl0LmNvdW50ZXIrKztcbiAgICAgICAgICAgIGlmICghdGhpcy5fcmF0ZUxpbWl0LmNoZWNrcG9pbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yYXRlTGltaXQuY2hlY2twb2ludCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25uZWN0aW9uLnNlbmQoZW50cnkubWFpbCwgKGVyciwgaW5mbykgPT4ge1xuICAgICAgICAgICAgLy8gb25seSBwcm9jZXNzIGNhbGxiYWNrIGlmIGN1cnJlbnQgaGFuZGxlciBpcyBub3QgY2hhbmdlZFxuICAgICAgICAgICAgaWYgKGVudHJ5ID09PSBjb25uZWN0aW9uLnF1ZXVlRW50cnkpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBlbnRyeS5jYWxsYmFjayhlcnIsIGluZm8pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyOiBFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRueDogJ2NhbGxiYWNrJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaWQ6IGNvbm5lY3Rpb24uaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ2FsbGJhY2sgZXJyb3IgZm9yICMlczogJXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEUubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnF1ZXVlRW50cnkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBwb29sIHJlc291cmNlXG4gICAgICovXG4gICAgX2NyZWF0ZUNvbm5lY3Rpb24oKSB7XG4gICAgICAgIGxldCBjb25uZWN0aW9uID0gbmV3IFBvb2xSZXNvdXJjZSh0aGlzKTtcblxuICAgICAgICBjb25uZWN0aW9uLmlkID0gKyt0aGlzLl9jb25uZWN0aW9uQ291bnRlcjtcblxuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRueDogJ3Bvb2wnLFxuICAgICAgICAgICAgICAgIGNpZDogY29ubmVjdGlvbi5pZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdjb25lY3Rpb24nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ0NyZWF0ZWQgbmV3IHBvb2wgcmVzb3VyY2UgIyVzJyxcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uaWRcbiAgICAgICAgKTtcblxuICAgICAgICAvLyByZXNvdXJjZSBjb21lcyBhdmFpbGFibGVcbiAgICAgICAgY29ubmVjdGlvbi5vbignYXZhaWxhYmxlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0bng6ICdjb25uZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgY2lkOiBjb25uZWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdhdmFpbGFibGUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnQ29ubmVjdGlvbiAjJXMgYmVjYW1lIGF2YWlsYWJsZScsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5pZFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb3NlZCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIGFscmVhZHkgY2xvc2VkIHJ1biBjbG9zZSgpIHRoYXQgd2lsbCByZW1vdmUgdGhpcyBjb25uZWN0aW9ucyBmcm9tIGNvbm5lY3Rpb25zIGxpc3RcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlJ3MgYW55dGhpbmcgZWxzZSB0byBzZW5kXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc01lc3NhZ2VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlc291cmNlIGlzIHRlcm1pbmF0ZWQgd2l0aCBhbiBlcnJvclxuICAgICAgICBjb25uZWN0aW9uLm9uY2UoJ2Vycm9yJywgZXJyID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIuY29kZSAhPT0gJ0VNQVhMSU1JVCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG54OiAncG9vbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaWQ6IGNvbm5lY3Rpb24uaWRcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ1Bvb2wgRXJyb3IgZm9yICMlczogJXMnLFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bng6ICdwb29sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpZDogY29ubmVjdGlvbi5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ21heGxpbWl0J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnTWF4IG1lc3NhZ2VzIGxpbWl0IGV4Y2hhdXN0ZWQgZm9yICMlcycsXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uaWRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5xdWV1ZUVudHJ5KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5xdWV1ZUVudHJ5LmNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoRSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnI6IEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG54OiAnY2FsbGJhY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpZDogY29ubmVjdGlvbi5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdDYWxsYmFjayBlcnJvciBmb3IgIyVzOiAlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgRS5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ucXVldWVFbnRyeSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGVycm9uZXVzIGNvbm5lY3Rpb24gZnJvbSBjb25uZWN0aW9ucyBsaXN0XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVDb25uZWN0aW9uKGNvbm5lY3Rpb24pO1xuXG4gICAgICAgICAgICB0aGlzLl9jb250aW51ZVByb2Nlc3NpbmcoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29ubmVjdGlvbi5vbmNlKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmluZm8oXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0bng6ICdjb25uZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgY2lkOiBjb25uZWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdjbG9zZWQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnQ29ubmVjdGlvbiAjJXMgd2FzIGNsb3NlZCcsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5pZFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQ29ubmVjdGlvbihjb25uZWN0aW9uKTtcblxuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24ucXVldWVFbnRyeSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjb25uZWN0aW9uIGNsb3NlZCB3aGVuIHNlbmRpbmcsIGFkZCB0aGUgbWVzc2FnZSB0byB0aGUgcXVldWUgYWdhaW5cbiAgICAgICAgICAgICAgICAvLyBpZiBtYXggbnVtYmVyIG9mIHJlcXVldWVzIGlzIG5vdCByZWFjaGVkIHlldFxuICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBtdXN0IHdhaXQgYSBiaXQuLiBiZWNhdXNlIHRoZSBjYWxsYmFjayBvZiB0aGUgJ2Vycm9yJyBoYW5kbGVyIG1pZ2h0IGJlIGNhbGxlZFxuICAgICAgICAgICAgICAgIC8vIGluIHRoZSBuZXh0IGV2ZW50IGxvb3BcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24ucXVldWVFbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Nob3VsZFJlcXVldU9uQ29ubmVjdGlvbkNsb3NlKGNvbm5lY3Rpb24ucXVldWVFbnRyeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXVlRW50cnlPbkNvbm5lY3Rpb25DbG9zZShjb25uZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmFpbERlbGl2ZXJ5T25Db25uZWN0aW9uQ2xvc2UoY29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGludWVQcm9jZXNzaW5nKCk7XG4gICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250aW51ZVByb2Nlc3NpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbnMucHVzaChjb25uZWN0aW9uKTtcblxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9XG5cbiAgICBfc2hvdWxkUmVxdWV1T25Db25uZWN0aW9uQ2xvc2UocXVldWVFbnRyeSkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1heFJlcXVldWVzID09PSB1bmRlZmluZWQgfHwgdGhpcy5vcHRpb25zLm1heFJlcXVldWVzIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcXVldWVFbnRyeS5yZXF1ZXVlQXR0ZW1wdHMgPCB0aGlzLm9wdGlvbnMubWF4UmVxdWV1ZXM7XG4gICAgfVxuXG4gICAgX2ZhaWxEZWxpdmVyeU9uQ29ubmVjdGlvbkNsb3NlKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgaWYgKGNvbm5lY3Rpb24ucXVldWVFbnRyeSAmJiBjb25uZWN0aW9uLnF1ZXVlRW50cnkuY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5xdWV1ZUVudHJ5LmNhbGxiYWNrKG5ldyBFcnJvcignUmVhY2hlZCBtYXhpbXVtIG51bWJlciBvZiByZXRyaWVzIGFmdGVyIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCcpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKEUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyOiBFLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG54OiAnY2FsbGJhY2snLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkOiBjb25uZWN0aW9uLnF1ZXVlRW50cnkubWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lkOiBjb25uZWN0aW9uLmlkXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdDYWxsYmFjayBlcnJvciBmb3IgIyVzOiAlcycsXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uaWQsXG4gICAgICAgICAgICAgICAgICAgIEUubWVzc2FnZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25uZWN0aW9uLnF1ZXVlRW50cnkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9yZXF1ZXVlRW50cnlPbkNvbm5lY3Rpb25DbG9zZShjb25uZWN0aW9uKSB7XG4gICAgICAgIGNvbm5lY3Rpb24ucXVldWVFbnRyeS5yZXF1ZXVlQXR0ZW1wdHMgPSBjb25uZWN0aW9uLnF1ZXVlRW50cnkucmVxdWV1ZUF0dGVtcHRzICsgMTtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG54OiAncG9vbCcsXG4gICAgICAgICAgICAgICAgY2lkOiBjb25uZWN0aW9uLmlkLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VJZDogY29ubmVjdGlvbi5xdWV1ZUVudHJ5Lm1lc3NhZ2VJZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdyZXF1ZXVlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdSZS1xdWV1ZWQgbWVzc2FnZSA8JXM+IGZvciAjJXMuIEF0dGVtcHQ6ICMlcycsXG4gICAgICAgICAgICBjb25uZWN0aW9uLnF1ZXVlRW50cnkubWVzc2FnZUlkLFxuICAgICAgICAgICAgY29ubmVjdGlvbi5pZCxcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ucXVldWVFbnRyeS5yZXF1ZXVlQXR0ZW1wdHNcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fcXVldWUudW5zaGlmdChjb25uZWN0aW9uLnF1ZXVlRW50cnkpO1xuICAgICAgICBjb25uZWN0aW9uLnF1ZXVlRW50cnkgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb250aW51ZSB0byBwcm9jZXNzIG1lc3NhZ2UgaWYgdGhlIHBvb2wgaGFzbid0IGNsb3NlZFxuICAgICAqL1xuICAgIF9jb250aW51ZVByb2Nlc3NpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fcHJvY2Vzc01lc3NhZ2VzKCksIDEwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgcmVzb3VyY2UgZnJvbSBwb29sXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29ubmVjdGlvbiBUaGUgUG9vbFJlc291cmNlIHRvIHJlbW92ZVxuICAgICAqL1xuICAgIF9yZW1vdmVDb25uZWN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5fY29ubmVjdGlvbnMuaW5kZXhPZihjb25uZWN0aW9uKTtcblxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGNvbm5lY3Rpb25zIGhhdmUgaGl0IGN1cnJlbnQgcmF0ZSBsaW1pdCBhbmQgaWYgc28sIHF1ZXVlcyB0aGUgYXZhaWxhYmlsaXR5IGNhbGxiYWNrXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbiB0byBydW4gb25jZSByYXRlIGxpbWl0ZXIgaGFzIGJlZW4gY2xlYXJlZFxuICAgICAqL1xuICAgIF9jaGVja1JhdGVMaW1pdChjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuX3JhdGVMaW1pdC5saW1pdCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgICAgICBpZiAodGhpcy5fcmF0ZUxpbWl0LmNvdW50ZXIgPCB0aGlzLl9yYXRlTGltaXQubGltaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmF0ZUxpbWl0LndhaXRpbmcucHVzaChjYWxsYmFjayk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JhdGVMaW1pdC5jaGVja3BvaW50IDw9IG5vdyAtIHRoaXMuX3JhdGVMaW1pdC5kZWx0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NsZWFyUmF0ZUxpbWl0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3JhdGVMaW1pdC50aW1lb3V0KSB7XG4gICAgICAgICAgICB0aGlzLl9yYXRlTGltaXQudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fY2xlYXJSYXRlTGltaXQoKSwgdGhpcy5fcmF0ZUxpbWl0LmRlbHRhIC0gKG5vdyAtIHRoaXMuX3JhdGVMaW1pdC5jaGVja3BvaW50KSk7XG4gICAgICAgICAgICB0aGlzLl9yYXRlTGltaXQuY2hlY2twb2ludCA9IG5vdztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFycyBjdXJyZW50IHJhdGUgbGltaXQgbGltaXRhdGlvbiBhbmQgcnVucyBwYXVzZWQgY2FsbGJhY2tcbiAgICAgKi9cbiAgICBfY2xlYXJSYXRlTGltaXQoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9yYXRlTGltaXQudGltZW91dCk7XG4gICAgICAgIHRoaXMuX3JhdGVMaW1pdC50aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmF0ZUxpbWl0LmNvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLl9yYXRlTGltaXQuY2hlY2twb2ludCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIHJlc3VtZSBhbGwgcGF1c2VkIGNvbm5lY3Rpb25zXG4gICAgICAgIHdoaWxlICh0aGlzLl9yYXRlTGltaXQud2FpdGluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBjYiA9IHRoaXMuX3JhdGVMaW1pdC53YWl0aW5nLnNoaWZ0KCk7XG4gICAgICAgICAgICBzZXRJbW1lZGlhdGUoY2IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGFyZSBmcmVlIHNsb3RzIGluIHRoZSBxdWV1ZVxuICAgICAqL1xuICAgIGlzSWRsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWRsaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIFNNVFAgY29uZmlndXJhdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICB2ZXJpZnkoY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHByb21pc2U7XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHNoYXJlZC5jYWxsYmFja1Byb21pc2UocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGF1dGggPSBuZXcgUG9vbFJlc291cmNlKHRoaXMpLmF1dGg7XG5cbiAgICAgICAgdGhpcy5nZXRTb2NrZXQodGhpcy5vcHRpb25zLCAoZXJyLCBzb2NrZXRPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgaWYgKHNvY2tldE9wdGlvbnMgJiYgc29ja2V0T3B0aW9ucy5jb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG54OiAncHJveHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlQWRkcmVzczogc29ja2V0T3B0aW9ucy5jb25uZWN0aW9uLnJlbW90ZUFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdGVQb3J0OiBzb2NrZXRPcHRpb25zLmNvbm5lY3Rpb24ucmVtb3RlUG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RIb3N0OiBvcHRpb25zLmhvc3QgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0UG9ydDogb3B0aW9ucy5wb3J0IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnY29ubmVjdGVkJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnVXNpbmcgcHJveGllZCBzb2NrZXQgZnJvbSAlczolcyB0byAlczolcycsXG4gICAgICAgICAgICAgICAgICAgIHNvY2tldE9wdGlvbnMuY29ubmVjdGlvbi5yZW1vdGVBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBzb2NrZXRPcHRpb25zLmNvbm5lY3Rpb24ucmVtb3RlUG9ydCxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5ob3N0IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnBvcnQgfHwgJydcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBzaGFyZWQuYXNzaWduKGZhbHNlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhzb2NrZXRPcHRpb25zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IHNvY2tldE9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGNvbm5lY3Rpb24gPSBuZXcgU01UUENvbm5lY3Rpb24ob3B0aW9ucyk7XG4gICAgICAgICAgICBsZXQgcmV0dXJuZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgY29ubmVjdGlvbi5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJldHVybmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25uZWN0aW9uLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmV0dXJuZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignQ29ubmVjdGlvbiBjbG9zZWQnKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGZpbmFsaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXR1cm5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnF1aXQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25uZWN0aW9uLmNvbm5lY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXR1cm5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGF1dGggJiYgKGNvbm5lY3Rpb24uYWxsb3dzQXV0aCB8fCBvcHRpb25zLmZvcmNlQXV0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5sb2dpbihhdXRoLCBlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHVybmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghYXV0aCAmJiBjb25uZWN0aW9uLmFsbG93c0F1dGggJiYgb3B0aW9ucy5mb3JjZUF1dGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVyciA9IG5ldyBFcnJvcignQXV0aGVudGljYXRpb24gaW5mbyB3YXMgbm90IHByb3ZpZGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGVyci5jb2RlID0gJ05vQXV0aCc7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsaXplKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbn1cblxuLy8gZXhwb3NlIHRvIHRoZSB3b3JsZFxubW9kdWxlLmV4cG9ydHMgPSBTTVRQUG9vbDtcbiJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJyZXF1aXJlIiwiUG9vbFJlc291cmNlIiwiU01UUENvbm5lY3Rpb24iLCJ3ZWxsS25vd24iLCJzaGFyZWQiLCJwYWNrYWdlRGF0YSIsIlNNVFBQb29sIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwidXJsIiwidXJsRGF0YSIsInNlcnZpY2UiLCJnZXRTb2NrZXQiLCJwYXJzZUNvbm5lY3Rpb25VcmwiLCJhc3NpZ24iLCJtYXhDb25uZWN0aW9ucyIsIm1heE1lc3NhZ2VzIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiY29tcG9uZW50IiwiY29ubmVjdGlvbiIsIm5hbWUiLCJ2ZXJzaW9uIiwiX3JhdGVMaW1pdCIsImNvdW50ZXIiLCJ0aW1lb3V0Iiwid2FpdGluZyIsImNoZWNrcG9pbnQiLCJkZWx0YSIsIk51bWJlciIsInJhdGVEZWx0YSIsImxpbWl0IiwicmF0ZUxpbWl0IiwiX2Nsb3NlZCIsIl9xdWV1ZSIsIl9jb25uZWN0aW9ucyIsIl9jb25uZWN0aW9uQ291bnRlciIsImlkbGluZyIsInNldEltbWVkaWF0ZSIsImVtaXQiLCJjYWxsYmFjayIsInNlbmQiLCJtYWlsIiwicHVzaCIsInJlcXVldWVBdHRlbXB0cyIsImxlbmd0aCIsIl9wcm9jZXNzTWVzc2FnZXMiLCJjbG9zZSIsImxlbiIsImNsZWFyVGltZW91dCIsImkiLCJhdmFpbGFibGUiLCJpbmZvIiwidG54IiwiY2lkIiwiaWQiLCJhY3Rpb24iLCJkZWJ1ZyIsImludm9rZUNhbGxiYWNrcyIsImVudHJ5Iiwic2hpZnQiLCJFcnJvciIsIkUiLCJlcnJvciIsImVyciIsIm1lc3NhZ2UiLCJfY3JlYXRlQ29ubmVjdGlvbiIsInF1ZXVlRW50cnkiLCJtZXNzYWdlSWQiLCJnZXRIZWFkZXIiLCJyZXBsYWNlIiwibWVzc2FnZXMiLCJEYXRlIiwibm93Iiwib24iLCJvbmNlIiwiY29kZSIsIl9yZW1vdmVDb25uZWN0aW9uIiwiX2NvbnRpbnVlUHJvY2Vzc2luZyIsInNldFRpbWVvdXQiLCJfc2hvdWxkUmVxdWV1T25Db25uZWN0aW9uQ2xvc2UiLCJfcmVxdWV1ZUVudHJ5T25Db25uZWN0aW9uQ2xvc2UiLCJfZmFpbERlbGl2ZXJ5T25Db25uZWN0aW9uQ2xvc2UiLCJtYXhSZXF1ZXVlcyIsInVuZGVmaW5lZCIsInVuc2hpZnQiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJfY2hlY2tSYXRlTGltaXQiLCJfY2xlYXJSYXRlTGltaXQiLCJjYiIsImlzSWRsZSIsInZlcmlmeSIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbGxiYWNrUHJvbWlzZSIsImF1dGgiLCJzb2NrZXRPcHRpb25zIiwicmVtb3RlQWRkcmVzcyIsInJlbW90ZVBvcnQiLCJkZXN0SG9zdCIsImhvc3QiLCJkZXN0UG9ydCIsInBvcnQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInJldHVybmVkIiwiZmluYWxpemUiLCJxdWl0IiwiY29ubmVjdCIsImFsbG93c0F1dGgiLCJmb3JjZUF1dGgiLCJsb2dpbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js":
/*!****************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-pool/pool-resource.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nconst assign = (__webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\").assign);\nconst XOAuth2 = __webpack_require__(/*! ../xoauth2 */ \"(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */ class PoolResource extends EventEmitter {\n    constructor(pool){\n        super();\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n        if (this.options.auth) {\n            switch((this.options.auth.type || \"\").toString().toUpperCase()){\n                case \"OAUTH2\":\n                    {\n                        let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                        oauth2.provisionCallback = this.pool.mailer && this.pool.mailer.get(\"oauth2_provision_cb\") || oauth2.provisionCallback;\n                        this.auth = {\n                            type: \"OAUTH2\",\n                            user: this.options.auth.user,\n                            oauth2,\n                            method: \"XOAUTH2\"\n                        };\n                        oauth2.on(\"token\", (token)=>this.pool.mailer.emit(\"token\", token));\n                        oauth2.on(\"error\", (err)=>this.emit(\"error\", err));\n                        break;\n                    }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || \"\").toString().toUpperCase() || \"LOGIN\",\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || \"\",\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || \"\").trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n        this._connection = false;\n        this._connected = false;\n        this.messages = 0;\n        this.available = true;\n    }\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */ connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            this.connection = new SMTPConnection(options);\n            this.connection.once(\"error\", (err)=>{\n                this.emit(\"error\", err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n            this.connection.once(\"end\", ()=>{\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                let timer = setTimeout(()=>{\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error(\"Unexpected socket close\");\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = \"ETLS\";\n                    }\n                    callback(err);\n                }, 1000);\n                try {\n                    timer.unref();\n                } catch (E) {\n                // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n            this.connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        if (err) {\n                            this.connection.close();\n                            this.emit(\"error\", err);\n                            return callback(err);\n                        }\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */ send(mail, callback) {\n        if (!this._connected) {\n            return this.connect((err)=>{\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId,\n            cid: this.id\n        }, \"Sending message %s using #%s to <%s>\", messageId, this.id, recipients.join(\", \"));\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info)=>{\n            this.messages++;\n            if (err) {\n                this.connection.close();\n                this.emit(\"error\", err);\n                return callback(err);\n            }\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n            setImmediate(()=>{\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error(\"Resource exhausted\");\n                    err.code = \"EMAXLIMIT\";\n                    this.connection.close();\n                    this.emit(\"error\", err);\n                } else {\n                    this.pool._checkRateLimit(()=>{\n                        this.available = true;\n                        this.emit(\"available\");\n                    });\n                }\n            });\n            callback(null, info);\n        });\n    }\n    /**\n     * Closes the connection\n     */ close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit(\"close\");\n    }\n}\nmodule.exports = PoolResource;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-transport/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nconst wellKnown = __webpack_require__(/*! ../well-known */ \"(rsc)/./node_modules/nodemailer/lib/well-known/index.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst XOAuth2 = __webpack_require__(/*! ../xoauth2 */ \"(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */ class SMTPTransport extends EventEmitter {\n    constructor(options){\n        super();\n        options = options || {};\n        if (typeof options === \"string\") {\n            options = {\n                url: options\n            };\n        }\n        let urlData;\n        let service = options.service;\n        if (typeof options.getSocket === \"function\") {\n            this.getSocket = options.getSocket;\n        }\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n        this.options = shared.assign(false, options, urlData, service && wellKnown(service) // wellknown options\n        );\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"smtp-transport\"\n        });\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n        this.name = \"SMTP\";\n        this.version = packageData.version + \"[client:\" + connection.version + \"]\";\n        if (this.options.auth) {\n            this.auth = this.getAuth({});\n        }\n    }\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */ getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(()=>callback(null, false));\n    }\n    getAuth(authOpts) {\n        if (!authOpts) {\n            return this.auth;\n        }\n        let hasAuth = false;\n        let authData = {};\n        if (this.options.auth && typeof this.options.auth === \"object\") {\n            Object.keys(this.options.auth).forEach((key)=>{\n                hasAuth = true;\n                authData[key] = this.options.auth[key];\n            });\n        }\n        if (authOpts && typeof authOpts === \"object\") {\n            Object.keys(authOpts).forEach((key)=>{\n                hasAuth = true;\n                authData[key] = authOpts[key];\n            });\n        }\n        if (!hasAuth) {\n            return false;\n        }\n        switch((authData.type || \"\").toString().toUpperCase()){\n            case \"OAUTH2\":\n                {\n                    if (!authData.service && !authData.user) {\n                        return false;\n                    }\n                    let oauth2 = new XOAuth2(authData, this.logger);\n                    oauth2.provisionCallback = this.mailer && this.mailer.get(\"oauth2_provision_cb\") || oauth2.provisionCallback;\n                    oauth2.on(\"token\", (token)=>this.mailer.emit(\"token\", token));\n                    oauth2.on(\"error\", (err)=>this.emit(\"error\", err));\n                    return {\n                        type: \"OAUTH2\",\n                        user: authData.user,\n                        oauth2,\n                        method: \"XOAUTH2\"\n                    };\n                }\n            default:\n                return {\n                    type: (authData.type || \"\").toString().toUpperCase() || \"LOGIN\",\n                    user: authData.user,\n                    credentials: {\n                        user: authData.user || \"\",\n                        pass: authData.pass,\n                        options: authData.options\n                    },\n                    method: (authData.method || \"\").trim().toUpperCase() || this.options.authMethod || false\n                };\n        }\n    }\n    /**\n     * Sends an e-mail using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */ send(mail, callback) {\n        this.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                // only copy options if we need to modify it\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            let connection = new SMTPConnection(options);\n            connection.once(\"error\", (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n            connection.once(\"end\", ()=>{\n                if (returned) {\n                    return;\n                }\n                let timer = setTimeout(()=>{\n                    if (returned) {\n                        return;\n                    }\n                    returned = true;\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error(\"Unexpected socket close\");\n                    if (connection && connection._socket && connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = \"ETLS\";\n                    }\n                    callback(err);\n                }, 1000);\n                try {\n                    timer.unref();\n                } catch (E) {\n                // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n            let sendMessage = ()=>{\n                let envelope = mail.message.getEnvelope();\n                let messageId = mail.message.messageId();\n                let recipients = [].concat(envelope.to || []);\n                if (recipients.length > 3) {\n                    recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n                }\n                if (mail.data.dsn) {\n                    envelope.dsn = mail.data.dsn;\n                }\n                this.logger.info({\n                    tnx: \"send\",\n                    messageId\n                }, \"Sending message %s to <%s>\", messageId, recipients.join(\", \"));\n                connection.send(envelope, mail.message.createReadStream(), (err, info)=>{\n                    returned = true;\n                    connection.close();\n                    if (err) {\n                        this.logger.error({\n                            err,\n                            tnx: \"send\"\n                        }, \"Send error for %s: %s\", messageId, err.message);\n                        return callback(err);\n                    }\n                    info.envelope = {\n                        from: envelope.from,\n                        to: envelope.to\n                    };\n                    info.messageId = messageId;\n                    try {\n                        return callback(null, info);\n                    } catch (E) {\n                        this.logger.error({\n                            err: E,\n                            tnx: \"callback\"\n                        }, \"Callback error for %s: %s\", messageId, E.message);\n                    }\n                });\n            };\n            connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                let auth = this.getAuth(mail.data.auth);\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, (err)=>{\n                        if (auth && auth !== this.auth && auth.oauth2) {\n                            auth.oauth2.removeAllListeners();\n                        }\n                        if (returned) {\n                            return;\n                        }\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n                        sendMessage();\n                    });\n                } else {\n                    sendMessage();\n                }\n            });\n        });\n    }\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */ verify(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        this.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            let connection = new SMTPConnection(options);\n            let returned = false;\n            connection.once(\"error\", (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n            connection.once(\"end\", ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error(\"Connection closed\"));\n            });\n            let finalize = ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n            connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                let authData = this.getAuth({});\n                if (authData && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(authData, (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n                        finalize();\n                    });\n                } else if (!authData && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error(\"Authentication info was not provided\");\n                    err.code = \"NoAuth\";\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n        return promise;\n    }\n    /**\n     * Releases resources\n     */ close() {\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        this.emit(\"close\");\n    }\n}\n// expose to the world\nmodule.exports = SMTPTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/nodemailer/lib/stream-transport/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */ class StreamTransport {\n    constructor(options){\n        options = options || {};\n        this.options = options || {};\n        this.name = \"StreamTransport\";\n        this.version = packageData.version;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"stream-transport\"\n        });\n        this.winbreak = [\n            \"win\",\n            \"windows\",\n            \"dos\",\n            \"\\r\\n\"\n        ].includes((options.newline || \"\").toString().toLowerCase());\n    }\n    /**\n     * Compiles a mailcomposer message and forwards it to handler that sends it\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, done) {\n        // We probably need this in the output\n        mail.message.keepBcc = true;\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId\n        }, \"Sending message %s to <%s> using %s line breaks\", messageId, recipients.join(\", \"), this.winbreak ? \"<CR><LF>\" : \"<LF>\");\n        setImmediate(()=>{\n            let stream;\n            try {\n                stream = mail.message.createReadStream();\n            } catch (E) {\n                this.logger.error({\n                    err: E,\n                    tnx: \"send\",\n                    messageId\n                }, \"Creating send stream failed for %s. %s\", messageId, E.message);\n                return done(E);\n            }\n            if (!this.options.buffer) {\n                stream.once(\"error\", (err)=>{\n                    this.logger.error({\n                        err,\n                        tnx: \"send\",\n                        messageId\n                    }, \"Failed creating message for %s. %s\", messageId, err.message);\n                });\n                return done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: stream\n                });\n            }\n            let chunks = [];\n            let chunklen = 0;\n            stream.on(\"readable\", ()=>{\n                let chunk;\n                while((chunk = stream.read()) !== null){\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n            stream.once(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"send\",\n                    messageId\n                }, \"Failed creating message for %s. %s\", messageId, err.message);\n                return done(err);\n            });\n            stream.on(\"end\", ()=>done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: Buffer.concat(chunks, chunklen)\n                }));\n        });\n    }\n}\nmodule.exports = StreamTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/well-known/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/nodemailer/lib/well-known/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst services = __webpack_require__(/*! ./services.json */ \"(rsc)/./node_modules/nodemailer/lib/well-known/services.json\");\nconst normalized = {};\nObject.keys(services).forEach((key)=>{\n    let service = services[key];\n    normalized[normalizeKey(key)] = normalizeService(service);\n    [].concat(service.aliases || []).forEach((alias)=>{\n        normalized[normalizeKey(alias)] = normalizeService(service);\n    });\n    [].concat(service.domains || []).forEach((domain)=>{\n        normalized[normalizeKey(domain)] = normalizeService(service);\n    });\n});\nfunction normalizeKey(key) {\n    return key.replace(/[^a-zA-Z0-9.-]/g, \"\").toLowerCase();\n}\nfunction normalizeService(service) {\n    let filter = [\n        \"domains\",\n        \"aliases\"\n    ];\n    let response = {};\n    Object.keys(service).forEach((key)=>{\n        if (filter.indexOf(key) < 0) {\n            response[key] = service[key];\n        }\n    });\n    return response;\n}\n/**\n * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or\n * an email address (like 'test@googlemail.com').\n *\n * @param {String} key [description]\n * @returns {Object} SMTP config or false if not found\n */ module.exports = function(key) {\n    key = normalizeKey(key.split(\"@\").pop());\n    return normalized[key] || false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvd2VsbC1rbm93bi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFdBQVdDLG1CQUFPQSxDQUFDO0FBQ3pCLE1BQU1DLGFBQWEsQ0FBQztBQUVwQkMsT0FBT0MsSUFBSSxDQUFDSixVQUFVSyxPQUFPLENBQUNDLENBQUFBO0lBQzFCLElBQUlDLFVBQVVQLFFBQVEsQ0FBQ00sSUFBSTtJQUUzQkosVUFBVSxDQUFDTSxhQUFhRixLQUFLLEdBQUdHLGlCQUFpQkY7SUFFakQsRUFBRSxDQUFDRyxNQUFNLENBQUNILFFBQVFJLE9BQU8sSUFBSSxFQUFFLEVBQUVOLE9BQU8sQ0FBQ08sQ0FBQUE7UUFDckNWLFVBQVUsQ0FBQ00sYUFBYUksT0FBTyxHQUFHSCxpQkFBaUJGO0lBQ3ZEO0lBRUEsRUFBRSxDQUFDRyxNQUFNLENBQUNILFFBQVFNLE9BQU8sSUFBSSxFQUFFLEVBQUVSLE9BQU8sQ0FBQ1MsQ0FBQUE7UUFDckNaLFVBQVUsQ0FBQ00sYUFBYU0sUUFBUSxHQUFHTCxpQkFBaUJGO0lBQ3hEO0FBQ0o7QUFFQSxTQUFTQyxhQUFhRixHQUFHO0lBQ3JCLE9BQU9BLElBQUlTLE9BQU8sQ0FBQyxtQkFBbUIsSUFBSUMsV0FBVztBQUN6RDtBQUVBLFNBQVNQLGlCQUFpQkYsT0FBTztJQUM3QixJQUFJVSxTQUFTO1FBQUM7UUFBVztLQUFVO0lBQ25DLElBQUlDLFdBQVcsQ0FBQztJQUVoQmYsT0FBT0MsSUFBSSxDQUFDRyxTQUFTRixPQUFPLENBQUNDLENBQUFBO1FBQ3pCLElBQUlXLE9BQU9FLE9BQU8sQ0FBQ2IsT0FBTyxHQUFHO1lBQ3pCWSxRQUFRLENBQUNaLElBQUksR0FBR0MsT0FBTyxDQUFDRCxJQUFJO1FBQ2hDO0lBQ0o7SUFFQSxPQUFPWTtBQUNYO0FBRUE7Ozs7OztDQU1DLEdBQ0RFLE9BQU9DLE9BQU8sR0FBRyxTQUFVZixHQUFHO0lBQzFCQSxNQUFNRSxhQUFhRixJQUFJZ0IsS0FBSyxDQUFDLEtBQUtDLEdBQUc7SUFDckMsT0FBT3JCLFVBQVUsQ0FBQ0ksSUFBSSxJQUFJO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL3dlbGwta25vd24vaW5kZXguanM/YzcxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHNlcnZpY2VzID0gcmVxdWlyZSgnLi9zZXJ2aWNlcy5qc29uJyk7XG5jb25zdCBub3JtYWxpemVkID0ge307XG5cbk9iamVjdC5rZXlzKHNlcnZpY2VzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgbGV0IHNlcnZpY2UgPSBzZXJ2aWNlc1trZXldO1xuXG4gICAgbm9ybWFsaXplZFtub3JtYWxpemVLZXkoa2V5KV0gPSBub3JtYWxpemVTZXJ2aWNlKHNlcnZpY2UpO1xuXG4gICAgW10uY29uY2F0KHNlcnZpY2UuYWxpYXNlcyB8fCBbXSkuZm9yRWFjaChhbGlhcyA9PiB7XG4gICAgICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplS2V5KGFsaWFzKV0gPSBub3JtYWxpemVTZXJ2aWNlKHNlcnZpY2UpO1xuICAgIH0pO1xuXG4gICAgW10uY29uY2F0KHNlcnZpY2UuZG9tYWlucyB8fCBbXSkuZm9yRWFjaChkb21haW4gPT4ge1xuICAgICAgICBub3JtYWxpemVkW25vcm1hbGl6ZUtleShkb21haW4pXSA9IG5vcm1hbGl6ZVNlcnZpY2Uoc2VydmljZSk7XG4gICAgfSk7XG59KTtcblxuZnVuY3Rpb24gbm9ybWFsaXplS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkucmVwbGFjZSgvW15hLXpBLVowLTkuLV0vZywgJycpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNlcnZpY2Uoc2VydmljZSkge1xuICAgIGxldCBmaWx0ZXIgPSBbJ2RvbWFpbnMnLCAnYWxpYXNlcyddO1xuICAgIGxldCByZXNwb25zZSA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXMoc2VydmljZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyLmluZGV4T2Yoa2V5KSA8IDApIHtcbiAgICAgICAgICAgIHJlc3BvbnNlW2tleV0gPSBzZXJ2aWNlW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyBTTVRQIGNvbmZpZyBmb3IgZ2l2ZW4ga2V5LiBLZXkgY2FuIGJlIGEgbmFtZSAobGlrZSAnR21haWwnKSwgYWxpYXMgKGxpa2UgJ0dvb2dsZSBNYWlsJykgb3JcbiAqIGFuIGVtYWlsIGFkZHJlc3MgKGxpa2UgJ3Rlc3RAZ29vZ2xlbWFpbC5jb20nKS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm5zIHtPYmplY3R9IFNNVFAgY29uZmlnIG9yIGZhbHNlIGlmIG5vdCBmb3VuZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5LnNwbGl0KCdAJykucG9wKCkpO1xuICAgIHJldHVybiBub3JtYWxpemVkW2tleV0gfHwgZmFsc2U7XG59O1xuIl0sIm5hbWVzIjpbInNlcnZpY2VzIiwicmVxdWlyZSIsIm5vcm1hbGl6ZWQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNlcnZpY2UiLCJub3JtYWxpemVLZXkiLCJub3JtYWxpemVTZXJ2aWNlIiwiY29uY2F0IiwiYWxpYXNlcyIsImFsaWFzIiwiZG9tYWlucyIsImRvbWFpbiIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlciIsInJlc3BvbnNlIiwiaW5kZXhPZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJzcGxpdCIsInBvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/well-known/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js":
/*!******************************************************!*\
  !*** ./node_modules/nodemailer/lib/xoauth2/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nconst nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * Usage for generating access tokens with a custom method using provisionCallback:\n * provisionCallback(user, renew, callback)\n *   * user is the username to get the token for\n *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed\n *   * callback is the callback to run with (error, accessToken [, expires])\n *     * accessToken is a string\n *     * expires is an optional expire time in milliseconds\n * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user User e-mail address\n * @param {String} options.clientId Client ID value\n * @param {String} options.clientSecret Client secret value\n * @param {String} options.refreshToken Refresh token for an user\n * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken An existing valid accessToken\n * @param {String} options.privateKey Private key for JSW\n * @param {Number} options.expires Optional Access Token expire time in ms\n * @param {Number} options.timeout Optional TTL for Access Token in seconds\n * @param {Function} options.provisionCallback Function to run when a new access token is required\n */ class XOAuth2 extends Stream {\n    constructor(options, logger){\n        super();\n        this.options = options || {};\n        if (options && options.serviceClient) {\n            if (!options.privateKey || !options.user) {\n                setImmediate(()=>this.emit(\"error\", new Error('Options \"privateKey\" and \"user\" are required for service account!')));\n                return;\n            }\n            let serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);\n            this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n        }\n        this.logger = shared.getLogger({\n            logger\n        }, {\n            component: this.options.component || \"OAuth2\"\n        });\n        this.provisionCallback = typeof this.options.provisionCallback === \"function\" ? this.options.provisionCallback : false;\n        this.options.accessUrl = this.options.accessUrl || \"https://accounts.google.com/o/oauth2/token\";\n        this.options.customHeaders = this.options.customHeaders || {};\n        this.options.customParams = this.options.customParams || {};\n        this.accessToken = this.options.accessToken || false;\n        if (this.options.expires && Number(this.options.expires)) {\n            this.expires = this.options.expires;\n        } else {\n            let timeout = Math.max(Number(this.options.timeout) || 0, 0);\n            this.expires = timeout && Date.now() + timeout * 1000 || 0;\n        }\n    }\n    /**\n     * Returns or generates (if previous has expired) a XOAuth2 token\n     *\n     * @param {Boolean} renew If false then use cached access token (if available)\n     * @param {Function} callback Callback function with error object and token string\n     */ getToken(renew, callback) {\n        if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {\n            return callback(null, this.accessToken);\n        }\n        let generateCallback = (...args)=>{\n            if (args[0]) {\n                this.logger.error({\n                    err: args[0],\n                    tnx: \"OAUTH2\",\n                    user: this.options.user,\n                    action: \"renew\"\n                }, \"Failed generating new Access Token for %s\", this.options.user);\n            } else {\n                this.logger.info({\n                    tnx: \"OAUTH2\",\n                    user: this.options.user,\n                    action: \"renew\"\n                }, \"Generated new Access Token for %s\", this.options.user);\n            }\n            callback(...args);\n        };\n        if (this.provisionCallback) {\n            this.provisionCallback(this.options.user, !!renew, (err, accessToken, expires)=>{\n                if (!err && accessToken) {\n                    this.accessToken = accessToken;\n                    this.expires = expires || 0;\n                }\n                generateCallback(err, accessToken);\n            });\n        } else {\n            this.generateToken(generateCallback);\n        }\n    }\n    /**\n     * Updates token values\n     *\n     * @param {String} accessToken New access token\n     * @param {Number} timeout Access token lifetime in seconds\n     *\n     * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n     */ updateToken(accessToken, timeout) {\n        this.accessToken = accessToken;\n        timeout = Math.max(Number(timeout) || 0, 0);\n        this.expires = timeout && Date.now() + timeout * 1000 || 0;\n        this.emit(\"token\", {\n            user: this.options.user,\n            accessToken: accessToken || \"\",\n            expires: this.expires\n        });\n    }\n    /**\n     * Generates a new XOAuth2 token with the credentials provided at initialization\n     *\n     * @param {Function} callback Callback function with error object and token string\n     */ generateToken(callback) {\n        let urlOptions;\n        let loggedUrlOptions;\n        if (this.options.serviceClient) {\n            // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n            let iat = Math.floor(Date.now() / 1000); // unix time\n            let tokenData = {\n                iss: this.options.serviceClient,\n                scope: this.options.scope || \"https://mail.google.com/\",\n                sub: this.options.user,\n                aud: this.options.accessUrl,\n                iat,\n                exp: iat + this.options.serviceRequestTimeout\n            };\n            let token;\n            try {\n                token = this.jwtSignRS256(tokenData);\n            } catch (err) {\n                return callback(new Error(\"Can't generate token. Check your auth options\"));\n            }\n            urlOptions = {\n                grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n                assertion: token\n            };\n            loggedUrlOptions = {\n                grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n                assertion: tokenData\n            };\n        } else {\n            if (!this.options.refreshToken) {\n                return callback(new Error(\"Can't create new access token for user\"));\n            }\n            // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n            urlOptions = {\n                client_id: this.options.clientId || \"\",\n                client_secret: this.options.clientSecret || \"\",\n                refresh_token: this.options.refreshToken,\n                grant_type: \"refresh_token\"\n            };\n            loggedUrlOptions = {\n                client_id: this.options.clientId || \"\",\n                client_secret: (this.options.clientSecret || \"\").substr(0, 6) + \"...\",\n                refresh_token: (this.options.refreshToken || \"\").substr(0, 6) + \"...\",\n                grant_type: \"refresh_token\"\n            };\n        }\n        Object.keys(this.options.customParams).forEach((key)=>{\n            urlOptions[key] = this.options.customParams[key];\n            loggedUrlOptions[key] = this.options.customParams[key];\n        });\n        this.logger.debug({\n            tnx: \"OAUTH2\",\n            user: this.options.user,\n            action: \"generate\"\n        }, \"Requesting token using: %s\", JSON.stringify(loggedUrlOptions));\n        this.postRequest(this.options.accessUrl, urlOptions, this.options, (error, body)=>{\n            let data;\n            if (error) {\n                return callback(error);\n            }\n            try {\n                data = JSON.parse(body.toString());\n            } catch (E) {\n                return callback(E);\n            }\n            if (!data || typeof data !== \"object\") {\n                this.logger.debug({\n                    tnx: \"OAUTH2\",\n                    user: this.options.user,\n                    action: \"post\"\n                }, \"Response: %s\", (body || \"\").toString());\n                return callback(new Error(\"Invalid authentication response\"));\n            }\n            let logData = {};\n            Object.keys(data).forEach((key)=>{\n                if (key !== \"access_token\") {\n                    logData[key] = data[key];\n                } else {\n                    logData[key] = (data[key] || \"\").toString().substr(0, 6) + \"...\";\n                }\n            });\n            this.logger.debug({\n                tnx: \"OAUTH2\",\n                user: this.options.user,\n                action: \"post\"\n            }, \"Response: %s\", JSON.stringify(logData));\n            if (data.error) {\n                // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2\n                let errorMessage = data.error;\n                if (data.error_description) {\n                    errorMessage += \": \" + data.error_description;\n                }\n                if (data.error_uri) {\n                    errorMessage += \" (\" + data.error_uri + \")\";\n                }\n                return callback(new Error(errorMessage));\n            }\n            if (data.access_token) {\n                this.updateToken(data.access_token, data.expires_in);\n                return callback(null, this.accessToken);\n            }\n            return callback(new Error(\"No access token\"));\n        });\n    }\n    /**\n     * Converts an access_token and user id into a base64 encoded XOAuth2 token\n     *\n     * @param {String} [accessToken] Access token string\n     * @return {String} Base64 encoded token for IMAP or SMTP login\n     */ buildXOAuth2Token(accessToken) {\n        let authData = [\n            \"user=\" + (this.options.user || \"\"),\n            \"auth=Bearer \" + (accessToken || this.accessToken),\n            \"\",\n            \"\"\n        ];\n        return Buffer.from(authData.join(\"\\x01\"), \"utf-8\").toString(\"base64\");\n    }\n    /**\n     * Custom POST request handler.\n     * This is only needed to keep paths short in Windows – usually this module\n     * is a dependency of a dependency and if it tries to require something\n     * like the request module the paths get way too long to handle for Windows.\n     * As we do only a simple POST request we do not actually require complicated\n     * logic support (no redirects, no nothing) anyway.\n     *\n     * @param {String} url Url to POST to\n     * @param {String|Buffer} payload Payload to POST\n     * @param {Function} callback Callback function with (err, buff)\n     */ postRequest(url, payload, params, callback) {\n        let returned = false;\n        let chunks = [];\n        let chunklen = 0;\n        let req = nmfetch(url, {\n            method: \"post\",\n            headers: params.customHeaders,\n            body: payload,\n            allowErrorResponse: true\n        });\n        req.on(\"readable\", ()=>{\n            let chunk;\n            while((chunk = req.read()) !== null){\n                chunks.push(chunk);\n                chunklen += chunk.length;\n            }\n        });\n        req.once(\"error\", (err)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(err);\n        });\n        req.once(\"end\", ()=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(null, Buffer.concat(chunks, chunklen));\n        });\n    }\n    /**\n     * Encodes a buffer or a string into Base64url format\n     *\n     * @param {Buffer|String} data The data to convert\n     * @return {String} The encoded string\n     */ toBase64URL(data) {\n        if (typeof data === \"string\") {\n            data = Buffer.from(data);\n        }\n        return data.toString(\"base64\").replace(/[=]+/g, \"\") // remove '='s\n        .replace(/\\+/g, \"-\") // '+' → '-'\n        .replace(/\\//g, \"_\"); // '/' → '_'\n    }\n    /**\n     * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n     *\n     * @param {Object} payload The payload to include in the generated token\n     * @return {String} The generated and signed token\n     */ jwtSignRS256(payload) {\n        payload = [\n            '{\"alg\":\"RS256\",\"typ\":\"JWT\"}',\n            JSON.stringify(payload)\n        ].map((val)=>this.toBase64URL(val)).join(\".\");\n        let signature = crypto.createSign(\"RSA-SHA256\").update(payload).sign(this.options.privateKey);\n        return payload + \".\" + this.toBase64URL(signature);\n    }\n}\nmodule.exports = XOAuth2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/well-known/services.json":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/well-known/services.json ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"126":{"host":"smtp.126.com","port":465,"secure":true},"163":{"host":"smtp.163.com","port":465,"secure":true},"1und1":{"host":"smtp.1und1.de","port":465,"secure":true,"authMethod":"LOGIN"},"Aliyun":{"domains":["aliyun.com"],"host":"smtp.aliyun.com","port":465,"secure":true},"AOL":{"domains":["aol.com"],"host":"smtp.aol.com","port":587},"Bluewin":{"host":"smtpauths.bluewin.ch","domains":["bluewin.ch"],"port":465},"DebugMail":{"host":"debugmail.io","port":25},"DynectEmail":{"aliases":["Dynect"],"host":"smtp.dynect.net","port":25},"Ethereal":{"aliases":["ethereal.email"],"host":"smtp.ethereal.email","port":587},"FastMail":{"domains":["fastmail.fm"],"host":"smtp.fastmail.com","port":465,"secure":true},"Forward Email":{"aliases":["FE","ForwardEmail"],"domains":["forwardemail.net"],"host":"smtp.forwardemail.net","port":465,"secure":true},"GandiMail":{"aliases":["Gandi","Gandi Mail"],"host":"mail.gandi.net","port":587},"Gmail":{"aliases":["Google Mail"],"domains":["gmail.com","googlemail.com"],"host":"smtp.gmail.com","port":465,"secure":true},"Godaddy":{"host":"smtpout.secureserver.net","port":25},"GodaddyAsia":{"host":"smtp.asia.secureserver.net","port":25},"GodaddyEurope":{"host":"smtp.europe.secureserver.net","port":25},"hot.ee":{"host":"mail.hot.ee"},"Hotmail":{"aliases":["Outlook","Outlook.com","Hotmail.com"],"domains":["hotmail.com","outlook.com"],"host":"smtp-mail.outlook.com","port":587},"iCloud":{"aliases":["Me","Mac"],"domains":["me.com","mac.com"],"host":"smtp.mail.me.com","port":587},"Infomaniak":{"host":"mail.infomaniak.com","domains":["ik.me","ikmail.com","etik.com"],"port":587},"mail.ee":{"host":"smtp.mail.ee"},"Mail.ru":{"host":"smtp.mail.ru","port":465,"secure":true},"Maildev":{"port":1025,"ignoreTLS":true},"Mailgun":{"host":"smtp.mailgun.org","port":465,"secure":true},"Mailjet":{"host":"in.mailjet.com","port":587},"Mailosaur":{"host":"mailosaur.io","port":25},"Mailtrap":{"host":"smtp.mailtrap.io","port":2525},"Mandrill":{"host":"smtp.mandrillapp.com","port":587},"Naver":{"host":"smtp.naver.com","port":587},"One":{"host":"send.one.com","port":465,"secure":true},"OpenMailBox":{"aliases":["OMB","openmailbox.org"],"host":"smtp.openmailbox.org","port":465,"secure":true},"Outlook365":{"host":"smtp.office365.com","port":587,"secure":false},"OhMySMTP":{"host":"smtp.ohmysmtp.com","port":587,"secure":false},"Postmark":{"aliases":["PostmarkApp"],"host":"smtp.postmarkapp.com","port":2525},"qiye.aliyun":{"host":"smtp.mxhichina.com","port":"465","secure":true},"QQ":{"domains":["qq.com"],"host":"smtp.qq.com","port":465,"secure":true},"QQex":{"aliases":["QQ Enterprise"],"domains":["exmail.qq.com"],"host":"smtp.exmail.qq.com","port":465,"secure":true},"SendCloud":{"host":"smtp.sendcloud.net","port":2525},"SendGrid":{"host":"smtp.sendgrid.net","port":587},"SendinBlue":{"aliases":["Brevo"],"host":"smtp-relay.brevo.com","port":587},"SendPulse":{"host":"smtp-pulse.com","port":465,"secure":true},"SES":{"host":"email-smtp.us-east-1.amazonaws.com","port":465,"secure":true},"SES-US-EAST-1":{"host":"email-smtp.us-east-1.amazonaws.com","port":465,"secure":true},"SES-US-WEST-2":{"host":"email-smtp.us-west-2.amazonaws.com","port":465,"secure":true},"SES-EU-WEST-1":{"host":"email-smtp.eu-west-1.amazonaws.com","port":465,"secure":true},"SES-AP-SOUTH-1":{"host":"email-smtp.ap-south-1.amazonaws.com","port":465,"secure":true},"SES-AP-NORTHEAST-1":{"host":"email-smtp.ap-northeast-1.amazonaws.com","port":465,"secure":true},"SES-AP-NORTHEAST-2":{"host":"email-smtp.ap-northeast-2.amazonaws.com","port":465,"secure":true},"SES-AP-NORTHEAST-3":{"host":"email-smtp.ap-northeast-3.amazonaws.com","port":465,"secure":true},"SES-AP-SOUTHEAST-1":{"host":"email-smtp.ap-southeast-1.amazonaws.com","port":465,"secure":true},"SES-AP-SOUTHEAST-2":{"host":"email-smtp.ap-southeast-2.amazonaws.com","port":465,"secure":true},"Sparkpost":{"aliases":["SparkPost","SparkPost Mail"],"domains":["sparkpost.com"],"host":"smtp.sparkpostmail.com","port":587,"secure":false},"Tipimail":{"host":"smtp.tipimail.com","port":587},"Yahoo":{"domains":["yahoo.com"],"host":"smtp.mail.yahoo.com","port":465,"secure":true},"Yandex":{"domains":["yandex.ru"],"host":"smtp.yandex.ru","port":465,"secure":true},"Zoho":{"host":"smtp.zoho.com","port":465,"secure":true,"authMethod":"LOGIN"}}');

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/package.json":
/*!**********************************************!*\
  !*** ./node_modules/nodemailer/package.json ***!
  \**********************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"nodemailer","version":"6.9.7","description":"Easy as cake e-mail sending from your Node.js applications","main":"lib/nodemailer.js","scripts":{"test":"grunt --trace-warnings","update":"rm -rf node_modules/ package-lock.json && ncu -u && npm install"},"repository":{"type":"git","url":"https://github.com/nodemailer/nodemailer.git"},"keywords":["Nodemailer"],"author":"Andris Reinman","license":"MIT-0","bugs":{"url":"https://github.com/nodemailer/nodemailer/issues"},"homepage":"https://nodemailer.com/","devDependencies":{"@aws-sdk/client-ses":"3.433.0","aws-sdk":"2.1478.0","bunyan":"1.8.15","chai":"4.3.10","eslint-config-nodemailer":"1.2.0","eslint-config-prettier":"9.0.0","grunt":"1.6.1","grunt-cli":"1.4.3","grunt-eslint":"24.3.0","grunt-mocha-test":"0.13.3","libbase64":"1.2.1","libmime":"5.2.1","libqp":"2.0.1","mocha":"10.2.0","nodemailer-ntlm-auth":"1.0.4","proxy":"1.0.2","proxy-test-server":"1.0.0","sinon":"17.0.0","smtp-server":"3.13.0"},"engines":{"node":">=6.0.0"}}');

/***/ })

};
;